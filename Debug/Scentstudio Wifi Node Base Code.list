
Scentstudio Wifi Node Base Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce0c  08000240  08000240  00001240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800d04c  0800d04c  0000e04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d510  0800d510  0000e510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800d514  0800d514  0000e514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000080  20000000  0800d518  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000a09c  20000080  0800d598  0000f080  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000a11c  0800d598  0000f11c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003361a  00000000  00000000  0000f0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006bf7  00000000  00000000  000426d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002d30  00000000  00000000  000492c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000022b4  00000000  00000000  0004bff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003d71a  00000000  00000000  0004e2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003773b  00000000  00000000  0008b9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001702a4  00000000  00000000  000c3101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  002333a5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000bfd8  00000000  00000000  002333e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000007b  00000000  00000000  0023f3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	@ (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20000080 	.word	0x20000080
 800025c:	00000000 	.word	0x00000000
 8000260:	0800d034 	.word	0x0800d034

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	@ (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	@ (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20000084 	.word	0x20000084
 800027c:	0800d034 	.word	0x0800d034

08000280 <vApplicationStackOverflowHook>:
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, char *pcTaskName)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <configureTimerForRunTimeStats>:
/* USER CODE END 4 */

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000296:	b480      	push	{r7}
 8000298:	af00      	add	r7, sp, #0

}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr

080002a4 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
return 0;
 80002a8:	2300      	movs	r3, #0
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */
  /* creation of sensorADCQueue */
  sensorADCQueueHandle = osMessageQueueNew (4, sizeof(uint16_t), &sensorADCQueue_attributes);
 80002b8:	4a4d      	ldr	r2, [pc, #308]	@ (80003f0 <MX_FREERTOS_Init+0x13c>)
 80002ba:	2102      	movs	r1, #2
 80002bc:	2004      	movs	r0, #4
 80002be:	f00a fb16 	bl	800a8ee <osMessageQueueNew>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a4b      	ldr	r2, [pc, #300]	@ (80003f4 <MX_FREERTOS_Init+0x140>)
 80002c6:	6013      	str	r3, [r2, #0]
  /* creation of wifiQueue */
  wifiQueueHandle = osMessageQueueNew (4, sizeof(uint16_t), &wifiQueue_attributes);
 80002c8:	4a4b      	ldr	r2, [pc, #300]	@ (80003f8 <MX_FREERTOS_Init+0x144>)
 80002ca:	2102      	movs	r1, #2
 80002cc:	2004      	movs	r0, #4
 80002ce:	f00a fb0e 	bl	800a8ee <osMessageQueueNew>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a49      	ldr	r2, [pc, #292]	@ (80003fc <MX_FREERTOS_Init+0x148>)
 80002d6:	6013      	str	r3, [r2, #0]
  /* creation of sensorBMEQueue */
  sensorBMEQueueHandle = osMessageQueueNew (4, sizeof(uint16_t), &sensorBMEQueue_attributes);
 80002d8:	4a49      	ldr	r2, [pc, #292]	@ (8000400 <MX_FREERTOS_Init+0x14c>)
 80002da:	2102      	movs	r1, #2
 80002dc:	2004      	movs	r0, #4
 80002de:	f00a fb06 	bl	800a8ee <osMessageQueueNew>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a47      	ldr	r2, [pc, #284]	@ (8000404 <MX_FREERTOS_Init+0x150>)
 80002e6:	6013      	str	r3, [r2, #0]
  /* creation of sensorZMOD4410Queue */
  sensorZMOD4410QueueHandle = osMessageQueueNew (4, sizeof(uint16_t), &sensorZMOD4410Queue_attributes);
 80002e8:	4a47      	ldr	r2, [pc, #284]	@ (8000408 <MX_FREERTOS_Init+0x154>)
 80002ea:	2102      	movs	r1, #2
 80002ec:	2004      	movs	r0, #4
 80002ee:	f00a fafe 	bl	800a8ee <osMessageQueueNew>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4a45      	ldr	r2, [pc, #276]	@ (800040c <MX_FREERTOS_Init+0x158>)
 80002f6:	6013      	str	r3, [r2, #0]
  /* creation of sensorZMOD4450Queue */
  sensorZMOD4450QueueHandle = osMessageQueueNew (4, sizeof(uint16_t), &sensorZMOD4450Queue_attributes);
 80002f8:	4a45      	ldr	r2, [pc, #276]	@ (8000410 <MX_FREERTOS_Init+0x15c>)
 80002fa:	2102      	movs	r1, #2
 80002fc:	2004      	movs	r0, #4
 80002fe:	f00a faf6 	bl	800a8ee <osMessageQueueNew>
 8000302:	4603      	mov	r3, r0
 8000304:	4a43      	ldr	r2, [pc, #268]	@ (8000414 <MX_FREERTOS_Init+0x160>)
 8000306:	6013      	str	r3, [r2, #0]
  /* creation of batteryQueue */
  batteryQueueHandle = osMessageQueueNew (4, sizeof(uint16_t), &batteryQueue_attributes);
 8000308:	4a43      	ldr	r2, [pc, #268]	@ (8000418 <MX_FREERTOS_Init+0x164>)
 800030a:	2102      	movs	r1, #2
 800030c:	2004      	movs	r0, #4
 800030e:	f00a faee 	bl	800a8ee <osMessageQueueNew>
 8000312:	4603      	mov	r3, r0
 8000314:	4a41      	ldr	r2, [pc, #260]	@ (800041c <MX_FREERTOS_Init+0x168>)
 8000316:	6013      	str	r3, [r2, #0]
  /* creation of SDcardQueue */
  SDcardQueueHandle = osMessageQueueNew (4, sizeof(uint16_t), &SDcardQueue_attributes);
 8000318:	4a41      	ldr	r2, [pc, #260]	@ (8000420 <MX_FREERTOS_Init+0x16c>)
 800031a:	2102      	movs	r1, #2
 800031c:	2004      	movs	r0, #4
 800031e:	f00a fae6 	bl	800a8ee <osMessageQueueNew>
 8000322:	4603      	mov	r3, r0
 8000324:	4a3f      	ldr	r2, [pc, #252]	@ (8000424 <MX_FREERTOS_Init+0x170>)
 8000326:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 8000328:	4a3f      	ldr	r2, [pc, #252]	@ (8000428 <MX_FREERTOS_Init+0x174>)
 800032a:	2100      	movs	r1, #0
 800032c:	483f      	ldr	r0, [pc, #252]	@ (800042c <MX_FREERTOS_Init+0x178>)
 800032e:	f00a f9f5 	bl	800a71c <osThreadNew>
 8000332:	4603      	mov	r3, r0
 8000334:	4a3e      	ldr	r2, [pc, #248]	@ (8000430 <MX_FREERTOS_Init+0x17c>)
 8000336:	6013      	str	r3, [r2, #0]

  /* creation of wifiTask */
  wifiTaskHandle = osThreadNew(StartWifiTask, NULL, &wifiTask_attributes);
 8000338:	4a3e      	ldr	r2, [pc, #248]	@ (8000434 <MX_FREERTOS_Init+0x180>)
 800033a:	2100      	movs	r1, #0
 800033c:	483e      	ldr	r0, [pc, #248]	@ (8000438 <MX_FREERTOS_Init+0x184>)
 800033e:	f00a f9ed 	bl	800a71c <osThreadNew>
 8000342:	4603      	mov	r3, r0
 8000344:	4a3d      	ldr	r2, [pc, #244]	@ (800043c <MX_FREERTOS_Init+0x188>)
 8000346:	6013      	str	r3, [r2, #0]

  /* creation of sensorADCTask */
  sensorADCTaskHandle = osThreadNew(StartsensorADCTask, NULL, &sensorADCTask_attributes);
 8000348:	4a3d      	ldr	r2, [pc, #244]	@ (8000440 <MX_FREERTOS_Init+0x18c>)
 800034a:	2100      	movs	r1, #0
 800034c:	483d      	ldr	r0, [pc, #244]	@ (8000444 <MX_FREERTOS_Init+0x190>)
 800034e:	f00a f9e5 	bl	800a71c <osThreadNew>
 8000352:	4603      	mov	r3, r0
 8000354:	4a3c      	ldr	r2, [pc, #240]	@ (8000448 <MX_FREERTOS_Init+0x194>)
 8000356:	6013      	str	r3, [r2, #0]

  /* creation of buttonTask */
  buttonTaskHandle = osThreadNew(StartButtonTask, NULL, &buttonTask_attributes);
 8000358:	4a3c      	ldr	r2, [pc, #240]	@ (800044c <MX_FREERTOS_Init+0x198>)
 800035a:	2100      	movs	r1, #0
 800035c:	483c      	ldr	r0, [pc, #240]	@ (8000450 <MX_FREERTOS_Init+0x19c>)
 800035e:	f00a f9dd 	bl	800a71c <osThreadNew>
 8000362:	4603      	mov	r3, r0
 8000364:	4a3b      	ldr	r2, [pc, #236]	@ (8000454 <MX_FREERTOS_Init+0x1a0>)
 8000366:	6013      	str	r3, [r2, #0]

  /* creation of sensorBMETask */
  sensorBMETaskHandle = osThreadNew(StartsensorsBMETask, NULL, &sensorBMETask_attributes);
 8000368:	4a3b      	ldr	r2, [pc, #236]	@ (8000458 <MX_FREERTOS_Init+0x1a4>)
 800036a:	2100      	movs	r1, #0
 800036c:	483b      	ldr	r0, [pc, #236]	@ (800045c <MX_FREERTOS_Init+0x1a8>)
 800036e:	f00a f9d5 	bl	800a71c <osThreadNew>
 8000372:	4603      	mov	r3, r0
 8000374:	4a3a      	ldr	r2, [pc, #232]	@ (8000460 <MX_FREERTOS_Init+0x1ac>)
 8000376:	6013      	str	r3, [r2, #0]

  /* creation of sensorzmod4410Task */
  sensorzmod4410TaskHandle = osThreadNew(Startsensorzmod4410Task, NULL, &sensorzmod4410Task_attributes);
 8000378:	4a3a      	ldr	r2, [pc, #232]	@ (8000464 <MX_FREERTOS_Init+0x1b0>)
 800037a:	2100      	movs	r1, #0
 800037c:	483a      	ldr	r0, [pc, #232]	@ (8000468 <MX_FREERTOS_Init+0x1b4>)
 800037e:	f00a f9cd 	bl	800a71c <osThreadNew>
 8000382:	4603      	mov	r3, r0
 8000384:	4a39      	ldr	r2, [pc, #228]	@ (800046c <MX_FREERTOS_Init+0x1b8>)
 8000386:	6013      	str	r3, [r2, #0]

  /* creation of sensorzmod4450Task */
  sensorzmod4450TaskHandle = osThreadNew(Startsensorzmod4450Task, NULL, &sensorzmod4450Task_attributes);
 8000388:	4a39      	ldr	r2, [pc, #228]	@ (8000470 <MX_FREERTOS_Init+0x1bc>)
 800038a:	2100      	movs	r1, #0
 800038c:	4839      	ldr	r0, [pc, #228]	@ (8000474 <MX_FREERTOS_Init+0x1c0>)
 800038e:	f00a f9c5 	bl	800a71c <osThreadNew>
 8000392:	4603      	mov	r3, r0
 8000394:	4a38      	ldr	r2, [pc, #224]	@ (8000478 <MX_FREERTOS_Init+0x1c4>)
 8000396:	6013      	str	r3, [r2, #0]

  /* creation of batteryTask */
  batteryTaskHandle = osThreadNew(StartTask08, NULL, &batteryTask_attributes);
 8000398:	4a38      	ldr	r2, [pc, #224]	@ (800047c <MX_FREERTOS_Init+0x1c8>)
 800039a:	2100      	movs	r1, #0
 800039c:	4838      	ldr	r0, [pc, #224]	@ (8000480 <MX_FREERTOS_Init+0x1cc>)
 800039e:	f00a f9bd 	bl	800a71c <osThreadNew>
 80003a2:	4603      	mov	r3, r0
 80003a4:	4a37      	ldr	r2, [pc, #220]	@ (8000484 <MX_FREERTOS_Init+0x1d0>)
 80003a6:	6013      	str	r3, [r2, #0]

  /* creation of SDCardTask */
  SDCardTaskHandle = osThreadNew(StartSDCardTask, NULL, &SDCardTask_attributes);
 80003a8:	4a37      	ldr	r2, [pc, #220]	@ (8000488 <MX_FREERTOS_Init+0x1d4>)
 80003aa:	2100      	movs	r1, #0
 80003ac:	4837      	ldr	r0, [pc, #220]	@ (800048c <MX_FREERTOS_Init+0x1d8>)
 80003ae:	f00a f9b5 	bl	800a71c <osThreadNew>
 80003b2:	4603      	mov	r3, r0
 80003b4:	4a36      	ldr	r2, [pc, #216]	@ (8000490 <MX_FREERTOS_Init+0x1dc>)
 80003b6:	6013      	str	r3, [r2, #0]

  /* creation of watchdogTask */
  watchdogTaskHandle = osThreadNew(StartwatchdogTask, NULL, &watchdogTask_attributes);
 80003b8:	4a36      	ldr	r2, [pc, #216]	@ (8000494 <MX_FREERTOS_Init+0x1e0>)
 80003ba:	2100      	movs	r1, #0
 80003bc:	4836      	ldr	r0, [pc, #216]	@ (8000498 <MX_FREERTOS_Init+0x1e4>)
 80003be:	f00a f9ad 	bl	800a71c <osThreadNew>
 80003c2:	4603      	mov	r3, r0
 80003c4:	4a35      	ldr	r2, [pc, #212]	@ (800049c <MX_FREERTOS_Init+0x1e8>)
 80003c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of buttonClickEvent */
  buttonClickEventHandle = osEventFlagsNew(&buttonClickEvent_attributes);
 80003c8:	4835      	ldr	r0, [pc, #212]	@ (80004a0 <MX_FREERTOS_Init+0x1ec>)
 80003ca:	f00a fa52 	bl	800a872 <osEventFlagsNew>
 80003ce:	4603      	mov	r3, r0
 80003d0:	4a34      	ldr	r2, [pc, #208]	@ (80004a4 <MX_FREERTOS_Init+0x1f0>)
 80003d2:	6013      	str	r3, [r2, #0]

  /* creation of dataReadyEvent */
  dataReadyEventHandle = osEventFlagsNew(&dataReadyEvent_attributes);
 80003d4:	4834      	ldr	r0, [pc, #208]	@ (80004a8 <MX_FREERTOS_Init+0x1f4>)
 80003d6:	f00a fa4c 	bl	800a872 <osEventFlagsNew>
 80003da:	4603      	mov	r3, r0
 80003dc:	4a33      	ldr	r2, [pc, #204]	@ (80004ac <MX_FREERTOS_Init+0x1f8>)
 80003de:	6013      	str	r3, [r2, #0]

  /* creation of readSensorsEvent */
  readSensorsEventHandle = osEventFlagsNew(&readSensorsEvent_attributes);
 80003e0:	4833      	ldr	r0, [pc, #204]	@ (80004b0 <MX_FREERTOS_Init+0x1fc>)
 80003e2:	f00a fa46 	bl	800a872 <osEventFlagsNew>
 80003e6:	4603      	mov	r3, r0
 80003e8:	4a32      	ldr	r2, [pc, #200]	@ (80004b4 <MX_FREERTOS_Init+0x200>)
 80003ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	0800d330 	.word	0x0800d330
 80003f4:	200000c4 	.word	0x200000c4
 80003f8:	0800d348 	.word	0x0800d348
 80003fc:	200000c8 	.word	0x200000c8
 8000400:	0800d360 	.word	0x0800d360
 8000404:	200000cc 	.word	0x200000cc
 8000408:	0800d378 	.word	0x0800d378
 800040c:	200000d0 	.word	0x200000d0
 8000410:	0800d390 	.word	0x0800d390
 8000414:	200000d4 	.word	0x200000d4
 8000418:	0800d3a8 	.word	0x0800d3a8
 800041c:	200000d8 	.word	0x200000d8
 8000420:	0800d3c0 	.word	0x0800d3c0
 8000424:	200000dc 	.word	0x200000dc
 8000428:	0800d1c8 	.word	0x0800d1c8
 800042c:	080004b9 	.word	0x080004b9
 8000430:	2000009c 	.word	0x2000009c
 8000434:	0800d1ec 	.word	0x0800d1ec
 8000438:	080004c9 	.word	0x080004c9
 800043c:	200000a0 	.word	0x200000a0
 8000440:	0800d210 	.word	0x0800d210
 8000444:	080004d9 	.word	0x080004d9
 8000448:	200000a4 	.word	0x200000a4
 800044c:	0800d234 	.word	0x0800d234
 8000450:	080004e9 	.word	0x080004e9
 8000454:	200000a8 	.word	0x200000a8
 8000458:	0800d258 	.word	0x0800d258
 800045c:	080004f9 	.word	0x080004f9
 8000460:	200000ac 	.word	0x200000ac
 8000464:	0800d27c 	.word	0x0800d27c
 8000468:	08000509 	.word	0x08000509
 800046c:	200000b0 	.word	0x200000b0
 8000470:	0800d2a0 	.word	0x0800d2a0
 8000474:	08000519 	.word	0x08000519
 8000478:	200000b4 	.word	0x200000b4
 800047c:	0800d2c4 	.word	0x0800d2c4
 8000480:	08000529 	.word	0x08000529
 8000484:	200000b8 	.word	0x200000b8
 8000488:	0800d2e8 	.word	0x0800d2e8
 800048c:	08000539 	.word	0x08000539
 8000490:	200000bc 	.word	0x200000bc
 8000494:	0800d30c 	.word	0x0800d30c
 8000498:	08000549 	.word	0x08000549
 800049c:	200000c0 	.word	0x200000c0
 80004a0:	0800d3d8 	.word	0x0800d3d8
 80004a4:	200000e0 	.word	0x200000e0
 80004a8:	0800d3e8 	.word	0x0800d3e8
 80004ac:	200000e4 	.word	0x200000e4
 80004b0:	0800d3f8 	.word	0x0800d3f8
 80004b4:	200000e8 	.word	0x200000e8

080004b8 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mainTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f00a f9bc 	bl	800a83e <osDelay>
 80004c6:	e7fb      	b.n	80004c0 <StartMainTask+0x8>

080004c8 <StartWifiTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWifiTask */
void StartWifiTask(void *argument)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004d0:	2001      	movs	r0, #1
 80004d2:	f00a f9b4 	bl	800a83e <osDelay>
 80004d6:	e7fb      	b.n	80004d0 <StartWifiTask+0x8>

080004d8 <StartsensorADCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartsensorADCTask */
void StartsensorADCTask(void *argument)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorADCTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004e0:	2001      	movs	r0, #1
 80004e2:	f00a f9ac 	bl	800a83e <osDelay>
 80004e6:	e7fb      	b.n	80004e0 <StartsensorADCTask+0x8>

080004e8 <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buttonTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f00a f9a4 	bl	800a83e <osDelay>
 80004f6:	e7fb      	b.n	80004f0 <StartButtonTask+0x8>

080004f8 <StartsensorsBMETask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartsensorsBMETask */
void StartsensorsBMETask(void *argument)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorBMETask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f00a f99c 	bl	800a83e <osDelay>
 8000506:	e7fb      	b.n	8000500 <StartsensorsBMETask+0x8>

08000508 <Startsensorzmod4410Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startsensorzmod4410Task */
void Startsensorzmod4410Task(void *argument)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorzmod4410Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000510:	2001      	movs	r0, #1
 8000512:	f00a f994 	bl	800a83e <osDelay>
 8000516:	e7fb      	b.n	8000510 <Startsensorzmod4410Task+0x8>

08000518 <Startsensorzmod4450Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startsensorzmod4450Task */
void Startsensorzmod4450Task(void *argument)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorzmod4450Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f00a f98c 	bl	800a83e <osDelay>
 8000526:	e7fb      	b.n	8000520 <Startsensorzmod4450Task+0x8>

08000528 <StartTask08>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask08 */
void StartTask08(void *argument)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN batteryTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000530:	2001      	movs	r0, #1
 8000532:	f00a f984 	bl	800a83e <osDelay>
 8000536:	e7fb      	b.n	8000530 <StartTask08+0x8>

08000538 <StartSDCardTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSDCardTask */
void StartSDCardTask(void *argument)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDCardTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f00a f97c 	bl	800a83e <osDelay>
 8000546:	e7fb      	b.n	8000540 <StartSDCardTask+0x8>

08000548 <StartwatchdogTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartwatchdogTask */
void StartwatchdogTask(void *argument)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchdogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000550:	2001      	movs	r0, #1
 8000552:	f00a f974 	bl	800a83e <osDelay>
 8000556:	e7fb      	b.n	8000550 <StartwatchdogTask+0x8>

08000558 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800055e:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <MX_GPDMA1_Init+0x4c>)
 8000560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000564:	4a0f      	ldr	r2, [pc, #60]	@ (80005a4 <MX_GPDMA1_Init+0x4c>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800056e:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <MX_GPDMA1_Init+0x4c>)
 8000570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2105      	movs	r1, #5
 8000580:	201d      	movs	r0, #29
 8000582:	f001 ff87 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000586:	201d      	movs	r0, #29
 8000588:	f001 ff9e 	bl	80024c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 5, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	2105      	movs	r1, #5
 8000590:	201e      	movs	r0, #30
 8000592:	f001 ff7f 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000596:	201e      	movs	r0, #30
 8000598:	f001 ff96 	bl	80024c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	46020c00 	.word	0x46020c00

080005a8 <MX_GPIO_Init>:
     PD9   ------> USART3_RX
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08c      	sub	sp, #48	@ 0x30
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005be:	4b8a      	ldr	r3, [pc, #552]	@ (80007e8 <MX_GPIO_Init+0x240>)
 80005c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005c4:	4a88      	ldr	r2, [pc, #544]	@ (80007e8 <MX_GPIO_Init+0x240>)
 80005c6:	f043 0310 	orr.w	r3, r3, #16
 80005ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ce:	4b86      	ldr	r3, [pc, #536]	@ (80007e8 <MX_GPIO_Init+0x240>)
 80005d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005d4:	f003 0310 	and.w	r3, r3, #16
 80005d8:	61bb      	str	r3, [r7, #24]
 80005da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005dc:	4b82      	ldr	r3, [pc, #520]	@ (80007e8 <MX_GPIO_Init+0x240>)
 80005de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005e2:	4a81      	ldr	r2, [pc, #516]	@ (80007e8 <MX_GPIO_Init+0x240>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ec:	4b7e      	ldr	r3, [pc, #504]	@ (80007e8 <MX_GPIO_Init+0x240>)
 80005ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fa:	4b7b      	ldr	r3, [pc, #492]	@ (80007e8 <MX_GPIO_Init+0x240>)
 80005fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000600:	4a79      	ldr	r2, [pc, #484]	@ (80007e8 <MX_GPIO_Init+0x240>)
 8000602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000606:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800060a:	4b77      	ldr	r3, [pc, #476]	@ (80007e8 <MX_GPIO_Init+0x240>)
 800060c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b73      	ldr	r3, [pc, #460]	@ (80007e8 <MX_GPIO_Init+0x240>)
 800061a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800061e:	4a72      	ldr	r2, [pc, #456]	@ (80007e8 <MX_GPIO_Init+0x240>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000628:	4b6f      	ldr	r3, [pc, #444]	@ (80007e8 <MX_GPIO_Init+0x240>)
 800062a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b6c      	ldr	r3, [pc, #432]	@ (80007e8 <MX_GPIO_Init+0x240>)
 8000638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800063c:	4a6a      	ldr	r2, [pc, #424]	@ (80007e8 <MX_GPIO_Init+0x240>)
 800063e:	f043 0302 	orr.w	r3, r3, #2
 8000642:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000646:	4b68      	ldr	r3, [pc, #416]	@ (80007e8 <MX_GPIO_Init+0x240>)
 8000648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000654:	4b64      	ldr	r3, [pc, #400]	@ (80007e8 <MX_GPIO_Init+0x240>)
 8000656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800065a:	4a63      	ldr	r2, [pc, #396]	@ (80007e8 <MX_GPIO_Init+0x240>)
 800065c:	f043 0308 	orr.w	r3, r3, #8
 8000660:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000664:	4b60      	ldr	r3, [pc, #384]	@ (80007e8 <MX_GPIO_Init+0x240>)
 8000666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800066a:	f003 0308 	and.w	r3, r3, #8
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2103      	movs	r1, #3
 8000676:	485d      	ldr	r0, [pc, #372]	@ (80007ec <MX_GPIO_Init+0x244>)
 8000678:	f002 ffd8 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|wifi_enable_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f248 1102 	movw	r1, #33026	@ 0x8102
 8000682:	485b      	ldr	r0, [pc, #364]	@ (80007f0 <MX_GPIO_Init+0x248>)
 8000684:	f002 ffd2 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, sd_card_cs_Pin|wifi_boot_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800068e:	4859      	ldr	r0, [pc, #356]	@ (80007f4 <MX_GPIO_Init+0x24c>)
 8000690:	f002 ffcc 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(sd_card_enable_GPIO_Port, sd_card_enable_Pin, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2120      	movs	r1, #32
 8000698:	4856      	ldr	r0, [pc, #344]	@ (80007f4 <MX_GPIO_Init+0x24c>)
 800069a:	f002 ffc7 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f241 0150 	movw	r1, #4176	@ 0x1050
 80006a4:	4854      	ldr	r0, [pc, #336]	@ (80007f8 <MX_GPIO_Init+0x250>)
 80006a6:	f002 ffc1 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	210b      	movs	r1, #11
 80006ae:	4853      	ldr	r0, [pc, #332]	@ (80007fc <MX_GPIO_Init+0x254>)
 80006b0:	f002 ffbc 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006b4:	2303      	movs	r3, #3
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4848      	ldr	r0, [pc, #288]	@ (80007ec <MX_GPIO_Init+0x244>)
 80006cc:	f002 fdd6 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PAPin PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|wifi_enable_Pin|GPIO_PIN_15;
 80006d0:	f248 1302 	movw	r3, #33026	@ 0x8102
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	4619      	mov	r1, r3
 80006e8:	4841      	ldr	r0, [pc, #260]	@ (80007f0 <MX_GPIO_Init+0x248>)
 80006ea:	f002 fdc7 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ee:	2304      	movs	r3, #4
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f2:	4b43      	ldr	r3, [pc, #268]	@ (8000800 <MX_GPIO_Init+0x258>)
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	483b      	ldr	r0, [pc, #236]	@ (80007f0 <MX_GPIO_Init+0x248>)
 8000702:	f002 fdbb 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = sd_card_detect_Pin;
 8000706:	2310      	movs	r3, #16
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070e:	2301      	movs	r3, #1
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(sd_card_detect_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4835      	ldr	r0, [pc, #212]	@ (80007f0 <MX_GPIO_Init+0x248>)
 800071a:	f002 fdaf 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = sd_card_cs_Pin|sd_card_enable_Pin|wifi_boot_Pin;
 800071e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	482f      	ldr	r0, [pc, #188]	@ (80007f4 <MX_GPIO_Init+0x24c>)
 8000738:	f002 fda0 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_6;
 800073c:	f241 0350 	movw	r3, #4176	@ 0x1050
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4828      	ldr	r0, [pc, #160]	@ (80007f8 <MX_GPIO_Init+0x250>)
 8000756:	f002 fd91 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800075a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800076c:	2307      	movs	r3, #7
 800076e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4821      	ldr	r0, [pc, #132]	@ (80007fc <MX_GPIO_Init+0x254>)
 8000778:	f002 fd80 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 800077c:	230b      	movs	r3, #11
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4619      	mov	r1, r3
 8000792:	481a      	ldr	r0, [pc, #104]	@ (80007fc <MX_GPIO_Init+0x254>)
 8000794:	f002 fd72 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000798:	23a0      	movs	r3, #160	@ 0xa0
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <MX_GPIO_Init+0x258>)
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4814      	ldr	r0, [pc, #80]	@ (80007fc <MX_GPIO_Init+0x254>)
 80007ac:	f002 fd66 	bl	800327c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2105      	movs	r1, #5
 80007b4:	200d      	movs	r0, #13
 80007b6:	f001 fe6d 	bl	8002494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007ba:	200d      	movs	r0, #13
 80007bc:	f001 fe84 	bl	80024c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 5, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2105      	movs	r1, #5
 80007c4:	2010      	movs	r0, #16
 80007c6:	f001 fe65 	bl	8002494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80007ca:	2010      	movs	r0, #16
 80007cc:	f001 fe7c 	bl	80024c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 5, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2105      	movs	r1, #5
 80007d4:	2012      	movs	r0, #18
 80007d6:	f001 fe5d 	bl	8002494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 80007da:	2012      	movs	r0, #18
 80007dc:	f001 fe74 	bl	80024c8 <HAL_NVIC_EnableIRQ>

}
 80007e0:	bf00      	nop
 80007e2:	3730      	adds	r7, #48	@ 0x30
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	46020c00 	.word	0x46020c00
 80007ec:	42021c00 	.word	0x42021c00
 80007f0:	42020000 	.word	0x42020000
 80007f4:	42020800 	.word	0x42020800
 80007f8:	42020400 	.word	0x42020400
 80007fc:	42020c00 	.word	0x42020c00
 8000800:	10110000 	.word	0x10110000

08000804 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_I2C1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	@ (800087c <MX_I2C1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000810:	4a1b      	ldr	r2, [pc, #108]	@ (8000880 <MX_I2C1_Init+0x7c>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000814:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_I2C1_Init+0x74>)
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083e:	480e      	ldr	r0, [pc, #56]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000840:	f002 ff48 	bl	80036d4 <HAL_I2C_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800084a:	f000 fb33 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4809      	ldr	r0, [pc, #36]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000852:	f003 fe58 	bl	8004506 <HAL_I2CEx_ConfigAnalogFilter>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800085c:	f000 fb2a 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000864:	f003 fe9a 	bl	800459c <HAL_I2CEx_ConfigDigitalFilter>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800086e:	f000 fb21 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000ec 	.word	0x200000ec
 800087c:	40005400 	.word	0x40005400
 8000880:	00303d5b 	.word	0x00303d5b

08000884 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000888:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_I2C2_Init+0x74>)
 800088a:	4a1c      	ldr	r2, [pc, #112]	@ (80008fc <MX_I2C2_Init+0x78>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800088e:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <MX_I2C2_Init+0x74>)
 8000890:	4a1b      	ldr	r2, [pc, #108]	@ (8000900 <MX_I2C2_Init+0x7c>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000894:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_I2C2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089a:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <MX_I2C2_Init+0x74>)
 800089c:	2201      	movs	r2, #1
 800089e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008be:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008c0:	f002 ff08 	bl	80036d4 <HAL_I2C_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ca:	f000 faf3 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4809      	ldr	r0, [pc, #36]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008d2:	f003 fe18 	bl	8004506 <HAL_I2CEx_ConfigAnalogFilter>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008dc:	f000 faea 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008e4:	f003 fe5a 	bl	800459c <HAL_I2CEx_ConfigDigitalFilter>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f000 fae1 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000170 	.word	0x20000170
 80008fc:	40005800 	.word	0x40005800
 8000900:	00303d5b 	.word	0x00303d5b

08000904 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_I2C3_Init+0x74>)
 800090a:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <MX_I2C3_Init+0x78>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_I2C3_Init+0x74>)
 8000910:	4a1b      	ldr	r2, [pc, #108]	@ (8000980 <MX_I2C3_Init+0x7c>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_I2C3_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_I2C3_Init+0x74>)
 800091c:	2201      	movs	r2, #1
 800091e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_I2C3_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_I2C3_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_I2C3_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_I2C3_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_I2C3_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800093e:	480e      	ldr	r0, [pc, #56]	@ (8000978 <MX_I2C3_Init+0x74>)
 8000940:	f002 fec8 	bl	80036d4 <HAL_I2C_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800094a:	f000 fab3 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <MX_I2C3_Init+0x74>)
 8000952:	f003 fdd8 	bl	8004506 <HAL_I2CEx_ConfigAnalogFilter>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800095c:	f000 faaa 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_I2C3_Init+0x74>)
 8000964:	f003 fe1a 	bl	800459c <HAL_I2CEx_ConfigDigitalFilter>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 faa1 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200001f4 	.word	0x200001f4
 800097c:	46002800 	.word	0x46002800
 8000980:	00303d5b 	.word	0x00303d5b

08000984 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_I2C4_Init+0x74>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <MX_I2C4_Init+0x78>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00303D5B;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_I2C4_Init+0x74>)
 8000990:	4a1b      	ldr	r2, [pc, #108]	@ (8000a00 <MX_I2C4_Init+0x7c>)
 8000992:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_I2C4_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <MX_I2C4_Init+0x74>)
 800099c:	2201      	movs	r2, #1
 800099e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009be:	480e      	ldr	r0, [pc, #56]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009c0:	f002 fe88 	bl	80036d4 <HAL_I2C_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009ca:	f000 fa73 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009d2:	f003 fd98 	bl	8004506 <HAL_I2CEx_ConfigAnalogFilter>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80009dc:	f000 fa6a 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009e4:	f003 fdda 	bl	800459c <HAL_I2CEx_ConfigDigitalFilter>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80009ee:	f000 fa61 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000278 	.word	0x20000278
 80009fc:	40008400 	.word	0x40008400
 8000a00:	00303d5b 	.word	0x00303d5b

08000a04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0c0      	sub	sp, #256	@ 0x100
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a20:	22c0      	movs	r2, #192	@ 0xc0
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f00c fa2b 	bl	800ce80 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4aba      	ldr	r2, [pc, #744]	@ (8000d18 <HAL_I2C_MspInit+0x314>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d157      	bne.n	8000ae4 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a34:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8000a38:	f04f 0300 	mov.w	r3, #0
 8000a3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f005 fa0e 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000a56:	f000 fa2d 	bl	8000eb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4bb0      	ldr	r3, [pc, #704]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a60:	4aae      	ldr	r2, [pc, #696]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a6a:	4bac      	ldr	r3, [pc, #688]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a80:	2312      	movs	r3, #18
 8000a82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a92:	2304      	movs	r3, #4
 8000a94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	48a0      	ldr	r0, [pc, #640]	@ (8000d20 <HAL_I2C_MspInit+0x31c>)
 8000aa0:	f002 fbec 	bl	800327c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa4:	4b9d      	ldr	r3, [pc, #628]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000aaa:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000aac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ab0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ab4:	4b99      	ldr	r3, [pc, #612]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000abe:	623b      	str	r3, [r7, #32]
 8000ac0:	6a3b      	ldr	r3, [r7, #32]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2105      	movs	r1, #5
 8000ac6:	2037      	movs	r0, #55	@ 0x37
 8000ac8:	f001 fce4 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000acc:	2037      	movs	r0, #55	@ 0x37
 8000ace:	f001 fcfb 	bl	80024c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2105      	movs	r1, #5
 8000ad6:	2038      	movs	r0, #56	@ 0x38
 8000ad8:	f001 fcdc 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000adc:	2038      	movs	r0, #56	@ 0x38
 8000ade:	f001 fcf3 	bl	80024c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000ae2:	e114      	b.n	8000d0e <HAL_I2C_MspInit+0x30a>
  else if(i2cHandle->Instance==I2C2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a8e      	ldr	r2, [pc, #568]	@ (8000d24 <HAL_I2C_MspInit+0x320>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d157      	bne.n	8000b9e <HAL_I2C_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000aee:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000af2:	f04f 0300 	mov.w	r3, #0
 8000af6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b04:	4618      	mov	r0, r3
 8000b06:	f005 f9b1 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_I2C_MspInit+0x110>
      Error_Handler();
 8000b10:	f000 f9d0 	bl	8000eb4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b81      	ldr	r3, [pc, #516]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b1a:	4a80      	ldr	r2, [pc, #512]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b24:	4b7d      	ldr	r3, [pc, #500]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000b32:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000b36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3a:	2312      	movs	r3, #18
 8000b3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000b56:	4619      	mov	r1, r3
 8000b58:	4871      	ldr	r0, [pc, #452]	@ (8000d20 <HAL_I2C_MspInit+0x31c>)
 8000b5a:	f002 fb8f 	bl	800327c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b5e:	4b6f      	ldr	r3, [pc, #444]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000b60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b64:	4a6d      	ldr	r2, [pc, #436]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000b66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b6a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b6e:	4b6b      	ldr	r3, [pc, #428]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b78:	61bb      	str	r3, [r7, #24]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2105      	movs	r1, #5
 8000b80:	2039      	movs	r0, #57	@ 0x39
 8000b82:	f001 fc87 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b86:	2039      	movs	r0, #57	@ 0x39
 8000b88:	f001 fc9e 	bl	80024c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2105      	movs	r1, #5
 8000b90:	203a      	movs	r0, #58	@ 0x3a
 8000b92:	f001 fc7f 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000b96:	203a      	movs	r0, #58	@ 0x3a
 8000b98:	f001 fc96 	bl	80024c8 <HAL_NVIC_EnableIRQ>
}
 8000b9c:	e0b7      	b.n	8000d0e <HAL_I2C_MspInit+0x30a>
  else if(i2cHandle->Instance==I2C3)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a61      	ldr	r2, [pc, #388]	@ (8000d28 <HAL_I2C_MspInit+0x324>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d156      	bne.n	8000c56 <HAL_I2C_MspInit+0x252>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000ba8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f005 f954 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_I2C_MspInit+0x1ca>
      Error_Handler();
 8000bca:	f000 f973 	bl	8000eb4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	4b53      	ldr	r3, [pc, #332]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd4:	4a51      	ldr	r2, [pc, #324]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bde:	4b4f      	ldr	r3, [pc, #316]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bec:	2303      	movs	r3, #3
 8000bee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf2:	2312      	movs	r3, #18
 8000bf4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c04:	2304      	movs	r3, #4
 8000c06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4846      	ldr	r0, [pc, #280]	@ (8000d2c <HAL_I2C_MspInit+0x328>)
 8000c12:	f002 fb33 	bl	800327c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c16:	4b41      	ldr	r3, [pc, #260]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000c18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c22:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000c26:	4b3d      	ldr	r3, [pc, #244]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000c28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2105      	movs	r1, #5
 8000c38:	2058      	movs	r0, #88	@ 0x58
 8000c3a:	f001 fc2b 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000c3e:	2058      	movs	r0, #88	@ 0x58
 8000c40:	f001 fc42 	bl	80024c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2105      	movs	r1, #5
 8000c48:	2059      	movs	r0, #89	@ 0x59
 8000c4a:	f001 fc23 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000c4e:	2059      	movs	r0, #89	@ 0x59
 8000c50:	f001 fc3a 	bl	80024c8 <HAL_NVIC_EnableIRQ>
}
 8000c54:	e05b      	b.n	8000d0e <HAL_I2C_MspInit+0x30a>
  else if(i2cHandle->Instance==I2C4)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a35      	ldr	r2, [pc, #212]	@ (8000d30 <HAL_I2C_MspInit+0x32c>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d156      	bne.n	8000d0e <HAL_I2C_MspInit+0x30a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000c60:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c76:	4618      	mov	r0, r3
 8000c78:	f005 f8f8 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_I2C_MspInit+0x282>
      Error_Handler();
 8000c82:	f000 f917 	bl	8000eb4 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c8c:	4a23      	ldr	r2, [pc, #140]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c96:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ca4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ca8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	2312      	movs	r3, #18
 8000cae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000cc8:	4619      	mov	r1, r3
 8000cca:	481a      	ldr	r0, [pc, #104]	@ (8000d34 <HAL_I2C_MspInit+0x330>)
 8000ccc:	f002 fad6 	bl	800327c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000cd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000cd6:	4a11      	ldr	r2, [pc, #68]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <HAL_I2C_MspInit+0x318>)
 8000ce2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2105      	movs	r1, #5
 8000cf2:	2065      	movs	r0, #101	@ 0x65
 8000cf4:	f001 fbce 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8000cf8:	2065      	movs	r0, #101	@ 0x65
 8000cfa:	f001 fbe5 	bl	80024c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2105      	movs	r1, #5
 8000d02:	2064      	movs	r0, #100	@ 0x64
 8000d04:	f001 fbc6 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8000d08:	2064      	movs	r0, #100	@ 0x64
 8000d0a:	f001 fbdd 	bl	80024c8 <HAL_NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40005400 	.word	0x40005400
 8000d1c:	46020c00 	.word	0x46020c00
 8000d20:	42020400 	.word	0x42020400
 8000d24:	40005800 	.word	0x40005800
 8000d28:	46002800 	.word	0x46002800
 8000d2c:	42020800 	.word	0x42020800
 8000d30:	40008400 	.word	0x40008400
 8000d34:	42020c00 	.word	0x42020c00

08000d38 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f003 fc79 	bl	8004634 <HAL_ICACHE_ConfigAssociativityMode>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000d48:	f000 f8b4 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d4c:	f003 fc92 	bl	8004674 <HAL_ICACHE_Enable>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000d56:	f000 f8ad 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d62:	f001 fa8f 	bl	8002284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d66:	f000 f827 	bl	8000db8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000d6a:	f000 f87b 	bl	8000e64 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6e:	f7ff fc1b 	bl	80005a8 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000d72:	f7ff fbf1 	bl	8000558 <MX_GPDMA1_Init>
  MX_I2C3_Init();
 8000d76:	f7ff fdc5 	bl	8000904 <MX_I2C3_Init>
  MX_I2C4_Init();
 8000d7a:	f7ff fe03 	bl	8000984 <MX_I2C4_Init>
  MX_SPI3_Init();
 8000d7e:	f000 fa0b 	bl	8001198 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000d82:	f001 f935 	bl	8001ff0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000d86:	f7ff fd7d 	bl	8000884 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000d8a:	f000 fda1 	bl	80018d0 <MX_TIM1_Init>
  MX_ICACHE_Init();
 8000d8e:	f7ff ffd3 	bl	8000d38 <MX_ICACHE_Init>
  MX_RTC_Init();
 8000d92:	f000 f895 	bl	8000ec0 <MX_RTC_Init>
  MX_I2C1_Init();
 8000d96:	f7ff fd35 	bl	8000804 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000d9a:	f000 fe45 	bl	8001a28 <MX_TIM3_Init>
  MX_SPI1_Init();
 8000d9e:	f000 f98b 	bl	80010b8 <MX_SPI1_Init>
  MX_TIM8_Init();
 8000da2:	f000 feb1 	bl	8001b08 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000da6:	f009 fc69 	bl	800a67c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000daa:	f7ff fa83 	bl	80002b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000dae:	f009 fc8b 	bl	800a6c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000db2:	bf00      	nop
 8000db4:	e7fd      	b.n	8000db2 <main+0x54>
	...

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b09e      	sub	sp, #120	@ 0x78
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	2260      	movs	r2, #96	@ 0x60
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f00c f85a 	bl	800ce80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
 8000dda:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f003 fd29 	bl	8004834 <HAL_PWREx_ControlVoltageScaling>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000de8:	f000 f864 	bl	8000eb4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dec:	f003 fc94 	bl	8004718 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000df0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <SystemClock_Config+0xa8>)
 8000df2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000df6:	4a1a      	ldr	r2, [pc, #104]	@ (8000e60 <SystemClock_Config+0xa8>)
 8000df8:	f023 0318 	bic.w	r3, r3, #24
 8000dfc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000e00:	2306      	movs	r3, #6
 8000e02:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON_RTC_ONLY;
 8000e04:	2301      	movs	r3, #1
 8000e06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0e:	2310      	movs	r3, #16
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e16:	f107 0318 	add.w	r3, r7, #24
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fd96 	bl	800494c <HAL_RCC_OscConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e26:	f000 f845 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2a:	231f      	movs	r3, #31
 8000e2c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	2101      	movs	r1, #1
 8000e46:	4618      	mov	r0, r3
 8000e48:	f004 fc30 	bl	80056ac <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e52:	f000 f82f 	bl	8000eb4 <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3778      	adds	r7, #120	@ 0x78
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	46020c00 	.word	0x46020c00

08000e64 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fc5b 	bl	8004738 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 8000e82:	f003 fcc7 	bl	8004814 <HAL_PWR_EnablePVD>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d101      	bne.n	8000ea6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ea2:	f001 fa1f 	bl	80022e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40014800 	.word	0x40014800

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <Error_Handler+0x8>

08000ec0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	@ 0x38
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000eee:	4b34      	ldr	r3, [pc, #208]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000ef0:	4a34      	ldr	r2, [pc, #208]	@ (8000fc4 <MX_RTC_Init+0x104>)
 8000ef2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ef4:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000efa:	4b31      	ldr	r3, [pc, #196]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000efc:	227f      	movs	r2, #127	@ 0x7f
 8000efe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f00:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000f02:	22ff      	movs	r2, #255	@ 0xff
 8000f04:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f06:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f12:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f18:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000f1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f1e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000f20:	4b27      	ldr	r3, [pc, #156]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000f26:	4b26      	ldr	r3, [pc, #152]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f2c:	4824      	ldr	r0, [pc, #144]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000f2e:	f005 fe65 	bl	8006bfc <HAL_RTC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000f38:	f7ff ffbc 	bl	8000eb4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	481b      	ldr	r0, [pc, #108]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000f54:	f006 fa48 	bl	80073e8 <HAL_RTCEx_PrivilegeModeSet>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000f5e:	f7ff ffa9 	bl	8000eb4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8000f72:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000f76:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480f      	ldr	r0, [pc, #60]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000f82:	f005 ff53 	bl	8006e2c <HAL_RTC_SetTime>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 8000f8c:	f7ff ff92 	bl	8000eb4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f90:	2301      	movs	r3, #1
 8000f92:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f94:	2301      	movs	r3, #1
 8000f96:	717b      	strb	r3, [r7, #5]
  sDate.Date = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	@ (8000fc0 <MX_RTC_Init+0x100>)
 8000fa8:	f005 ffdc 	bl	8006f64 <HAL_RTC_SetDate>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_RTC_Init+0xf6>
  {
    Error_Handler();
 8000fb2:	f7ff ff7f 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3738      	adds	r7, #56	@ 0x38
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002fc 	.word	0x200002fc
 8000fc4:	46007800 	.word	0x46007800

08000fc8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b0b4      	sub	sp, #208	@ 0xd0
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	22c0      	movs	r2, #192	@ 0xc0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f00b ff51 	bl	800ce80 <memset>
  if(rtcHandle->Instance==RTC)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8001058 <HAL_RTC_MspInit+0x90>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d132      	bne.n	800104e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fe8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fec:	f04f 0300 	mov.w	r3, #0
 8000ff0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ff4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4618      	mov	r0, r3
 8001002:	f004 ff33 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800100c:	f7ff ff52 	bl	8000eb4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_RTC_MspInit+0x94>)
 8001012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001016:	4a11      	ldr	r2, [pc, #68]	@ (800105c <HAL_RTC_MspInit+0x94>)
 8001018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800101c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001020:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <HAL_RTC_MspInit+0x94>)
 8001022:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001026:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <HAL_RTC_MspInit+0x94>)
 8001028:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800102c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_RTC_MspInit+0x94>)
 8001032:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001036:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800103e:	4b07      	ldr	r3, [pc, #28]	@ (800105c <HAL_RTC_MspInit+0x94>)
 8001040:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001044:	4a05      	ldr	r2, [pc, #20]	@ (800105c <HAL_RTC_MspInit+0x94>)
 8001046:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800104a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800104e:	bf00      	nop
 8001050:	37d0      	adds	r7, #208	@ 0xd0
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	46007800 	.word	0x46007800
 800105c:	46020c00 	.word	0x46020c00

08001060 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a10      	ldr	r2, [pc, #64]	@ (80010b0 <HAL_RTC_MspDeInit+0x50>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d117      	bne.n	80010a2 <HAL_RTC_MspDeInit+0x42>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <HAL_RTC_MspDeInit+0x54>)
 8001074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001078:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <HAL_RTC_MspDeInit+0x54>)
 800107a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800107e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_DISABLE();
 8001082:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <HAL_RTC_MspDeInit+0x54>)
 8001084:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001088:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <HAL_RTC_MspDeInit+0x54>)
 800108a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800108e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    __HAL_RCC_RTCAPB_CLKAM_DISABLE();
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <HAL_RTC_MspDeInit+0x54>)
 8001094:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001098:	4a06      	ldr	r2, [pc, #24]	@ (80010b4 <HAL_RTC_MspDeInit+0x54>)
 800109a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800109e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	46007800 	.word	0x46007800
 80010b4:	46020c00 	.word	0x46020c00

080010b8 <MX_SPI1_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel1;
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010c8:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <MX_SPI1_Init+0xd8>)
 80010ca:	4a32      	ldr	r2, [pc, #200]	@ (8001194 <MX_SPI1_Init+0xdc>)
 80010cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ce:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <MX_SPI1_Init+0xd8>)
 80010d0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <MX_SPI1_Init+0xd8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <MX_SPI1_Init+0xd8>)
 80010de:	2207      	movs	r2, #7
 80010e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <MX_SPI1_Init+0xd8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e8:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <MX_SPI1_Init+0xd8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ee:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <MX_SPI1_Init+0xd8>)
 80010f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80010f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010f6:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <MX_SPI1_Init+0xd8>)
 80010f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fe:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <MX_SPI1_Init+0xd8>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <MX_SPI1_Init+0xd8>)
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <MX_SPI1_Init+0xd8>)
 800110c:	2200      	movs	r2, #0
 800110e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001110:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <MX_SPI1_Init+0xd8>)
 8001112:	2207      	movs	r2, #7
 8001114:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <MX_SPI1_Init+0xd8>)
 8001118:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800111c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800111e:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <MX_SPI1_Init+0xd8>)
 8001120:	2200      	movs	r2, #0
 8001122:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001124:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MX_SPI1_Init+0xd8>)
 8001126:	2200      	movs	r2, #0
 8001128:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800112a:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <MX_SPI1_Init+0xd8>)
 800112c:	2200      	movs	r2, #0
 800112e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001130:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <MX_SPI1_Init+0xd8>)
 8001132:	2200      	movs	r2, #0
 8001134:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001136:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <MX_SPI1_Init+0xd8>)
 8001138:	2200      	movs	r2, #0
 800113a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <MX_SPI1_Init+0xd8>)
 800113e:	2200      	movs	r2, #0
 8001140:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001142:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <MX_SPI1_Init+0xd8>)
 8001144:	2200      	movs	r2, #0
 8001146:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <MX_SPI1_Init+0xd8>)
 800114a:	2200      	movs	r2, #0
 800114c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <MX_SPI1_Init+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001154:	480e      	ldr	r0, [pc, #56]	@ (8001190 <MX_SPI1_Init+0xd8>)
 8001156:	f006 f975 	bl	8007444 <HAL_SPI_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8001160:	f7ff fea8 	bl	8000eb4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001168:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	@ (8001190 <MX_SPI1_Init+0xd8>)
 8001178:	f006 fdcd 	bl	8007d16 <HAL_SPIEx_SetConfigAutonomousMode>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8001182:	f7ff fe97 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000394 	.word	0x20000394
 8001194:	40013000 	.word	0x40013000

08001198 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80011a8:	4b31      	ldr	r3, [pc, #196]	@ (8001270 <MX_SPI3_Init+0xd8>)
 80011aa:	4a32      	ldr	r2, [pc, #200]	@ (8001274 <MX_SPI3_Init+0xdc>)
 80011ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011ae:	4b30      	ldr	r3, [pc, #192]	@ (8001270 <MX_SPI3_Init+0xd8>)
 80011b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001270 <MX_SPI3_Init+0xd8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001270 <MX_SPI3_Init+0xd8>)
 80011be:	2207      	movs	r2, #7
 80011c0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001270 <MX_SPI3_Init+0xd8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c8:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <MX_SPI3_Init+0xd8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011ce:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <MX_SPI3_Init+0xd8>)
 80011d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011d4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011d6:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <MX_SPI3_Init+0xd8>)
 80011d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011dc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011de:	4b24      	ldr	r3, [pc, #144]	@ (8001270 <MX_SPI3_Init+0xd8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e4:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <MX_SPI3_Init+0xd8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ea:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <MX_SPI3_Init+0xd8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <MX_SPI3_Init+0xd8>)
 80011f2:	2207      	movs	r2, #7
 80011f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <MX_SPI3_Init+0xd8>)
 80011f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <MX_SPI3_Init+0xd8>)
 8001200:	2200      	movs	r2, #0
 8001202:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001204:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <MX_SPI3_Init+0xd8>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800120a:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <MX_SPI3_Init+0xd8>)
 800120c:	2200      	movs	r2, #0
 800120e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001210:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <MX_SPI3_Init+0xd8>)
 8001212:	2200      	movs	r2, #0
 8001214:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001216:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <MX_SPI3_Init+0xd8>)
 8001218:	2200      	movs	r2, #0
 800121a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <MX_SPI3_Init+0xd8>)
 800121e:	2200      	movs	r2, #0
 8001220:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001222:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <MX_SPI3_Init+0xd8>)
 8001224:	2200      	movs	r2, #0
 8001226:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <MX_SPI3_Init+0xd8>)
 800122a:	2200      	movs	r2, #0
 800122c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800122e:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <MX_SPI3_Init+0xd8>)
 8001230:	2200      	movs	r2, #0
 8001232:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001234:	480e      	ldr	r0, [pc, #56]	@ (8001270 <MX_SPI3_Init+0xd8>)
 8001236:	f006 f905 	bl	8007444 <HAL_SPI_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_SPI3_Init+0xac>
  {
    Error_Handler();
 8001240:	f7ff fe38 	bl	8000eb4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 8001248:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800124c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	@ (8001270 <MX_SPI3_Init+0xd8>)
 8001258:	f006 fd5d 	bl	8007d16 <HAL_SPIEx_SetConfigAutonomousMode>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_SPI3_Init+0xce>
  {
    Error_Handler();
 8001262:	f7ff fe27 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000450 	.word	0x20000450
 8001274:	46002000 	.word	0x46002000

08001278 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0bc      	sub	sp, #240	@ 0xf0
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001290:	f107 0318 	add.w	r3, r7, #24
 8001294:	22c0      	movs	r2, #192	@ 0xc0
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f00b fdf1 	bl	800ce80 <memset>
  if(spiHandle->Instance==SPI1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a98      	ldr	r2, [pc, #608]	@ (8001504 <HAL_SPI_MspInit+0x28c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d14f      	bne.n	8001348 <HAL_SPI_MspInit+0xd0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80012b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 fdd3 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80012cc:	f7ff fdf2 	bl	8000eb4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d0:	4b8d      	ldr	r3, [pc, #564]	@ (8001508 <HAL_SPI_MspInit+0x290>)
 80012d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012d6:	4a8c      	ldr	r2, [pc, #560]	@ (8001508 <HAL_SPI_MspInit+0x290>)
 80012d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012dc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80012e0:	4b89      	ldr	r3, [pc, #548]	@ (8001508 <HAL_SPI_MspInit+0x290>)
 80012e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b86      	ldr	r3, [pc, #536]	@ (8001508 <HAL_SPI_MspInit+0x290>)
 80012f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012f4:	4a84      	ldr	r2, [pc, #528]	@ (8001508 <HAL_SPI_MspInit+0x290>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012fe:	4b82      	ldr	r3, [pc, #520]	@ (8001508 <HAL_SPI_MspInit+0x290>)
 8001300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800130c:	23e0      	movs	r3, #224	@ 0xe0
 800130e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001324:	2305      	movs	r3, #5
 8001326:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800132e:	4619      	mov	r1, r3
 8001330:	4876      	ldr	r0, [pc, #472]	@ (800150c <HAL_SPI_MspInit+0x294>)
 8001332:	f001 ffa3 	bl	800327c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2105      	movs	r1, #5
 800133a:	203b      	movs	r0, #59	@ 0x3b
 800133c:	f001 f8aa 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001340:	203b      	movs	r0, #59	@ 0x3b
 8001342:	f001 f8c1 	bl	80024c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001346:	e0d8      	b.n	80014fa <HAL_SPI_MspInit+0x282>
  else if(spiHandle->Instance==SPI3)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a70      	ldr	r2, [pc, #448]	@ (8001510 <HAL_SPI_MspInit+0x298>)
 800134e:	4293      	cmp	r3, r2
 8001350:	f040 80d3 	bne.w	80014fa <HAL_SPI_MspInit+0x282>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001354:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 8001360:	2308      	movs	r3, #8
 8001362:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	4618      	mov	r0, r3
 800136c:	f004 fd7e 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_SPI_MspInit+0x102>
      Error_Handler();
 8001376:	f7ff fd9d 	bl	8000eb4 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800137a:	4b63      	ldr	r3, [pc, #396]	@ (8001508 <HAL_SPI_MspInit+0x290>)
 800137c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001380:	4a61      	ldr	r2, [pc, #388]	@ (8001508 <HAL_SPI_MspInit+0x290>)
 8001382:	f043 0320 	orr.w	r3, r3, #32
 8001386:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800138a:	4b5f      	ldr	r3, [pc, #380]	@ (8001508 <HAL_SPI_MspInit+0x290>)
 800138c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001398:	4b5b      	ldr	r3, [pc, #364]	@ (8001508 <HAL_SPI_MspInit+0x290>)
 800139a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800139e:	4a5a      	ldr	r2, [pc, #360]	@ (8001508 <HAL_SPI_MspInit+0x290>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013a8:	4b57      	ldr	r3, [pc, #348]	@ (8001508 <HAL_SPI_MspInit+0x290>)
 80013aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013b6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80013ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013d0:	2306      	movs	r3, #6
 80013d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013da:	4619      	mov	r1, r3
 80013dc:	484d      	ldr	r0, [pc, #308]	@ (8001514 <HAL_SPI_MspInit+0x29c>)
 80013de:	f001 ff4d 	bl	800327c <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80013e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 80013e4:	4a4d      	ldr	r2, [pc, #308]	@ (800151c <HAL_SPI_MspInit+0x2a4>)
 80013e6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_SPI3_TX;
 80013e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 80013ea:	220b      	movs	r2, #11
 80013ec:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80013ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f4:	4b48      	ldr	r3, [pc, #288]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_FIXED;
 80013fa:	4b47      	ldr	r3, [pc, #284]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 8001400:	4b45      	ldr	r3, [pc, #276]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001406:	4b44      	ldr	r3, [pc, #272]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800140c:	4b42      	ldr	r3, [pc, #264]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001412:	4b41      	ldr	r3, [pc, #260]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8001418:	4b3f      	ldr	r3, [pc, #252]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 800141a:	2201      	movs	r2, #1
 800141c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 800141e:	4b3e      	ldr	r3, [pc, #248]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 8001420:	2201      	movs	r2, #1
 8001422:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001424:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 8001426:	2200      	movs	r2, #0
 8001428:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800142a:	4b3b      	ldr	r3, [pc, #236]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 800142c:	2200      	movs	r2, #0
 800142e:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8001430:	4b39      	ldr	r3, [pc, #228]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 8001432:	2200      	movs	r2, #0
 8001434:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8001436:	4838      	ldr	r0, [pc, #224]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 8001438:	f001 f8ac 	bl	8002594 <HAL_DMA_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 8001442:	f7ff fd37 	bl	8000eb4 <Error_Handler>
    __HAL_LINKDMA(spiHandle, hdmatx, handle_GPDMA1_Channel1);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a33      	ldr	r2, [pc, #204]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 800144a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800144e:	4a32      	ldr	r2, [pc, #200]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001454:	2110      	movs	r1, #16
 8001456:	4830      	ldr	r0, [pc, #192]	@ (8001518 <HAL_SPI_MspInit+0x2a0>)
 8001458:	f001 fb60 	bl	8002b1c <HAL_DMA_ConfigChannelAttributes>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_SPI_MspInit+0x1ee>
      Error_Handler();
 8001462:	f7ff fd27 	bl	8000eb4 <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001466:	4b2e      	ldr	r3, [pc, #184]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 8001468:	4a2e      	ldr	r2, [pc, #184]	@ (8001524 <HAL_SPI_MspInit+0x2ac>)
 800146a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI3_RX;
 800146c:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 800146e:	220a      	movs	r2, #10
 8001470:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001472:	4b2b      	ldr	r3, [pc, #172]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001478:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 800147e:	4b28      	ldr	r3, [pc, #160]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8001484:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800148a:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001490:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001496:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 800149c:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 800149e:	2201      	movs	r2, #1
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80014a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80014ba:	4819      	ldr	r0, [pc, #100]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 80014bc:	f001 f86a 	bl	8002594 <HAL_DMA_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_SPI_MspInit+0x252>
      Error_Handler();
 80014c6:	f7ff fcf5 	bl	8000eb4 <Error_Handler>
    __HAL_LINKDMA(spiHandle, hdmarx, handle_GPDMA1_Channel0);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a14      	ldr	r2, [pc, #80]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 80014ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80014d2:	4a13      	ldr	r2, [pc, #76]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80014d8:	2110      	movs	r1, #16
 80014da:	4811      	ldr	r0, [pc, #68]	@ (8001520 <HAL_SPI_MspInit+0x2a8>)
 80014dc:	f001 fb1e 	bl	8002b1c <HAL_DMA_ConfigChannelAttributes>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_SPI_MspInit+0x272>
      Error_Handler();
 80014e6:	f7ff fce5 	bl	8000eb4 <Error_Handler>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2105      	movs	r1, #5
 80014ee:	2063      	movs	r0, #99	@ 0x63
 80014f0:	f000 ffd0 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80014f4:	2063      	movs	r0, #99	@ 0x63
 80014f6:	f000 ffe7 	bl	80024c8 <HAL_NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	37f0      	adds	r7, #240	@ 0xf0
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40013000 	.word	0x40013000
 8001508:	46020c00 	.word	0x46020c00
 800150c:	42020000 	.word	0x42020000
 8001510:	46002000 	.word	0x46002000
 8001514:	42020800 	.word	0x42020800
 8001518:	2000050c 	.word	0x2000050c
 800151c:	400200d0 	.word	0x400200d0
 8001520:	20000584 	.word	0x20000584
 8001524:	40020050 	.word	0x40020050

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <HAL_MspInit+0x68>)
 8001530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001534:	4a16      	ldr	r2, [pc, #88]	@ (8001590 <HAL_MspInit+0x68>)
 8001536:	f043 0304 	orr.w	r3, r3, #4
 800153a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800153e:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <HAL_MspInit+0x68>)
 8001540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	210f      	movs	r1, #15
 8001550:	f06f 0001 	mvn.w	r0, #1
 8001554:	f000 ff9e 	bl	8002494 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2105      	movs	r1, #5
 800155c:	2006      	movs	r0, #6
 800155e:	f000 ff99 	bl	8002494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001562:	2006      	movs	r0, #6
 8001564:	f000 ffb0 	bl	80024c8 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2105      	movs	r1, #5
 800156c:	2009      	movs	r0, #9
 800156e:	f000 ff91 	bl	8002494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001572:	2009      	movs	r0, #9
 8001574:	f000 ffa8 	bl	80024c8 <HAL_NVIC_EnableIRQ>
  /* ICACHE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ICACHE_IRQn, 5, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2105      	movs	r1, #5
 800157c:	206b      	movs	r0, #107	@ 0x6b
 800157e:	f000 ff89 	bl	8002494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ICACHE_IRQn);
 8001582:	206b      	movs	r0, #107	@ 0x6b
 8001584:	f000 ffa0 	bl	80024c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	46020c00 	.word	0x46020c00

08001594 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08e      	sub	sp, #56	@ 0x38
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80015a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <HAL_InitTick+0xcc>)
 80015a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001660 <HAL_InitTick+0xcc>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80015b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <HAL_InitTick+0xcc>)
 80015b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015c2:	f107 0210 	add.w	r2, r7, #16
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 fb8f 	bl	8005cf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015d2:	f004 fb79 	bl	8005cc8 <HAL_RCC_GetPCLK2Freq>
 80015d6:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015da:	4a22      	ldr	r2, [pc, #136]	@ (8001664 <HAL_InitTick+0xd0>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	0c9b      	lsrs	r3, r3, #18
 80015e2:	3b01      	subs	r3, #1
 80015e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80015e6:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <HAL_InitTick+0xd4>)
 80015e8:	4a20      	ldr	r2, [pc, #128]	@ (800166c <HAL_InitTick+0xd8>)
 80015ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80015ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <HAL_InitTick+0xd4>)
 80015ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015f2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80015f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <HAL_InitTick+0xd4>)
 80015f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80015fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <HAL_InitTick+0xd4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <HAL_InitTick+0xd4>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8001606:	4818      	ldr	r0, [pc, #96]	@ (8001668 <HAL_InitTick+0xd4>)
 8001608:	f006 fbc6 	bl	8007d98 <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001612:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001616:	2b00      	cmp	r3, #0
 8001618:	d118      	bne.n	800164c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800161a:	4813      	ldr	r0, [pc, #76]	@ (8001668 <HAL_InitTick+0xd4>)
 800161c:	f006 fc20 	bl	8007e60 <HAL_TIM_Base_Start_IT>
 8001620:	4603      	mov	r3, r0
 8001622:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001626:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10e      	bne.n	800164c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d808      	bhi.n	8001646 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	2047      	movs	r0, #71	@ 0x47
 800163a:	f000 ff2b 	bl	8002494 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800163e:	4a0c      	ldr	r2, [pc, #48]	@ (8001670 <HAL_InitTick+0xdc>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	e002      	b.n	800164c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800164c:	2047      	movs	r0, #71	@ 0x47
 800164e:	f000 ff3b 	bl	80024c8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001652:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001656:	4618      	mov	r0, r3
 8001658:	3738      	adds	r7, #56	@ 0x38
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	46020c00 	.word	0x46020c00
 8001664:	431bde83 	.word	0x431bde83
 8001668:	200005fc 	.word	0x200005fc
 800166c:	40014800 	.word	0x40014800
 8001670:	20000004 	.word	0x20000004

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <NMI_Handler+0x4>

0800167c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <MemManage_Handler+0x4>

0800168c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <UsageFault_Handler+0x4>

0800169c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash non-secure global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80016ae:	f001 fd01 	bl	80030b4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC non-secure global interrupt.
  */
void RCC_IRQHandler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80016c8:	2004      	movs	r0, #4
 80016ca:	f001 ffc7 	bl	800365c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80016d6:	2020      	movs	r0, #32
 80016d8:	f001 ffc0 	bl	800365c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80016e4:	2080      	movs	r0, #128	@ 0x80
 80016e6:	f001 ffb9 	bl	800365c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <GPDMA1_Channel0_IRQHandler+0x10>)
 80016f6:	f001 f8a2 	bl	800283e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000584 	.word	0x20000584

08001704 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <GPDMA1_Channel1_IRQHandler+0x10>)
 800170a:	f001 f898 	bl	800283e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000050c 	.word	0x2000050c

08001718 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <TIM3_IRQHandler+0x10>)
 800171e:	f006 fca3 	bl	8008068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000794 	.word	0x20000794

0800172c <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 Update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <TIM8_UP_IRQHandler+0x10>)
 8001732:	f006 fc99 	bl	8008068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000860 	.word	0x20000860

08001740 <TIM8_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM8 Trigger and Commutation interrupts.
  */
void TIM8_TRG_COM_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <TIM8_TRG_COM_IRQHandler+0x10>)
 8001746:	f006 fc8f 	bl	8008068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000860 	.word	0x20000860

08001754 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 Capture Compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <TIM8_CC_IRQHandler+0x10>)
 800175a:	f006 fc85 	bl	8008068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000860 	.word	0x20000860

08001768 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800176c:	4802      	ldr	r0, [pc, #8]	@ (8001778 <I2C1_EV_IRQHandler+0x10>)
 800176e:	f002 f889 	bl	8003884 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200000ec 	.word	0x200000ec

0800177c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <I2C1_ER_IRQHandler+0x10>)
 8001782:	f002 f899 	bl	80038b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200000ec 	.word	0x200000ec

08001790 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <I2C2_EV_IRQHandler+0x10>)
 8001796:	f002 f875 	bl	8003884 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000170 	.word	0x20000170

080017a4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <I2C2_ER_IRQHandler+0x10>)
 80017aa:	f002 f885 	bl	80038b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000170 	.word	0x20000170

080017b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <SPI1_IRQHandler+0x10>)
 80017be:	f005 ff99 	bl	80076f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000394 	.word	0x20000394

080017cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <TIM17_IRQHandler+0x10>)
 80017e2:	f006 fc41 	bl	8008068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200005fc 	.word	0x200005fc

080017f0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <I2C3_EV_IRQHandler+0x10>)
 80017f6:	f002 f845 	bl	8003884 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200001f4 	.word	0x200001f4

08001804 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <I2C3_ER_IRQHandler+0x10>)
 800180a:	f002 f855 	bl	80038b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200001f4 	.word	0x200001f4

08001818 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <SPI3_IRQHandler+0x10>)
 800181e:	f005 ff69 	bl	80076f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000450 	.word	0x20000450

0800182c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 Error interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <I2C4_EV_IRQHandler+0x10>)
 8001832:	f002 f827 	bl	8003884 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000278 	.word	0x20000278

08001840 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 Event interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <I2C4_ER_IRQHandler+0x10>)
 8001846:	f002 f837 	bl	80038b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000278 	.word	0x20000278

08001854 <ICACHE_IRQHandler>:

/**
  * @brief This function handles Instruction cache global interrupt.
  */
void ICACHE_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_IRQn 0 */

  /* USER CODE END ICACHE_IRQn 0 */
  HAL_ICACHE_IRQHandler();
 8001858:	f002 ff1c 	bl	8004694 <HAL_ICACHE_IRQHandler>
  /* USER CODE BEGIN ICACHE_IRQn 1 */

  /* USER CODE END ICACHE_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001864:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <SystemInit+0x68>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800186a:	4a17      	ldr	r2, [pc, #92]	@ (80018c8 <SystemInit+0x68>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <SystemInit+0x6c>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <SystemInit+0x6c>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <SystemInit+0x6c>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <SystemInit+0x6c>)
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <SystemInit+0x6c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0e      	ldr	r2, [pc, #56]	@ (80018cc <SystemInit+0x6c>)
 8001892:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001896:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800189a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <SystemInit+0x6c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <SystemInit+0x6c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a09      	ldr	r2, [pc, #36]	@ (80018cc <SystemInit+0x6c>)
 80018a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80018ae:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <SystemInit+0x6c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <SystemInit+0x68>)
 80018b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018ba:	609a      	str	r2, [r3, #8]
  #endif
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00
 80018cc:	46020c00 	.word	0x46020c00

080018d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b098      	sub	sp, #96	@ 0x60
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	615a      	str	r2, [r3, #20]
 80018f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2234      	movs	r2, #52	@ 0x34
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f00b fabf 	bl	800ce80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001902:	4b47      	ldr	r3, [pc, #284]	@ (8001a20 <MX_TIM1_Init+0x150>)
 8001904:	4a47      	ldr	r2, [pc, #284]	@ (8001a24 <MX_TIM1_Init+0x154>)
 8001906:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001908:	4b45      	ldr	r3, [pc, #276]	@ (8001a20 <MX_TIM1_Init+0x150>)
 800190a:	2200      	movs	r2, #0
 800190c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b44      	ldr	r3, [pc, #272]	@ (8001a20 <MX_TIM1_Init+0x150>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001914:	4b42      	ldr	r3, [pc, #264]	@ (8001a20 <MX_TIM1_Init+0x150>)
 8001916:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800191a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191c:	4b40      	ldr	r3, [pc, #256]	@ (8001a20 <MX_TIM1_Init+0x150>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001922:	4b3f      	ldr	r3, [pc, #252]	@ (8001a20 <MX_TIM1_Init+0x150>)
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001928:	4b3d      	ldr	r3, [pc, #244]	@ (8001a20 <MX_TIM1_Init+0x150>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800192e:	483c      	ldr	r0, [pc, #240]	@ (8001a20 <MX_TIM1_Init+0x150>)
 8001930:	f006 fb36 	bl	8007fa0 <HAL_TIM_PWM_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800193a:	f7ff fabb 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800194a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800194e:	4619      	mov	r1, r3
 8001950:	4833      	ldr	r0, [pc, #204]	@ (8001a20 <MX_TIM1_Init+0x150>)
 8001952:	f007 fd61 	bl	8009418 <HAL_TIMEx_MasterConfigSynchronization>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800195c:	f7ff faaa 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001960:	2360      	movs	r3, #96	@ 0x60
 8001962:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001968:	2300      	movs	r3, #0
 800196a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800196c:	2300      	movs	r3, #0
 800196e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800197c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001980:	2204      	movs	r2, #4
 8001982:	4619      	mov	r1, r3
 8001984:	4826      	ldr	r0, [pc, #152]	@ (8001a20 <MX_TIM1_Init+0x150>)
 8001986:	f006 fce9 	bl	800835c <HAL_TIM_PWM_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001990:	f7ff fa90 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001994:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001998:	2208      	movs	r2, #8
 800199a:	4619      	mov	r1, r3
 800199c:	4820      	ldr	r0, [pc, #128]	@ (8001a20 <MX_TIM1_Init+0x150>)
 800199e:	f006 fcdd 	bl	800835c <HAL_TIM_PWM_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80019a8:	f7ff fa84 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019b0:	220c      	movs	r2, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	481a      	ldr	r0, [pc, #104]	@ (8001a20 <MX_TIM1_Init+0x150>)
 80019b6:	f006 fcd1 	bl	800835c <HAL_TIM_PWM_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80019c0:	f7ff fa78 	bl	8000eb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019f4:	2300      	movs	r3, #0
 80019f6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	4619      	mov	r1, r3
 8001a00:	4807      	ldr	r0, [pc, #28]	@ (8001a20 <MX_TIM1_Init+0x150>)
 8001a02:	f007 fdcb 	bl	800959c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001a0c:	f7ff fa52 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a10:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <MX_TIM1_Init+0x150>)
 8001a12:	f000 f945 	bl	8001ca0 <HAL_TIM_MspPostInit>

}
 8001a16:	bf00      	nop
 8001a18:	3760      	adds	r7, #96	@ 0x60
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200006c8 	.word	0x200006c8
 8001a24:	40012c00 	.word	0x40012c00

08001a28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	615a      	str	r2, [r3, #20]
 8001a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b00 <MX_TIM3_Init+0xd8>)
 8001a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b04 <MX_TIM3_Init+0xdc>)
 8001a50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a52:	4b2b      	ldr	r3, [pc, #172]	@ (8001b00 <MX_TIM3_Init+0xd8>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a58:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <MX_TIM3_Init+0xd8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4294967295;
 8001a5e:	4b28      	ldr	r3, [pc, #160]	@ (8001b00 <MX_TIM3_Init+0xd8>)
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a66:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <MX_TIM3_Init+0xd8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b24      	ldr	r3, [pc, #144]	@ (8001b00 <MX_TIM3_Init+0xd8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a72:	4823      	ldr	r0, [pc, #140]	@ (8001b00 <MX_TIM3_Init+0xd8>)
 8001a74:	f006 fa94 	bl	8007fa0 <HAL_TIM_PWM_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a7e:	f7ff fa19 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	481b      	ldr	r0, [pc, #108]	@ (8001b00 <MX_TIM3_Init+0xd8>)
 8001a92:	f007 fcc1 	bl	8009418 <HAL_TIMEx_MasterConfigSynchronization>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a9c:	f7ff fa0a 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa0:	2360      	movs	r3, #96	@ 0x60
 8001aa2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4812      	ldr	r0, [pc, #72]	@ (8001b00 <MX_TIM3_Init+0xd8>)
 8001ab8:	f006 fc50 	bl	800835c <HAL_TIM_PWM_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001ac2:	f7ff f9f7 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2204      	movs	r2, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	480c      	ldr	r0, [pc, #48]	@ (8001b00 <MX_TIM3_Init+0xd8>)
 8001ace:	f006 fc45 	bl	800835c <HAL_TIM_PWM_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001ad8:	f7ff f9ec 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001adc:	463b      	mov	r3, r7
 8001ade:	2208      	movs	r2, #8
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4807      	ldr	r0, [pc, #28]	@ (8001b00 <MX_TIM3_Init+0xd8>)
 8001ae4:	f006 fc3a 	bl	800835c <HAL_TIM_PWM_ConfigChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001aee:	f7ff f9e1 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001af2:	4803      	ldr	r0, [pc, #12]	@ (8001b00 <MX_TIM3_Init+0xd8>)
 8001af4:	f000 f8d4 	bl	8001ca0 <HAL_TIM_MspPostInit>

}
 8001af8:	bf00      	nop
 8001afa:	3728      	adds	r7, #40	@ 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000794 	.word	0x20000794
 8001b04:	40000400 	.word	0x40000400

08001b08 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b26:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <MX_TIM8_Init+0xa0>)
 8001b28:	4a20      	ldr	r2, [pc, #128]	@ (8001bac <MX_TIM8_Init+0xa4>)
 8001b2a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 999;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba8 <MX_TIM8_Init+0xa0>)
 8001b2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b32:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba8 <MX_TIM8_Init+0xa0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 32000;
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <MX_TIM8_Init+0xa0>)
 8001b3c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b40:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b42:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <MX_TIM8_Init+0xa0>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b48:	4b17      	ldr	r3, [pc, #92]	@ (8001ba8 <MX_TIM8_Init+0xa0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <MX_TIM8_Init+0xa0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b54:	4814      	ldr	r0, [pc, #80]	@ (8001ba8 <MX_TIM8_Init+0xa0>)
 8001b56:	f006 f91f 	bl	8007d98 <HAL_TIM_Base_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8001b60:	f7ff f9a8 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480d      	ldr	r0, [pc, #52]	@ (8001ba8 <MX_TIM8_Init+0xa0>)
 8001b72:	f006 fd07 	bl	8008584 <HAL_TIM_ConfigClockSource>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001b7c:	f7ff f99a 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	@ (8001ba8 <MX_TIM8_Init+0xa0>)
 8001b92:	f007 fc41 	bl	8009418 <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001b9c:	f7ff f98a 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000860 	.word	0x20000860
 8001bac:	40013400 	.word	0x40013400

08001bb0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a19      	ldr	r2, [pc, #100]	@ (8001c24 <HAL_TIM_PWM_MspInit+0x74>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10f      	bne.n	8001be2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc2:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_TIM_PWM_MspInit+0x78>)
 8001bc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001bc8:	4a17      	ldr	r2, [pc, #92]	@ (8001c28 <HAL_TIM_PWM_MspInit+0x78>)
 8001bca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bce:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <HAL_TIM_PWM_MspInit+0x78>)
 8001bd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001be0:	e01b      	b.n	8001c1a <HAL_TIM_PWM_MspInit+0x6a>
  else if(tim_pwmHandle->Instance==TIM3)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a11      	ldr	r2, [pc, #68]	@ (8001c2c <HAL_TIM_PWM_MspInit+0x7c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d116      	bne.n	8001c1a <HAL_TIM_PWM_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bec:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_TIM_PWM_MspInit+0x78>)
 8001bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <HAL_TIM_PWM_MspInit+0x78>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <HAL_TIM_PWM_MspInit+0x78>)
 8001bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2105      	movs	r1, #5
 8001c0e:	202e      	movs	r0, #46	@ 0x2e
 8001c10:	f000 fc40 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c14:	202e      	movs	r0, #46	@ 0x2e
 8001c16:	f000 fc57 	bl	80024c8 <HAL_NVIC_EnableIRQ>
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40012c00 	.word	0x40012c00
 8001c28:	46020c00 	.word	0x46020c00
 8001c2c:	40000400 	.word	0x40000400

08001c30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a16      	ldr	r2, [pc, #88]	@ (8001c98 <HAL_TIM_Base_MspInit+0x68>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d126      	bne.n	8001c90 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c42:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <HAL_TIM_Base_MspInit+0x6c>)
 8001c44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c48:	4a14      	ldr	r2, [pc, #80]	@ (8001c9c <HAL_TIM_Base_MspInit+0x6c>)
 8001c4a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c4e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001c52:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <HAL_TIM_Base_MspInit+0x6c>)
 8001c54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 5, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2105      	movs	r1, #5
 8001c64:	2034      	movs	r0, #52	@ 0x34
 8001c66:	f000 fc15 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001c6a:	2034      	movs	r0, #52	@ 0x34
 8001c6c:	f000 fc2c 	bl	80024c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_IRQn, 5, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2105      	movs	r1, #5
 8001c74:	2035      	movs	r0, #53	@ 0x35
 8001c76:	f000 fc0d 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_IRQn);
 8001c7a:	2035      	movs	r0, #53	@ 0x35
 8001c7c:	f000 fc24 	bl	80024c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2105      	movs	r1, #5
 8001c84:	2036      	movs	r0, #54	@ 0x36
 8001c86:	f000 fc05 	bl	8002494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001c8a:	2036      	movs	r0, #54	@ 0x36
 8001c8c:	f000 fc1c 	bl	80024c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40013400 	.word	0x40013400
 8001c9c:	46020c00 	.word	0x46020c00

08001ca0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a25      	ldr	r2, [pc, #148]	@ (8001d54 <HAL_TIM_MspPostInit+0xb4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d120      	bne.n	8001d04 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc2:	4b25      	ldr	r3, [pc, #148]	@ (8001d58 <HAL_TIM_MspPostInit+0xb8>)
 8001cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cc8:	4a23      	ldr	r2, [pc, #140]	@ (8001d58 <HAL_TIM_MspPostInit+0xb8>)
 8001cca:	f043 0310 	orr.w	r3, r3, #16
 8001cce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cd2:	4b21      	ldr	r3, [pc, #132]	@ (8001d58 <HAL_TIM_MspPostInit+0xb8>)
 8001cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001ce0:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4817      	ldr	r0, [pc, #92]	@ (8001d5c <HAL_TIM_MspPostInit+0xbc>)
 8001cfe:	f001 fabd 	bl	800327c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d02:	e023      	b.n	8001d4c <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a15      	ldr	r2, [pc, #84]	@ (8001d60 <HAL_TIM_MspPostInit+0xc0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d11e      	bne.n	8001d4c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d0e:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_TIM_MspPostInit+0xb8>)
 8001d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d14:	4a10      	ldr	r2, [pc, #64]	@ (8001d58 <HAL_TIM_MspPostInit+0xb8>)
 8001d16:	f043 0310 	orr.w	r3, r3, #16
 8001d1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <HAL_TIM_MspPostInit+0xb8>)
 8001d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d2c:	2338      	movs	r3, #56	@ 0x38
 8001d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	4805      	ldr	r0, [pc, #20]	@ (8001d5c <HAL_TIM_MspPostInit+0xbc>)
 8001d48:	f001 fa98 	bl	800327c <HAL_GPIO_Init>
}
 8001d4c:	bf00      	nop
 8001d4e:	3728      	adds	r7, #40	@ 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40012c00 	.word	0x40012c00
 8001d58:	46020c00 	.word	0x46020c00
 8001d5c:	42021000 	.word	0x42021000
 8001d60:	40000400 	.word	0x40000400

08001d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d68:	4b04      	ldr	r3, [pc, #16]	@ (8001d7c <__NVIC_GetPriorityGrouping+0x18>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f003 0307 	and.w	r3, r3, #7
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db0b      	blt.n	8001daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	4907      	ldr	r1, [pc, #28]	@ (8001db8 <__NVIC_EnableIRQ+0x38>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	2001      	movs	r0, #1
 8001da2:	fa00 f202 	lsl.w	r2, r0, r2
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	@ (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	@ (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	@ 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	bf28      	it	cs
 8001e2e:	2304      	movcs	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d902      	bls.n	8001e40 <NVIC_EncodePriority+0x30>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b03      	subs	r3, #3
 8001e3e:	e000      	b.n	8001e42 <NVIC_EncodePriority+0x32>
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	4313      	orrs	r3, r2
         );
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	@ 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f043 0201 	orr.w	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	601a      	str	r2, [r3, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b089      	sub	sp, #36	@ 0x24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	e853 3f00 	ldrex	r3, [r3]
 8001ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	075b      	lsls	r3, r3, #29
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3308      	adds	r3, #8
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	61ba      	str	r2, [r7, #24]
 8001ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ee6:	6979      	ldr	r1, [r7, #20]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	e841 2300 	strex	r3, r2, [r1]
 8001eee:	613b      	str	r3, [r7, #16]
   return(result);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1e4      	bne.n	8001ec0 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	3724      	adds	r7, #36	@ 0x24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	@ 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3308      	adds	r3, #8
 8001f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	e853 3f00 	ldrex	r3, [r3]
 8001f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	065b      	lsls	r3, r3, #25
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3308      	adds	r3, #8
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	61ba      	str	r2, [r7, #24]
 8001f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f34:	6979      	ldr	r1, [r7, #20]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	e841 2300 	strex	r3, r2, [r1]
 8001f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e4      	bne.n	8001f0e <LL_USART_SetRXFIFOThreshold+0xa>
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3724      	adds	r7, #36	@ 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	609a      	str	r2, [r3, #8]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8001f88:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001f8a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001f8e:	4909      	ldr	r1, [pc, #36]	@ (8001fb4 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001f9a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	46020c00 	.word	0x46020c00

08001fb8 <LL_APB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <LL_APB2_GRP1_EnableClock+0x34>)
 8001fc2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8001fc6:	4909      	ldr	r1, [pc, #36]	@ (8001fec <LL_APB2_GRP1_EnableClock+0x34>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <LL_APB2_GRP1_EnableClock+0x34>)
 8001fd2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	46020c00 	.word	0x46020c00

08001ff0 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0be      	sub	sp, #248	@ 0xf8
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001ff6:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f00a ff3e 	bl	800ce80 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
 8002014:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002016:	463b      	mov	r3, r7
 8002018:	22c0      	movs	r2, #192	@ 0xc0
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f00a ff2f 	bl	800ce80 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002022:	f04f 0201 	mov.w	r2, #1
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800202e:	2300      	movs	r3, #0
 8002030:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002032:	463b      	mov	r3, r7
 8002034:	4618      	mov	r0, r3
 8002036:	f003 ff19 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8002040:	f7fe ff38 	bl	8000eb4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002044:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002048:	f7ff ffb6 	bl	8001fb8 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800204c:	2001      	movs	r0, #1
 800204e:	f7ff ff97 	bl	8001f80 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8002052:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002056:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800205a:	2302      	movs	r3, #2
 800205c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002072:	2307      	movs	r3, #7
 8002074:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800207c:	4619      	mov	r1, r3
 800207e:	4823      	ldr	r0, [pc, #140]	@ (800210c <MX_USART1_UART_Init+0x11c>)
 8002080:	f007 fd13 	bl	8009aaa <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8002084:	f7ff fe6e 	bl	8001d64 <__NVIC_GetPriorityGrouping>
 8002088:	4603      	mov	r3, r0
 800208a:	2200      	movs	r2, #0
 800208c:	2105      	movs	r1, #5
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff febe 	bl	8001e10 <NVIC_EncodePriority>
 8002094:	4603      	mov	r3, r0
 8002096:	4619      	mov	r1, r3
 8002098:	203d      	movs	r0, #61	@ 0x3d
 800209a:	f7ff fe8f 	bl	8001dbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800209e:	203d      	movs	r0, #61	@ 0x3d
 80020a0:	f7ff fe6e 	bl	8001d80 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 80020aa:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80020ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80020c4:	230c      	movs	r3, #12
 80020c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART1, &USART_InitStruct);
 80020d6:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80020da:	4619      	mov	r1, r3
 80020dc:	480c      	ldr	r0, [pc, #48]	@ (8002110 <MX_USART1_UART_Init+0x120>)
 80020de:	f008 f9d9 	bl	800a494 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80020e2:	2100      	movs	r1, #0
 80020e4:	480a      	ldr	r0, [pc, #40]	@ (8002110 <MX_USART1_UART_Init+0x120>)
 80020e6:	f7ff fee6 	bl	8001eb6 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80020ea:	2100      	movs	r1, #0
 80020ec:	4808      	ldr	r0, [pc, #32]	@ (8002110 <MX_USART1_UART_Init+0x120>)
 80020ee:	f7ff ff09 	bl	8001f04 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 80020f2:	4807      	ldr	r0, [pc, #28]	@ (8002110 <MX_USART1_UART_Init+0x120>)
 80020f4:	f7ff fecf 	bl	8001e96 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 80020f8:	4805      	ldr	r0, [pc, #20]	@ (8002110 <MX_USART1_UART_Init+0x120>)
 80020fa:	f7ff ff2a 	bl	8001f52 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80020fe:	4804      	ldr	r0, [pc, #16]	@ (8002110 <MX_USART1_UART_Init+0x120>)
 8002100:	f7ff feb9 	bl	8001e76 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	37f8      	adds	r7, #248	@ 0xf8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	42020000 	.word	0x42020000
 8002110:	40013800 	.word	0x40013800

08002114 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002114:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800214c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002118:	f7ff fba2 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800211c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800211e:	e003      	b.n	8002128 <LoopCopyDataInit>

08002120 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002122:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002124:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002126:	3104      	adds	r1, #4

08002128 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002128:	480a      	ldr	r0, [pc, #40]	@ (8002154 <LoopForever+0xa>)
	ldr	r3, =_edata
 800212a:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <LoopForever+0xe>)
	adds	r2, r0, r1
 800212c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800212e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002130:	d3f6      	bcc.n	8002120 <CopyDataInit>
	ldr	r2, =_sbss
 8002132:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002134:	e002      	b.n	800213c <LoopFillZerobss>

08002136 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002136:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002138:	f842 3b04 	str.w	r3, [r2], #4

0800213c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800213c:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <LoopForever+0x16>)
	cmp	r2, r3
 800213e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002140:	d3f9      	bcc.n	8002136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002142:	f00a fefb 	bl	800cf3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002146:	f7fe fe0a 	bl	8000d5e <main>

0800214a <LoopForever>:

LoopForever:
    b LoopForever
 800214a:	e7fe      	b.n	800214a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800214c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002150:	0800d518 	.word	0x0800d518
	ldr	r0, =_sdata
 8002154:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002158:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 800215c:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8002160:	2000a11c 	.word	0x2000a11c

08002164 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002164:	e7fe      	b.n	8002164 <ADC1_IRQHandler>

08002166 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800216e:	f3ef 8310 	mrs	r3, PRIMASK
 8002172:	60bb      	str	r3, [r7, #8]
  return(result);
 8002174:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8002176:	b2db      	uxtb	r3, r3
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800217e:	b672      	cpsid	i
}
 8002180:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002182:	f3bf 8f4f 	dsb	sy
}
 8002186:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002188:	f3bf 8f6f 	isb	sy
}
 800218c:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <stm32_lock_acquire+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002194:	b672      	cpsid	i
}
 8002196:	bf00      	nop
 8002198:	f7fe fe8c 	bl	8000eb4 <Error_Handler>
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	785b      	ldrb	r3, [r3, #1]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d103      	bne.n	80021b0 <stm32_lock_acquire+0x4a>
  {
    lock->flag = flag;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e009      	b.n	80021c4 <stm32_lock_acquire+0x5e>
  }
  else if (lock->counter == UINT8_MAX)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	785b      	ldrb	r3, [r3, #1]
 80021b4:	2bff      	cmp	r3, #255	@ 0xff
 80021b6:	d105      	bne.n	80021c4 <stm32_lock_acquire+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80021bc:	f7fe fe7a 	bl	8000eb4 <Error_Handler>
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <stm32_lock_acquire+0x5a>
  }
  lock->counter++;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	785b      	ldrb	r3, [r3, #1]
 80021c8:	3301      	adds	r3, #1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	705a      	strb	r2, [r3, #1]
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80021e6:	b672      	cpsid	i
}
 80021e8:	bf00      	nop
 80021ea:	f7fe fe63 	bl	8000eb4 <Error_Handler>
 80021ee:	bf00      	nop
 80021f0:	e7fd      	b.n	80021ee <stm32_lock_release+0x16>
  if (lock->counter == 0)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	785b      	ldrb	r3, [r3, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80021fa:	b672      	cpsid	i
}
 80021fc:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80021fe:	f7fe fe59 	bl	8000eb4 <Error_Handler>
 8002202:	bf00      	nop
 8002204:	e7fd      	b.n	8002202 <stm32_lock_release+0x2a>
  }
  lock->counter--;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	785b      	ldrb	r3, [r3, #1]
 800220a:	3b01      	subs	r3, #1
 800220c:	b2da      	uxtb	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <stm32_lock_release+0x4e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <stm32_lock_release+0x4e>
  __ASM volatile ("cpsie i" : : : "memory");
 8002222:	b662      	cpsie	i
}
 8002224:	bf00      	nop
  {
    __enable_irq();
  }
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800223c:	b672      	cpsid	i
}
 800223e:	bf00      	nop
 8002240:	f7fe fe38 	bl	8000eb4 <Error_Handler>
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ff8b 	bl	8002166 <stm32_lock_acquire>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d105      	bne.n	8002272 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002266:	b672      	cpsid	i
}
 8002268:	bf00      	nop
 800226a:	f7fe fe23 	bl	8000eb4 <Error_Handler>
 800226e:	bf00      	nop
 8002270:	e7fd      	b.n	800226e <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ffaf 	bl	80021d8 <stm32_lock_release>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <HAL_Init+0x50>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a11      	ldr	r2, [pc, #68]	@ (80022d4 <HAL_Init+0x50>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002294:	2003      	movs	r0, #3
 8002296:	f000 f8f2 	bl	800247e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800229a:	f003 fbf9 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b0d      	ldr	r3, [pc, #52]	@ (80022d8 <HAL_Init+0x54>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	490c      	ldr	r1, [pc, #48]	@ (80022dc <HAL_Init+0x58>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	4a0b      	ldr	r2, [pc, #44]	@ (80022e0 <HAL_Init+0x5c>)
 80022b2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80022b4:	2004      	movs	r0, #4
 80022b6:	f000 f915 	bl	80024e4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ba:	200f      	movs	r0, #15
 80022bc:	f7ff f96a 	bl	8001594 <HAL_InitTick>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e002      	b.n	80022d0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022ca:	f7ff f92d 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40022000 	.word	0x40022000
 80022d8:	46020c00 	.word	0x46020c00
 80022dc:	0800d408 	.word	0x0800d408
 80022e0:	20000000 	.word	0x20000000

080022e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022e8:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_IncTick+0x20>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_IncTick+0x24>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <HAL_IncTick+0x24>)
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000008 	.word	0x20000008
 8002308:	20000930 	.word	0x20000930

0800230c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return uwTick;
 8002310:	4b03      	ldr	r3, [pc, #12]	@ (8002320 <HAL_GetTick+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000930 	.word	0x20000930

08002324 <__NVIC_SetPriorityGrouping>:
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002334:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002340:	4013      	ands	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800234c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002356:	4a04      	ldr	r2, [pc, #16]	@ (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	60d3      	str	r3, [r2, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_GetPriorityGrouping>:
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002370:	4b04      	ldr	r3, [pc, #16]	@ (8002384 <__NVIC_GetPriorityGrouping+0x18>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0307 	and.w	r3, r3, #7
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_EnableIRQ>:
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	2b00      	cmp	r3, #0
 8002398:	db0b      	blt.n	80023b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	f003 021f 	and.w	r2, r3, #31
 80023a0:	4907      	ldr	r1, [pc, #28]	@ (80023c0 <__NVIC_EnableIRQ+0x38>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	2001      	movs	r0, #1
 80023aa:	fa00 f202 	lsl.w	r2, r0, r2
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000e100 	.word	0xe000e100

080023c4 <__NVIC_SetPriority>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	db0a      	blt.n	80023ee <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	490c      	ldr	r1, [pc, #48]	@ (8002410 <__NVIC_SetPriority+0x4c>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	0112      	lsls	r2, r2, #4
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	440b      	add	r3, r1
 80023e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80023ec:	e00a      	b.n	8002404 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4908      	ldr	r1, [pc, #32]	@ (8002414 <__NVIC_SetPriority+0x50>)
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	3b04      	subs	r3, #4
 80023fc:	0112      	lsls	r2, r2, #4
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	440b      	add	r3, r1
 8002402:	761a      	strb	r2, [r3, #24]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000e100 	.word	0xe000e100
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <NVIC_EncodePriority>:
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	@ 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f1c3 0307 	rsb	r3, r3, #7
 8002432:	2b04      	cmp	r3, #4
 8002434:	bf28      	it	cs
 8002436:	2304      	movcs	r3, #4
 8002438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3304      	adds	r3, #4
 800243e:	2b06      	cmp	r3, #6
 8002440:	d902      	bls.n	8002448 <NVIC_EncodePriority+0x30>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3b03      	subs	r3, #3
 8002446:	e000      	b.n	800244a <NVIC_EncodePriority+0x32>
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	401a      	ands	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002460:	f04f 31ff 	mov.w	r1, #4294967295
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	43d9      	mvns	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	4313      	orrs	r3, r2
}
 8002472:	4618      	mov	r0, r3
 8002474:	3724      	adds	r7, #36	@ 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ff4c 	bl	8002324 <__NVIC_SetPriorityGrouping>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024a2:	f7ff ff63 	bl	800236c <__NVIC_GetPriorityGrouping>
 80024a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	6978      	ldr	r0, [r7, #20]
 80024ae:	f7ff ffb3 	bl	8002418 <NVIC_EncodePriority>
 80024b2:	4602      	mov	r2, r0
 80024b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff82 	bl	80023c4 <__NVIC_SetPriority>
}
 80024c0:	bf00      	nop
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ff56 	bl	8002388 <__NVIC_EnableIRQ>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d844      	bhi.n	800257c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80024f2:	a201      	add	r2, pc, #4	@ (adr r2, 80024f8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80024f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f8:	0800251b 	.word	0x0800251b
 80024fc:	08002539 	.word	0x08002539
 8002500:	0800255b 	.word	0x0800255b
 8002504:	0800257d 	.word	0x0800257d
 8002508:	0800250d 	.word	0x0800250d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800250c:	4b1f      	ldr	r3, [pc, #124]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1e      	ldr	r2, [pc, #120]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	6013      	str	r3, [r2, #0]
      break;
 8002518:	e031      	b.n	800257e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800251a:	4b1c      	ldr	r3, [pc, #112]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1b      	ldr	r2, [pc, #108]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002526:	4b1a      	ldr	r3, [pc, #104]	@ (8002590 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800252c:	4a18      	ldr	r2, [pc, #96]	@ (8002590 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800252e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002532:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002536:	e022      	b.n	800257e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002538:	4b14      	ldr	r3, [pc, #80]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a13      	ldr	r2, [pc, #76]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800253e:	f023 0304 	bic.w	r3, r3, #4
 8002542:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002544:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800254a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800254e:	4a10      	ldr	r2, [pc, #64]	@ (8002590 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002550:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002554:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002558:	e011      	b.n	800257e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800255a:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a0b      	ldr	r2, [pc, #44]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002566:	4b0a      	ldr	r3, [pc, #40]	@ (8002590 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800256c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002570:	4a07      	ldr	r2, [pc, #28]	@ (8002590 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002572:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002576:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800257a:	e000      	b.n	800257e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800257c:	bf00      	nop
  }
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000e010 	.word	0xe000e010
 8002590:	46020c00 	.word	0x46020c00

08002594 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff feb6 	bl	800230c <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0db      	b.n	8002764 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a6e      	ldr	r2, [pc, #440]	@ (800276c <HAL_DMA_Init+0x1d8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	f000 809f 	beq.w	80026f6 <HAL_DMA_Init+0x162>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a6c      	ldr	r2, [pc, #432]	@ (8002770 <HAL_DMA_Init+0x1dc>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	f000 8099 	beq.w	80026f6 <HAL_DMA_Init+0x162>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a6a      	ldr	r2, [pc, #424]	@ (8002774 <HAL_DMA_Init+0x1e0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	f000 8093 	beq.w	80026f6 <HAL_DMA_Init+0x162>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a68      	ldr	r2, [pc, #416]	@ (8002778 <HAL_DMA_Init+0x1e4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	f000 808d 	beq.w	80026f6 <HAL_DMA_Init+0x162>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a66      	ldr	r2, [pc, #408]	@ (800277c <HAL_DMA_Init+0x1e8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	f000 8087 	beq.w	80026f6 <HAL_DMA_Init+0x162>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a64      	ldr	r2, [pc, #400]	@ (8002780 <HAL_DMA_Init+0x1ec>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	f000 8081 	beq.w	80026f6 <HAL_DMA_Init+0x162>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a62      	ldr	r2, [pc, #392]	@ (8002784 <HAL_DMA_Init+0x1f0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d07b      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a61      	ldr	r2, [pc, #388]	@ (8002788 <HAL_DMA_Init+0x1f4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d076      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a5f      	ldr	r2, [pc, #380]	@ (800278c <HAL_DMA_Init+0x1f8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d071      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a5e      	ldr	r2, [pc, #376]	@ (8002790 <HAL_DMA_Init+0x1fc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d06c      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a5c      	ldr	r2, [pc, #368]	@ (8002794 <HAL_DMA_Init+0x200>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d067      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a5b      	ldr	r2, [pc, #364]	@ (8002798 <HAL_DMA_Init+0x204>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d062      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a59      	ldr	r2, [pc, #356]	@ (800279c <HAL_DMA_Init+0x208>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d05d      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a58      	ldr	r2, [pc, #352]	@ (80027a0 <HAL_DMA_Init+0x20c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d058      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a56      	ldr	r2, [pc, #344]	@ (80027a4 <HAL_DMA_Init+0x210>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d053      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a55      	ldr	r2, [pc, #340]	@ (80027a8 <HAL_DMA_Init+0x214>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d04e      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a53      	ldr	r2, [pc, #332]	@ (80027ac <HAL_DMA_Init+0x218>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d049      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a52      	ldr	r2, [pc, #328]	@ (80027b0 <HAL_DMA_Init+0x21c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d044      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a50      	ldr	r2, [pc, #320]	@ (80027b4 <HAL_DMA_Init+0x220>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d03f      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a4f      	ldr	r2, [pc, #316]	@ (80027b8 <HAL_DMA_Init+0x224>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d03a      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a4d      	ldr	r2, [pc, #308]	@ (80027bc <HAL_DMA_Init+0x228>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d035      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a4c      	ldr	r2, [pc, #304]	@ (80027c0 <HAL_DMA_Init+0x22c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d030      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a4a      	ldr	r2, [pc, #296]	@ (80027c4 <HAL_DMA_Init+0x230>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d02b      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a49      	ldr	r2, [pc, #292]	@ (80027c8 <HAL_DMA_Init+0x234>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d026      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a47      	ldr	r2, [pc, #284]	@ (80027cc <HAL_DMA_Init+0x238>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d021      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a46      	ldr	r2, [pc, #280]	@ (80027d0 <HAL_DMA_Init+0x23c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d01c      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a44      	ldr	r2, [pc, #272]	@ (80027d4 <HAL_DMA_Init+0x240>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d017      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a43      	ldr	r2, [pc, #268]	@ (80027d8 <HAL_DMA_Init+0x244>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d012      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a41      	ldr	r2, [pc, #260]	@ (80027dc <HAL_DMA_Init+0x248>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00d      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a40      	ldr	r2, [pc, #256]	@ (80027e0 <HAL_DMA_Init+0x24c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d008      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a3e      	ldr	r2, [pc, #248]	@ (80027e4 <HAL_DMA_Init+0x250>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d003      	beq.n	80026f6 <HAL_DMA_Init+0x162>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a3d      	ldr	r2, [pc, #244]	@ (80027e8 <HAL_DMA_Init+0x254>)
 80026f4:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0206 	orr.w	r2, r2, #6
 8002714:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002716:	e00f      	b.n	8002738 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002718:	f7ff fdf8 	bl	800230c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b05      	cmp	r3, #5
 8002724:	d908      	bls.n	8002738 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2210      	movs	r2, #16
 800272a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2203      	movs	r2, #3
 8002730:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e015      	b.n	8002764 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1e8      	bne.n	8002718 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fa24 	bl	8002b94 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40020050 	.word	0x40020050
 8002770:	50020050 	.word	0x50020050
 8002774:	400200d0 	.word	0x400200d0
 8002778:	500200d0 	.word	0x500200d0
 800277c:	40020150 	.word	0x40020150
 8002780:	50020150 	.word	0x50020150
 8002784:	400201d0 	.word	0x400201d0
 8002788:	500201d0 	.word	0x500201d0
 800278c:	40020250 	.word	0x40020250
 8002790:	50020250 	.word	0x50020250
 8002794:	400202d0 	.word	0x400202d0
 8002798:	500202d0 	.word	0x500202d0
 800279c:	40020350 	.word	0x40020350
 80027a0:	50020350 	.word	0x50020350
 80027a4:	400203d0 	.word	0x400203d0
 80027a8:	500203d0 	.word	0x500203d0
 80027ac:	40020450 	.word	0x40020450
 80027b0:	50020450 	.word	0x50020450
 80027b4:	400204d0 	.word	0x400204d0
 80027b8:	500204d0 	.word	0x500204d0
 80027bc:	40020550 	.word	0x40020550
 80027c0:	50020550 	.word	0x50020550
 80027c4:	400205d0 	.word	0x400205d0
 80027c8:	500205d0 	.word	0x500205d0
 80027cc:	40020650 	.word	0x40020650
 80027d0:	50020650 	.word	0x50020650
 80027d4:	400206d0 	.word	0x400206d0
 80027d8:	500206d0 	.word	0x500206d0
 80027dc:	40020750 	.word	0x40020750
 80027e0:	50020750 	.word	0x50020750
 80027e4:	400207d0 	.word	0x400207d0
 80027e8:	500207d0 	.word	0x500207d0

080027ec <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e019      	b.n	8002832 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d004      	beq.n	8002814 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e00e      	b.n	8002832 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2204      	movs	r2, #4
 8002818:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800284e:	f023 030f 	bic.w	r3, r3, #15
 8002852:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	3b50      	subs	r3, #80	@ 0x50
 800285e:	09db      	lsrs	r3, r3, #7
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2201      	movs	r2, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 813b 	beq.w	8002af4 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d011      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028a2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a8:	f043 0201 	orr.w	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d011      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028d4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	f043 0202 	orr.w	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d011      	beq.n	8002914 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002906:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290c:	f043 0204 	orr.w	r2, r3, #4
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d011      	beq.n	8002946 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002938:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	f043 0208 	orr.w	r2, r3, #8
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00c      	beq.n	800297c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800296a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d04c      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d045      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029a0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d12e      	bne.n	8002a0c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029bc:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0202 	orr.w	r2, r2, #2
 80029cc:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e6:	2201      	movs	r2, #1
 80029e8:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2200      	movs	r2, #0
 80029f0:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d07a      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	4798      	blx	r3
        }

        return;
 8002a0a:	e075      	b.n	8002af8 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2205      	movs	r2, #5
 8002a10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d039      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d032      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d012      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d111      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	731a      	strb	r2, [r3, #12]
 8002a70:	e008      	b.n	8002a84 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002a8c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d025      	beq.n	8002afa <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0202 	orr.w	r2, r2, #2
 8002abc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3
 8002af2:	e002      	b.n	8002afa <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002af4:	bf00      	nop
 8002af6:	e000      	b.n	8002afa <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002af8:	bf00      	nop
    }
  }
}
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002b0e:	b2db      	uxtb	r3, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e02b      	b.n	8002b88 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002b38:	f023 030f 	bic.w	r3, r3, #15
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b46:	3b50      	subs	r3, #80	@ 0x50
 8002b48:	09db      	lsrs	r3, r3, #7
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2201      	movs	r2, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d012      	beq.n	8002b86 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f003 0311 	and.w	r3, r3, #17
 8002b66:	2b11      	cmp	r3, #17
 8002b68:	d106      	bne.n	8002b78 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	e006      	b.n	8002b86 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	401a      	ands	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a53      	ldr	r2, [pc, #332]	@ (8002d20 <DMA_Init+0x18c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	f000 80a0 	beq.w	8002d1a <DMA_Init+0x186>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a51      	ldr	r2, [pc, #324]	@ (8002d24 <DMA_Init+0x190>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	f000 809a 	beq.w	8002d1a <DMA_Init+0x186>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a4f      	ldr	r2, [pc, #316]	@ (8002d28 <DMA_Init+0x194>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	f000 8094 	beq.w	8002d1a <DMA_Init+0x186>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a4d      	ldr	r2, [pc, #308]	@ (8002d2c <DMA_Init+0x198>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	f000 808e 	beq.w	8002d1a <DMA_Init+0x186>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a4b      	ldr	r2, [pc, #300]	@ (8002d30 <DMA_Init+0x19c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	f000 8088 	beq.w	8002d1a <DMA_Init+0x186>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a49      	ldr	r2, [pc, #292]	@ (8002d34 <DMA_Init+0x1a0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	f000 8082 	beq.w	8002d1a <DMA_Init+0x186>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a47      	ldr	r2, [pc, #284]	@ (8002d38 <DMA_Init+0x1a4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d07c      	beq.n	8002d1a <DMA_Init+0x186>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a45      	ldr	r2, [pc, #276]	@ (8002d3c <DMA_Init+0x1a8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d077      	beq.n	8002d1a <DMA_Init+0x186>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a44      	ldr	r2, [pc, #272]	@ (8002d40 <DMA_Init+0x1ac>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d072      	beq.n	8002d1a <DMA_Init+0x186>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a42      	ldr	r2, [pc, #264]	@ (8002d44 <DMA_Init+0x1b0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d06d      	beq.n	8002d1a <DMA_Init+0x186>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a41      	ldr	r2, [pc, #260]	@ (8002d48 <DMA_Init+0x1b4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d068      	beq.n	8002d1a <DMA_Init+0x186>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8002d4c <DMA_Init+0x1b8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d063      	beq.n	8002d1a <DMA_Init+0x186>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3e      	ldr	r2, [pc, #248]	@ (8002d50 <DMA_Init+0x1bc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d05e      	beq.n	8002d1a <DMA_Init+0x186>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a3c      	ldr	r2, [pc, #240]	@ (8002d54 <DMA_Init+0x1c0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d059      	beq.n	8002d1a <DMA_Init+0x186>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d58 <DMA_Init+0x1c4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d054      	beq.n	8002d1a <DMA_Init+0x186>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a39      	ldr	r2, [pc, #228]	@ (8002d5c <DMA_Init+0x1c8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d04f      	beq.n	8002d1a <DMA_Init+0x186>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a38      	ldr	r2, [pc, #224]	@ (8002d60 <DMA_Init+0x1cc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d04a      	beq.n	8002d1a <DMA_Init+0x186>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a36      	ldr	r2, [pc, #216]	@ (8002d64 <DMA_Init+0x1d0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d045      	beq.n	8002d1a <DMA_Init+0x186>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a35      	ldr	r2, [pc, #212]	@ (8002d68 <DMA_Init+0x1d4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d040      	beq.n	8002d1a <DMA_Init+0x186>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a33      	ldr	r2, [pc, #204]	@ (8002d6c <DMA_Init+0x1d8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d03b      	beq.n	8002d1a <DMA_Init+0x186>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a32      	ldr	r2, [pc, #200]	@ (8002d70 <DMA_Init+0x1dc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d036      	beq.n	8002d1a <DMA_Init+0x186>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a30      	ldr	r2, [pc, #192]	@ (8002d74 <DMA_Init+0x1e0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d031      	beq.n	8002d1a <DMA_Init+0x186>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2f      	ldr	r2, [pc, #188]	@ (8002d78 <DMA_Init+0x1e4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d02c      	beq.n	8002d1a <DMA_Init+0x186>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d7c <DMA_Init+0x1e8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d027      	beq.n	8002d1a <DMA_Init+0x186>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2c      	ldr	r2, [pc, #176]	@ (8002d80 <DMA_Init+0x1ec>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d022      	beq.n	8002d1a <DMA_Init+0x186>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2a      	ldr	r2, [pc, #168]	@ (8002d84 <DMA_Init+0x1f0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01d      	beq.n	8002d1a <DMA_Init+0x186>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a29      	ldr	r2, [pc, #164]	@ (8002d88 <DMA_Init+0x1f4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d018      	beq.n	8002d1a <DMA_Init+0x186>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a27      	ldr	r2, [pc, #156]	@ (8002d8c <DMA_Init+0x1f8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <DMA_Init+0x186>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a26      	ldr	r2, [pc, #152]	@ (8002d90 <DMA_Init+0x1fc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00e      	beq.n	8002d1a <DMA_Init+0x186>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a24      	ldr	r2, [pc, #144]	@ (8002d94 <DMA_Init+0x200>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d009      	beq.n	8002d1a <DMA_Init+0x186>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a23      	ldr	r2, [pc, #140]	@ (8002d98 <DMA_Init+0x204>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d004      	beq.n	8002d1a <DMA_Init+0x186>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a21      	ldr	r2, [pc, #132]	@ (8002d9c <DMA_Init+0x208>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d142      	bne.n	8002da0 <DMA_Init+0x20c>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e041      	b.n	8002da2 <DMA_Init+0x20e>
 8002d1e:	bf00      	nop
 8002d20:	40020050 	.word	0x40020050
 8002d24:	50020050 	.word	0x50020050
 8002d28:	400200d0 	.word	0x400200d0
 8002d2c:	500200d0 	.word	0x500200d0
 8002d30:	40020150 	.word	0x40020150
 8002d34:	50020150 	.word	0x50020150
 8002d38:	400201d0 	.word	0x400201d0
 8002d3c:	500201d0 	.word	0x500201d0
 8002d40:	40020250 	.word	0x40020250
 8002d44:	50020250 	.word	0x50020250
 8002d48:	400202d0 	.word	0x400202d0
 8002d4c:	500202d0 	.word	0x500202d0
 8002d50:	40020350 	.word	0x40020350
 8002d54:	50020350 	.word	0x50020350
 8002d58:	400203d0 	.word	0x400203d0
 8002d5c:	500203d0 	.word	0x500203d0
 8002d60:	40020450 	.word	0x40020450
 8002d64:	50020450 	.word	0x50020450
 8002d68:	400204d0 	.word	0x400204d0
 8002d6c:	500204d0 	.word	0x500204d0
 8002d70:	40020550 	.word	0x40020550
 8002d74:	50020550 	.word	0x50020550
 8002d78:	400205d0 	.word	0x400205d0
 8002d7c:	500205d0 	.word	0x500205d0
 8002d80:	40020650 	.word	0x40020650
 8002d84:	50020650 	.word	0x50020650
 8002d88:	400206d0 	.word	0x400206d0
 8002d8c:	500206d0 	.word	0x500206d0
 8002d90:	40020750 	.word	0x40020750
 8002d94:	50020750 	.word	0x50020750
 8002d98:	400207d0 	.word	0x400207d0
 8002d9c:	500207d0 	.word	0x500207d0
 8002da0:	2300      	movs	r3, #0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d012      	beq.n	8002dcc <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dae:	3b01      	subs	r3, #1
 8002db0:	051b      	lsls	r3, r3, #20
 8002db2:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002db6:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002dc4:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dfe:	f040 80b0 	bne.w	8002f62 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a82      	ldr	r2, [pc, #520]	@ (8003010 <DMA_Init+0x47c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	f000 80a0 	beq.w	8002f4e <DMA_Init+0x3ba>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a80      	ldr	r2, [pc, #512]	@ (8003014 <DMA_Init+0x480>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	f000 809a 	beq.w	8002f4e <DMA_Init+0x3ba>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003018 <DMA_Init+0x484>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	f000 8094 	beq.w	8002f4e <DMA_Init+0x3ba>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a7c      	ldr	r2, [pc, #496]	@ (800301c <DMA_Init+0x488>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	f000 808e 	beq.w	8002f4e <DMA_Init+0x3ba>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a7a      	ldr	r2, [pc, #488]	@ (8003020 <DMA_Init+0x48c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	f000 8088 	beq.w	8002f4e <DMA_Init+0x3ba>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a78      	ldr	r2, [pc, #480]	@ (8003024 <DMA_Init+0x490>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	f000 8082 	beq.w	8002f4e <DMA_Init+0x3ba>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a76      	ldr	r2, [pc, #472]	@ (8003028 <DMA_Init+0x494>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d07c      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a74      	ldr	r2, [pc, #464]	@ (800302c <DMA_Init+0x498>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d077      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a73      	ldr	r2, [pc, #460]	@ (8003030 <DMA_Init+0x49c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d072      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a71      	ldr	r2, [pc, #452]	@ (8003034 <DMA_Init+0x4a0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d06d      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a70      	ldr	r2, [pc, #448]	@ (8003038 <DMA_Init+0x4a4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d068      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a6e      	ldr	r2, [pc, #440]	@ (800303c <DMA_Init+0x4a8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d063      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a6d      	ldr	r2, [pc, #436]	@ (8003040 <DMA_Init+0x4ac>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d05e      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a6b      	ldr	r2, [pc, #428]	@ (8003044 <DMA_Init+0x4b0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d059      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a6a      	ldr	r2, [pc, #424]	@ (8003048 <DMA_Init+0x4b4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d054      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a68      	ldr	r2, [pc, #416]	@ (800304c <DMA_Init+0x4b8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d04f      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a67      	ldr	r2, [pc, #412]	@ (8003050 <DMA_Init+0x4bc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d04a      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a65      	ldr	r2, [pc, #404]	@ (8003054 <DMA_Init+0x4c0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d045      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a64      	ldr	r2, [pc, #400]	@ (8003058 <DMA_Init+0x4c4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d040      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a62      	ldr	r2, [pc, #392]	@ (800305c <DMA_Init+0x4c8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d03b      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a61      	ldr	r2, [pc, #388]	@ (8003060 <DMA_Init+0x4cc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d036      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a5f      	ldr	r2, [pc, #380]	@ (8003064 <DMA_Init+0x4d0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d031      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a5e      	ldr	r2, [pc, #376]	@ (8003068 <DMA_Init+0x4d4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d02c      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a5c      	ldr	r2, [pc, #368]	@ (800306c <DMA_Init+0x4d8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d027      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a5b      	ldr	r2, [pc, #364]	@ (8003070 <DMA_Init+0x4dc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d022      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a59      	ldr	r2, [pc, #356]	@ (8003074 <DMA_Init+0x4e0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01d      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a58      	ldr	r2, [pc, #352]	@ (8003078 <DMA_Init+0x4e4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d018      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a56      	ldr	r2, [pc, #344]	@ (800307c <DMA_Init+0x4e8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a55      	ldr	r2, [pc, #340]	@ (8003080 <DMA_Init+0x4ec>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00e      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a53      	ldr	r2, [pc, #332]	@ (8003084 <DMA_Init+0x4f0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d009      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a52      	ldr	r2, [pc, #328]	@ (8003088 <DMA_Init+0x4f4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d004      	beq.n	8002f4e <DMA_Init+0x3ba>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a50      	ldr	r2, [pc, #320]	@ (800308c <DMA_Init+0x4f8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <DMA_Init+0x3be>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <DMA_Init+0x3c0>
 8002f52:	2300      	movs	r3, #0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00d      	beq.n	8002f74 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e008      	b.n	8002f74 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f6a:	d103      	bne.n	8002f74 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f72:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f7a:	4b45      	ldr	r3, [pc, #276]	@ (8003090 <DMA_Init+0x4fc>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	68f9      	ldr	r1, [r7, #12]
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a36      	ldr	r2, [pc, #216]	@ (8003070 <DMA_Init+0x4dc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d022      	beq.n	8002fe0 <DMA_Init+0x44c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a35      	ldr	r2, [pc, #212]	@ (8003074 <DMA_Init+0x4e0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d01d      	beq.n	8002fe0 <DMA_Init+0x44c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a33      	ldr	r2, [pc, #204]	@ (8003078 <DMA_Init+0x4e4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d018      	beq.n	8002fe0 <DMA_Init+0x44c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a32      	ldr	r2, [pc, #200]	@ (800307c <DMA_Init+0x4e8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d013      	beq.n	8002fe0 <DMA_Init+0x44c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a30      	ldr	r2, [pc, #192]	@ (8003080 <DMA_Init+0x4ec>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00e      	beq.n	8002fe0 <DMA_Init+0x44c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8003084 <DMA_Init+0x4f0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <DMA_Init+0x44c>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003088 <DMA_Init+0x4f4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <DMA_Init+0x44c>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a2c      	ldr	r2, [pc, #176]	@ (800308c <DMA_Init+0x4f8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <DMA_Init+0x450>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <DMA_Init+0x452>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40020050 	.word	0x40020050
 8003014:	50020050 	.word	0x50020050
 8003018:	400200d0 	.word	0x400200d0
 800301c:	500200d0 	.word	0x500200d0
 8003020:	40020150 	.word	0x40020150
 8003024:	50020150 	.word	0x50020150
 8003028:	400201d0 	.word	0x400201d0
 800302c:	500201d0 	.word	0x500201d0
 8003030:	40020250 	.word	0x40020250
 8003034:	50020250 	.word	0x50020250
 8003038:	400202d0 	.word	0x400202d0
 800303c:	500202d0 	.word	0x500202d0
 8003040:	40020350 	.word	0x40020350
 8003044:	50020350 	.word	0x50020350
 8003048:	400203d0 	.word	0x400203d0
 800304c:	500203d0 	.word	0x500203d0
 8003050:	40020450 	.word	0x40020450
 8003054:	50020450 	.word	0x50020450
 8003058:	400204d0 	.word	0x400204d0
 800305c:	500204d0 	.word	0x500204d0
 8003060:	40020550 	.word	0x40020550
 8003064:	50020550 	.word	0x50020550
 8003068:	400205d0 	.word	0x400205d0
 800306c:	500205d0 	.word	0x500205d0
 8003070:	40020650 	.word	0x40020650
 8003074:	50020650 	.word	0x50020650
 8003078:	400206d0 	.word	0x400206d0
 800307c:	500206d0 	.word	0x500206d0
 8003080:	40020750 	.word	0x40020750
 8003084:	50020750 	.word	0x50020750
 8003088:	400207d0 	.word	0x400207d0
 800308c:	500207d0 	.word	0x500207d0
 8003090:	3cc03180 	.word	0x3cc03180

08003094 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	0c1b      	lsrs	r3, r3, #16
 80030a4:	b2db      	uxtb	r3, r3
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_FLASH_IRQHandler>:
/**
  * @brief  Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
  uint32_t param = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  uint32_t error;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_sr;

  /* Access to CR and SR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80030be:	4b4a      	ldr	r3, [pc, #296]	@ (80031e8 <HAL_FLASH_IRQHandler+0x134>)
 80030c0:	60bb      	str	r3, [r7, #8]
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 80030c2:	4b4a      	ldr	r3, [pc, #296]	@ (80031ec <HAL_FLASH_IRQHandler+0x138>)
 80030c4:	607b      	str	r3, [r7, #4]

  /* Save Flash errors */
  error = (*reg_sr) & FLASH_FLAG_SR_ERRORS;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	f242 03fa 	movw	r3, #8442	@ 0x20fa
 80030ce:	4013      	ands	r3, r2
 80030d0:	603b      	str	r3, [r7, #0]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */

  /* Set parameter of the callback */
  if ((pFlash.ProcedureOnGoing & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_PAGES)
 80030d2:	4b47      	ldr	r3, [pc, #284]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d103      	bne.n	80030e6 <HAL_FLASH_IRQHandler+0x32>
  {
    param = pFlash.Page;
 80030de:	4b44      	ldr	r3, [pc, #272]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	e020      	b.n	8003128 <HAL_FLASH_IRQHandler+0x74>
  }
  else if ((pFlash.ProcedureOnGoing & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 80030e6:	4b42      	ldr	r3, [pc, #264]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030ee:	f248 0204 	movw	r2, #32772	@ 0x8004
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d103      	bne.n	80030fe <HAL_FLASH_IRQHandler+0x4a>
  {
    param = pFlash.Bank;
 80030f6:	4b3e      	ldr	r3, [pc, #248]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e014      	b.n	8003128 <HAL_FLASH_IRQHandler+0x74>
  }
  else if ((pFlash.ProcedureOnGoing & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 80030fe:	4b3c      	ldr	r3, [pc, #240]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003106:	2b01      	cmp	r3, #1
 8003108:	d103      	bne.n	8003112 <HAL_FLASH_IRQHandler+0x5e>
  {
    param = pFlash.Address;
 800310a:	4b39      	ldr	r3, [pc, #228]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e00a      	b.n	8003128 <HAL_FLASH_IRQHandler+0x74>
  }
  else if ((pFlash.ProcedureOnGoing & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_BURST)
 8003112:	4b37      	ldr	r3, [pc, #220]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800311a:	f244 0201 	movw	r2, #16385	@ 0x4001
 800311e:	4293      	cmp	r3, r2
 8003120:	d102      	bne.n	8003128 <HAL_FLASH_IRQHandler+0x74>
  {
    param = pFlash.Address;
 8003122:	4b33      	ldr	r3, [pc, #204]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	60fb      	str	r3, [r7, #12]
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }

  /* Clear operation bit on the on-going procedure */
  CLEAR_BIT((*reg_cr), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b30      	ldr	r3, [pc, #192]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003134:	43db      	mvns	r3, r3
 8003136:	401a      	ands	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	601a      	str	r2, [r3, #0]

  /* Check FLASH operation error flags */
  if (error != 0U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00e      	beq.n	8003160 <HAL_FLASH_IRQHandler+0xac>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8003142:	4b2b      	ldr	r3, [pc, #172]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	4a29      	ldr	r2, [pc, #164]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 800314c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	601a      	str	r2, [r3, #0]
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = 0U;
 8003154:	4b26      	ldr	r3, [pc, #152]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(param);
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f854 	bl	8003208 <HAL_FLASH_OperationErrorCallback>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d02c      	beq.n	80031c6 <HAL_FLASH_IRQHandler+0x112>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	601a      	str	r2, [r3, #0]

    if ((pFlash.ProcedureOnGoing & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_PAGES)
 8003172:	4b1f      	ldr	r3, [pc, #124]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800317a:	2b02      	cmp	r3, #2
 800317c:	d11d      	bne.n	80031ba <HAL_FLASH_IRQHandler+0x106>
    {
      /* Nb of pages to erase can be decreased */
      pFlash.NbPagesToErase--;
 800317e:	4b1c      	ldr	r3, [pc, #112]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	3b01      	subs	r3, #1
 8003184:	4a1a      	ldr	r2, [pc, #104]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 8003186:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase */
      if (pFlash.NbPagesToErase != 0U)
 8003188:	4b19      	ldr	r3, [pc, #100]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00d      	beq.n	80031ac <HAL_FLASH_IRQHandler+0xf8>
      {
        /* Increment page number */
        pFlash.Page++;
 8003190:	4b17      	ldr	r3, [pc, #92]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	3301      	adds	r3, #1
 8003196:	4a16      	ldr	r2, [pc, #88]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 8003198:	6153      	str	r3, [r2, #20]
        FLASH_PageErase(pFlash.Page, pFlash.Bank);
 800319a:	4b15      	ldr	r3, [pc, #84]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4a14      	ldr	r2, [pc, #80]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 80031a0:	6912      	ldr	r2, [r2, #16]
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 f839 	bl	800321c <FLASH_PageErase>
 80031aa:	e009      	b.n	80031c0 <HAL_FLASH_IRQHandler+0x10c>
      }
      else
      {
        /* No more pages to Erase */
        pFlash.ProcedureOnGoing = 0U;
 80031ac:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	609a      	str	r2, [r3, #8]
        param = 0xFFFFFFFFU;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	e002      	b.n	80031c0 <HAL_FLASH_IRQHandler+0x10c>
      }
    }
    else
    {
      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = 0U;
 80031ba:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
    }

    /* FLASH EOP interrupt user callback */
    HAL_FLASH_EndOfOperationCallback(param);
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f817 	bl	80031f4 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == 0U)
 80031c6:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d108      	bne.n	80031e0 <HAL_FLASH_IRQHandler+0x12c>
  {
    /* Disable End of Operation and Error interrupts */
    (*reg_cr) &= ~(FLASH_IT_EOP | FLASH_IT_OPERR);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80031da:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <HAL_FLASH_IRQHandler+0x13c>)
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
  }
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40022028 	.word	0x40022028
 80031ec:	40022020 	.word	0x40022020
 80031f0:	2000000c 	.word	0x2000000c

080031f4 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003226:	4b14      	ldr	r3, [pc, #80]	@ (8003278 <FLASH_PageErase+0x5c>)
 8003228:	60fb      	str	r3, [r7, #12]

  if ((Banks & FLASH_BANK_1) != 0U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d006      	beq.n	8003242 <FLASH_PageErase+0x26>
  {
    CLEAR_BIT((*reg_cr), FLASH_NSCR_BKER);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e005      	b.n	800324e <FLASH_PageErase+0x32>
  }
  else
  {
    SET_BIT((*reg_cr), FLASH_NSCR_BKER);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	601a      	str	r2, [r3, #0]
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg_cr), (FLASH_NSCR_PNB | FLASH_NSCR_PER | FLASH_NSCR_STRT), \
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f423 3381 	bic.w	r3, r3, #66048	@ 0x10200
 8003256:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	00d2      	lsls	r2, r2, #3
 800325e:	4313      	orrs	r3, r2
 8003260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	6013      	str	r3, [r2, #0]
             ((Page << FLASH_NSCR_PNB_Pos) | FLASH_NSCR_PER | FLASH_NSCR_STRT));
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40022028 	.word	0x40022028

0800327c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	@ 0x24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800328e:	e1ba      	b.n	8003606 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	2101      	movs	r1, #1
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	4013      	ands	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 81aa 	beq.w	8003600 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a55      	ldr	r2, [pc, #340]	@ (8003404 <HAL_GPIO_Init+0x188>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d15d      	bne.n	8003370 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80032ba:	2201      	movs	r2, #1
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 0201 	and.w	r2, r3, #1
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80032e4:	4a48      	ldr	r2, [pc, #288]	@ (8003408 <HAL_GPIO_Init+0x18c>)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032ec:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80032ee:	4a46      	ldr	r2, [pc, #280]	@ (8003408 <HAL_GPIO_Init+0x18c>)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	08da      	lsrs	r2, r3, #3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	3208      	adds	r2, #8
 8003302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003306:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	220f      	movs	r2, #15
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	4013      	ands	r3, r2
 800331c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	220b      	movs	r2, #11
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	4313      	orrs	r3, r2
 8003330:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	08da      	lsrs	r2, r3, #3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	3208      	adds	r2, #8
 800333a:	69f9      	ldr	r1, [r7, #28]
 800333c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	2203      	movs	r2, #3
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	4013      	ands	r3, r2
 8003356:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	2202      	movs	r2, #2
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	4313      	orrs	r3, r2
 8003366:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e067      	b.n	8003440 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x104>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b12      	cmp	r3, #18
 800337e:	d145      	bne.n	800340c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	08da      	lsrs	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3208      	adds	r2, #8
 8003388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	220f      	movs	r2, #15
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	08da      	lsrs	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3208      	adds	r2, #8
 80033c6:	69f9      	ldr	r1, [r7, #28]
 80033c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	2203      	movs	r2, #3
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0203 	and.w	r2, r3, #3
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	e01e      	b.n	8003440 <HAL_GPIO_Init+0x1c4>
 8003402:	bf00      	nop
 8003404:	46020000 	.word	0x46020000
 8003408:	0800d460 	.word	0x0800d460
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	4013      	ands	r3, r2
 8003422:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0203 	and.w	r2, r3, #3
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	4313      	orrs	r3, r2
 8003438:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d00b      	beq.n	8003460 <HAL_GPIO_Init+0x1e4>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d007      	beq.n	8003460 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003454:	2b11      	cmp	r3, #17
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b12      	cmp	r3, #18
 800345e:	d130      	bne.n	80034c2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	2203      	movs	r2, #3
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	4013      	ands	r3, r2
 8003476:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	4313      	orrs	r3, r2
 8003488:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003496:	2201      	movs	r2, #1
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f003 0201 	and.w	r2, r3, #1
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d017      	beq.n	80034fa <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	2203      	movs	r2, #3
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	4013      	ands	r3, r2
 80034e0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d07c      	beq.n	8003600 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003506:	4a47      	ldr	r2, [pc, #284]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	089b      	lsrs	r3, r3, #2
 800350c:	3318      	adds	r3, #24
 800350e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003512:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	220f      	movs	r2, #15
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	4013      	ands	r3, r2
 8003528:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	0a9a      	lsrs	r2, r3, #10
 800352e:	4b3e      	ldr	r3, [pc, #248]	@ (8003628 <HAL_GPIO_Init+0x3ac>)
 8003530:	4013      	ands	r3, r2
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	f002 0203 	and.w	r2, r2, #3
 8003538:	00d2      	lsls	r2, r2, #3
 800353a:	4093      	lsls	r3, r2
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	4313      	orrs	r3, r2
 8003540:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003542:	4938      	ldr	r1, [pc, #224]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	3318      	adds	r3, #24
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003550:	4b34      	ldr	r3, [pc, #208]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43db      	mvns	r3, r3
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	4013      	ands	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003574:	4a2b      	ldr	r2, [pc, #172]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800357a:	4b2a      	ldr	r3, [pc, #168]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	43db      	mvns	r3, r3
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	4013      	ands	r3, r2
 8003588:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800359e:	4a21      	ldr	r2, [pc, #132]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80035a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 80035a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80035ca:	4a16      	ldr	r2, [pc, #88]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80035d2:	4b14      	ldr	r3, [pc, #80]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 80035d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	43db      	mvns	r3, r3
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80035f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <HAL_GPIO_Init+0x3a8>)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3301      	adds	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	f47f ae3d 	bne.w	8003290 <HAL_GPIO_Init+0x14>
  }
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	3724      	adds	r7, #36	@ 0x24
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	46022000 	.word	0x46022000
 8003628:	002f7f7f 	.word	0x002f7f7f

0800362c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
 8003638:	4613      	mov	r3, r2
 800363a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800363c:	787b      	ldrb	r3, [r7, #1]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003648:	e002      	b.n	8003650 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003666:	4b0f      	ldr	r3, [pc, #60]	@ (80036a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d006      	beq.n	8003680 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003672:	4a0c      	ldr	r2, [pc, #48]	@ (80036a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f814 	bl	80036a8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003680:	4b08      	ldr	r3, [pc, #32]	@ (80036a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d006      	beq.n	800369a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800368c:	4a05      	ldr	r2, [pc, #20]	@ (80036a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f812 	bl	80036be <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	46022000 	.word	0x46022000

080036a8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0b3      	b.n	800384e <HAL_I2C_Init+0x17a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d12c      	bne.n	800374c <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a56      	ldr	r2, [pc, #344]	@ (8003858 <HAL_I2C_Init+0x184>)
 80036fe:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a56      	ldr	r2, [pc, #344]	@ (800385c <HAL_I2C_Init+0x188>)
 8003704:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a55      	ldr	r2, [pc, #340]	@ (8003860 <HAL_I2C_Init+0x18c>)
 800370a:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a55      	ldr	r2, [pc, #340]	@ (8003864 <HAL_I2C_Init+0x190>)
 8003710:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a54      	ldr	r2, [pc, #336]	@ (8003868 <HAL_I2C_Init+0x194>)
 8003716:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a54      	ldr	r2, [pc, #336]	@ (800386c <HAL_I2C_Init+0x198>)
 800371c:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a53      	ldr	r2, [pc, #332]	@ (8003870 <HAL_I2C_Init+0x19c>)
 8003722:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a53      	ldr	r2, [pc, #332]	@ (8003874 <HAL_I2C_Init+0x1a0>)
 8003728:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a52      	ldr	r2, [pc, #328]	@ (8003878 <HAL_I2C_Init+0x1a4>)
 800372e:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a52      	ldr	r2, [pc, #328]	@ (800387c <HAL_I2C_Init+0x1a8>)
 8003734:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a4f      	ldr	r2, [pc, #316]	@ (8003880 <HAL_I2C_Init+0x1ac>)
 8003742:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	@ 0x24
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003770:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003780:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d107      	bne.n	800379a <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	e006      	b.n	80037a8 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80037a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d108      	bne.n	80037c2 <HAL_I2C_Init+0xee>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	e007      	b.n	80037d2 <HAL_I2C_Init+0xfe>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69d9      	ldr	r1, [r3, #28]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1a      	ldr	r2, [r3, #32]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	0800396f 	.word	0x0800396f
 800385c:	08003983 	.word	0x08003983
 8003860:	08003997 	.word	0x08003997
 8003864:	080039ab 	.word	0x080039ab
 8003868:	080039db 	.word	0x080039db
 800386c:	080039ef 	.word	0x080039ef
 8003870:	08003a03 	.word	0x08003a03
 8003874:	08003a17 	.word	0x08003a17
 8003878:	08003a2b 	.word	0x08003a2b
 800387c:	080039bf 	.word	0x080039bf
 8003880:	08000a05 	.word	0x08000a05

08003884 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	68f9      	ldr	r1, [r7, #12]
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
  }
}
 80038b0:	bf00      	nop
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00f      	beq.n	80038fa <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e8:	f043 0201 	orr.w	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038f8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00f      	beq.n	8003924 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	f043 0208 	orr.w	r2, r3, #8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003922:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00f      	beq.n	800394e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393c:	f043 0202 	orr.w	r2, r3, #2
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800394c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003952:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 030b 	and.w	r3, r3, #11
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fc17 	bl	8004194 <I2C_ITError>
  }
}
 8003966:	bf00      	nop
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	70fb      	strb	r3, [r7, #3]
 80039ca:	4613      	mov	r3, r2
 80039cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <I2C_Slave_ISR_IT+0x24>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e0e2      	b.n	8003c28 <I2C_Slave_ISR_IT+0x1ea>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d009      	beq.n	8003a88 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003a7e:	6939      	ldr	r1, [r7, #16]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f9b7 	bl	8003df4 <I2C_ITSlaveCplt>
 8003a86:	e0ca      	b.n	8003c1e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d04b      	beq.n	8003b2a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d046      	beq.n	8003b2a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d128      	bne.n	8003af8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b28      	cmp	r3, #40	@ 0x28
 8003ab0:	d108      	bne.n	8003ac4 <I2C_Slave_ISR_IT+0x86>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ab8:	d104      	bne.n	8003ac4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003aba:	6939      	ldr	r1, [r7, #16]
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fb13 	bl	80040e8 <I2C_ITListenCplt>
 8003ac2:	e031      	b.n	8003b28 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b29      	cmp	r3, #41	@ 0x29
 8003ace:	d10e      	bne.n	8003aee <I2C_Slave_ISR_IT+0xb0>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ad6:	d00a      	beq.n	8003aee <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2210      	movs	r2, #16
 8003ade:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fc70 	bl	80043c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f926 	bl	8003d38 <I2C_ITSlaveSeqCplt>
 8003aec:	e01c      	b.n	8003b28 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2210      	movs	r2, #16
 8003af4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003af6:	e08f      	b.n	8003c18 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2210      	movs	r2, #16
 8003afe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b04:	f043 0204 	orr.w	r2, r3, #4
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <I2C_Slave_ISR_IT+0xdc>
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b18:	d17e      	bne.n	8003c18 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1e:	4619      	mov	r1, r3
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fb37 	bl	8004194 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b26:	e077      	b.n	8003c18 <I2C_Slave_ISR_IT+0x1da>
 8003b28:	e076      	b.n	8003c18 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d02f      	beq.n	8003b94 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d02a      	beq.n	8003b94 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d018      	beq.n	8003b7a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d14b      	bne.n	8003c1c <I2C_Slave_ISR_IT+0x1de>
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b8a:	d047      	beq.n	8003c1c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f8d3 	bl	8003d38 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003b92:	e043      	b.n	8003c1c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d004      	beq.n	8003bb2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003ba8:	6939      	ldr	r1, [r7, #16]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f840 	bl	8003c30 <I2C_ITAddrCplt>
 8003bb0:	e035      	b.n	8003c1e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d030      	beq.n	8003c1e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d02b      	beq.n	8003c1e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d018      	beq.n	8003c02 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003c00:	e00d      	b.n	8003c1e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c08:	d002      	beq.n	8003c10 <I2C_Slave_ISR_IT+0x1d2>
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f891 	bl	8003d38 <I2C_ITSlaveSeqCplt>
 8003c16:	e002      	b.n	8003c1e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003c18:	bf00      	nop
 8003c1a:	e000      	b.n	8003c1e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003c1c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c46:	2b28      	cmp	r3, #40	@ 0x28
 8003c48:	d16a      	bne.n	8003d20 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003c68:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c76:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003c84:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d138      	bne.n	8003d00 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003c8e:	897b      	ldrh	r3, [r7, #10]
 8003c90:	09db      	lsrs	r3, r3, #7
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	89bb      	ldrh	r3, [r7, #12]
 8003c96:	4053      	eors	r3, r2
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f003 0306 	and.w	r3, r3, #6
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d11c      	bne.n	8003cdc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003ca2:	897b      	ldrh	r3, [r7, #10]
 8003ca4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d13b      	bne.n	8003d30 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2208      	movs	r2, #8
 8003cc4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cd2:	89ba      	ldrh	r2, [r7, #12]
 8003cd4:	7bf9      	ldrb	r1, [r7, #15]
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003cda:	e029      	b.n	8003d30 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003cdc:	893b      	ldrh	r3, [r7, #8]
 8003cde:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ce0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fbb0 	bl	800444a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cf6:	89ba      	ldrh	r2, [r7, #12]
 8003cf8:	7bf9      	ldrb	r1, [r7, #15]
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
}
 8003cfe:	e017      	b.n	8003d30 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003d00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fba0 	bl	800444a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d16:	89ba      	ldrh	r2, [r7, #12]
 8003d18:	7bf9      	ldrb	r1, [r7, #15]
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
}
 8003d1e:	e007      	b.n	8003d30 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2208      	movs	r2, #8
 8003d26:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e00c      	b.n	8003d86 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d84:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b29      	cmp	r3, #41	@ 0x29
 8003d90:	d113      	bne.n	8003dba <I2C_ITSlaveSeqCplt+0x82>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2228      	movs	r2, #40	@ 0x28
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2221      	movs	r2, #33	@ 0x21
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003da0:	2101      	movs	r1, #1
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fb51 	bl	800444a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8003db8:	e018      	b.n	8003dec <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dc4:	d112      	bne.n	8003dec <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2228      	movs	r2, #40	@ 0x28
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2222      	movs	r2, #34	@ 0x22
 8003dd2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fb37 	bl	800444a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	4798      	blx	r3
}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e16:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e20:	7afb      	ldrb	r3, [r7, #11]
 8003e22:	2b21      	cmp	r3, #33	@ 0x21
 8003e24:	d002      	beq.n	8003e2c <I2C_ITSlaveCplt+0x38>
 8003e26:	7afb      	ldrb	r3, [r7, #11]
 8003e28:	2b29      	cmp	r3, #41	@ 0x29
 8003e2a:	d108      	bne.n	8003e3e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003e2c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fb0a 	bl	800444a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2221      	movs	r2, #33	@ 0x21
 8003e3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e3c:	e019      	b.n	8003e72 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e3e:	7afb      	ldrb	r3, [r7, #11]
 8003e40:	2b22      	cmp	r3, #34	@ 0x22
 8003e42:	d002      	beq.n	8003e4a <I2C_ITSlaveCplt+0x56>
 8003e44:	7afb      	ldrb	r3, [r7, #11]
 8003e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e48:	d108      	bne.n	8003e5c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003e4a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fafb 	bl	800444a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2222      	movs	r2, #34	@ 0x22
 8003e58:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e5a:	e00a      	b.n	8003e72 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003e5c:	7afb      	ldrb	r3, [r7, #11]
 8003e5e:	2b28      	cmp	r3, #40	@ 0x28
 8003e60:	d107      	bne.n	8003e72 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003e62:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 faef 	bl	800444a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e80:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6859      	ldr	r1, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b94      	ldr	r3, [pc, #592]	@ (80040e0 <I2C_ITSlaveCplt+0x2ec>)
 8003e8e:	400b      	ands	r3, r1
 8003e90:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fa97 	bl	80043c6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01c      	beq.n	8003edc <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003eb0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d031      	beq.n	8003f1e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec2:	b29c      	uxth	r4, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff f8e3 	bl	8003094 <HAL_DMAEx_GetFifoLevel>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	4423      	add	r3, r4
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003eda:	e020      	b.n	8003f1e <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01b      	beq.n	8003f1e <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ef4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00f      	beq.n	8003f1e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f06:	b29c      	uxth	r4, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff f8c1 	bl	8003094 <HAL_DMAEx_GetFifoLevel>
 8003f12:	4603      	mov	r3, r0
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	4423      	add	r3, r4
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d020      	beq.n	8003f6a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 0304 	bic.w	r3, r3, #4
 8003f2e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00c      	beq.n	8003f6a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f78:	f043 0204 	orr.w	r2, r3, #4
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d049      	beq.n	800401e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d044      	beq.n	800401e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d128      	bne.n	8003ff0 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b28      	cmp	r3, #40	@ 0x28
 8003fa8:	d108      	bne.n	8003fbc <I2C_ITSlaveCplt+0x1c8>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fb0:	d104      	bne.n	8003fbc <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003fb2:	6979      	ldr	r1, [r7, #20]
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f897 	bl	80040e8 <I2C_ITListenCplt>
 8003fba:	e030      	b.n	800401e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b29      	cmp	r3, #41	@ 0x29
 8003fc6:	d10e      	bne.n	8003fe6 <I2C_ITSlaveCplt+0x1f2>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fce:	d00a      	beq.n	8003fe6 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2210      	movs	r2, #16
 8003fd6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f9f4 	bl	80043c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff feaa 	bl	8003d38 <I2C_ITSlaveSeqCplt>
 8003fe4:	e01b      	b.n	800401e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2210      	movs	r2, #16
 8003fec:	61da      	str	r2, [r3, #28]
 8003fee:	e016      	b.n	800401e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2210      	movs	r2, #16
 8003ff6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffc:	f043 0204 	orr.w	r2, r3, #4
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <I2C_ITSlaveCplt+0x21e>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004010:	d105      	bne.n	800401e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	4619      	mov	r1, r3
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f8bb 	bl	8004194 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004030:	2b00      	cmp	r3, #0
 8004032:	d010      	beq.n	8004056 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004038:	4619      	mov	r1, r3
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8aa 	bl	8004194 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b28      	cmp	r3, #40	@ 0x28
 800404a:	d144      	bne.n	80040d6 <I2C_ITSlaveCplt+0x2e2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800404c:	6979      	ldr	r1, [r7, #20]
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f84a 	bl	80040e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004054:	e03f      	b.n	80040d6 <I2C_ITSlaveCplt+0x2e2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800405e:	d015      	beq.n	800408c <I2C_ITSlaveCplt+0x298>
    I2C_ITSlaveSeqCplt(hi2c);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff fe69 	bl	8003d38 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1e      	ldr	r2, [pc, #120]	@ (80040e4 <I2C_ITSlaveCplt+0x2f0>)
 800406a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->ListenCpltCallback(hi2c);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
}
 800408a:	e024      	b.n	80040d6 <I2C_ITSlaveCplt+0x2e2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b22      	cmp	r3, #34	@ 0x22
 8004096:	d10f      	bne.n	80040b8 <I2C_ITSlaveCplt+0x2c4>
    hi2c->State = HAL_I2C_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
}
 80040b6:	e00e      	b.n	80040d6 <I2C_ITSlaveCplt+0x2e2>
    hi2c->State = HAL_I2C_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	4798      	blx	r3
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd90      	pop	{r4, r7, pc}
 80040de:	bf00      	nop
 80040e0:	fe00e800 	.word	0xfe00e800
 80040e4:	ffff0000 	.word	0xffff0000

080040e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a26      	ldr	r2, [pc, #152]	@ (8004190 <I2C_ITListenCplt+0xa8>)
 80040f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	d022      	beq.n	8004164 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413a:	2b00      	cmp	r3, #0
 800413c:	d012      	beq.n	8004164 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415c:	f043 0204 	orr.w	r2, r3, #4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004164:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f96e 	bl	800444a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2210      	movs	r2, #16
 8004174:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	ffff0000 	.word	0xffff0000

08004194 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a4:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a6d      	ldr	r2, [pc, #436]	@ (8004368 <I2C_ITError+0x1d4>)
 80041b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b28      	cmp	r3, #40	@ 0x28
 80041ca:	d005      	beq.n	80041d8 <I2C_ITError+0x44>
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2b29      	cmp	r3, #41	@ 0x29
 80041d0:	d002      	beq.n	80041d8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80041d6:	d10b      	bne.n	80041f0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041d8:	2103      	movs	r1, #3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f935 	bl	800444a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2228      	movs	r2, #40	@ 0x28
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a60      	ldr	r2, [pc, #384]	@ (800436c <I2C_ITError+0x1d8>)
 80041ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80041ee:	e030      	b.n	8004252 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041f0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f928 	bl	800444a <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f8e3 	bl	80043c6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b60      	cmp	r3, #96	@ 0x60
 800420a:	d01f      	beq.n	800424c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b20      	cmp	r3, #32
 8004220:	d114      	bne.n	800424c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b10      	cmp	r3, #16
 800422e:	d109      	bne.n	8004244 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2210      	movs	r2, #16
 8004236:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2220      	movs	r2, #32
 800424a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	2b00      	cmp	r3, #0
 800425e:	d039      	beq.n	80042d4 <I2C_ITError+0x140>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b11      	cmp	r3, #17
 8004264:	d002      	beq.n	800426c <I2C_ITError+0xd8>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b21      	cmp	r3, #33	@ 0x21
 800426a:	d133      	bne.n	80042d4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004276:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800427a:	d107      	bne.n	800428c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800428a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004290:	4618      	mov	r0, r3
 8004292:	f7fe fc35 	bl	8002b00 <HAL_DMA_GetState>
 8004296:	4603      	mov	r3, r0
 8004298:	2b01      	cmp	r3, #1
 800429a:	d017      	beq.n	80042cc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a0:	4a33      	ldr	r2, [pc, #204]	@ (8004370 <I2C_ITError+0x1dc>)
 80042a2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe fa9b 	bl	80027ec <HAL_DMA_Abort_IT>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d04d      	beq.n	8004358 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042c6:	4610      	mov	r0, r2
 80042c8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042ca:	e045      	b.n	8004358 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f851 	bl	8004374 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042d2:	e041      	b.n	8004358 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d039      	beq.n	8004350 <I2C_ITError+0x1bc>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b12      	cmp	r3, #18
 80042e0:	d002      	beq.n	80042e8 <I2C_ITError+0x154>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b22      	cmp	r3, #34	@ 0x22
 80042e6:	d133      	bne.n	8004350 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042f6:	d107      	bne.n	8004308 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004306:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe fbf7 	bl	8002b00 <HAL_DMA_GetState>
 8004312:	4603      	mov	r3, r0
 8004314:	2b01      	cmp	r3, #1
 8004316:	d017      	beq.n	8004348 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800431c:	4a14      	ldr	r2, [pc, #80]	@ (8004370 <I2C_ITError+0x1dc>)
 800431e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800432c:	4618      	mov	r0, r3
 800432e:	f7fe fa5d 	bl	80027ec <HAL_DMA_Abort_IT>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d011      	beq.n	800435c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004342:	4610      	mov	r0, r2
 8004344:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004346:	e009      	b.n	800435c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f813 	bl	8004374 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800434e:	e005      	b.n	800435c <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f80f 	bl	8004374 <I2C_TreatErrorCallback>
  }
}
 8004356:	e002      	b.n	800435e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004358:	bf00      	nop
 800435a:	e000      	b.n	800435e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800435c:	bf00      	nop
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	ffff0000 	.word	0xffff0000
 800436c:	08003a3f 	.word	0x08003a3f
 8004370:	0800440f 	.word	0x0800440f

08004374 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b60      	cmp	r3, #96	@ 0x60
 8004386:	d10f      	bne.n	80043a8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043a6:	e00a      	b.n	80043be <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->ErrorCallback(hi2c);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d103      	bne.n	80043e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2200      	movs	r2, #0
 80043e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d007      	beq.n	8004402 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0201 	orr.w	r2, r2, #1
 8004400:	619a      	str	r2, [r3, #24]
  }
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004428:	2200      	movs	r2, #0
 800442a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	2200      	movs	r2, #0
 800443a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff ff99 	bl	8004374 <I2C_TreatErrorCallback>
}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	460b      	mov	r3, r1
 8004454:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800445a:	887b      	ldrh	r3, [r7, #2]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00f      	beq.n	8004484 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800446a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004478:	2b28      	cmp	r3, #40	@ 0x28
 800447a:	d003      	beq.n	8004484 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004482:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004484:	887b      	ldrh	r3, [r7, #2]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00f      	beq.n	80044ae <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004494:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80044a2:	2b28      	cmp	r3, #40	@ 0x28
 80044a4:	d003      	beq.n	80044ae <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80044ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da03      	bge.n	80044be <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80044be:	887b      	ldrh	r3, [r7, #2]
 80044c0:	2b10      	cmp	r3, #16
 80044c2:	d103      	bne.n	80044cc <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80044ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044cc:	887b      	ldrh	r3, [r7, #2]
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d103      	bne.n	80044da <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f043 0320 	orr.w	r3, r3, #32
 80044d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80044da:	887b      	ldrh	r3, [r7, #2]
 80044dc:	2b40      	cmp	r3, #64	@ 0x40
 80044de:	d103      	bne.n	80044e8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044e6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6819      	ldr	r1, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	43da      	mvns	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	400a      	ands	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]
}
 80044fa:	bf00      	nop
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b20      	cmp	r3, #32
 800451a:	d138      	bne.n	800458e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004526:	2302      	movs	r3, #2
 8004528:	e032      	b.n	8004590 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2224      	movs	r2, #36	@ 0x24
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0201 	bic.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004558:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d139      	bne.n	8004626 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045bc:	2302      	movs	r3, #2
 80045be:	e033      	b.n	8004628 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2224      	movs	r2, #36	@ 0x24
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0201 	bic.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80045ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0201 	orr.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	e000      	b.n	8004628 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004626:	2302      	movs	r3, #2
  }
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004640:	4b0b      	ldr	r3, [pc, #44]	@ (8004670 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
 8004650:	e007      	b.n	8004662 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004652:	4b07      	ldr	r3, [pc, #28]	@ (8004670 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 0204 	bic.w	r2, r3, #4
 800465a:	4905      	ldr	r1, [pc, #20]	@ (8004670 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4313      	orrs	r3, r2
 8004660:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004662:	7bfb      	ldrb	r3, [r7, #15]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	40030400 	.word	0x40030400

08004674 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004678:	4b05      	ldr	r3, [pc, #20]	@ (8004690 <HAL_ICACHE_Enable+0x1c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a04      	ldr	r2, [pc, #16]	@ (8004690 <HAL_ICACHE_Enable+0x1c>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	40030400 	.word	0x40030400

08004694 <HAL_ICACHE_IRQHandler>:
  * @note This function respectively disables the interrupt and clears the
  *       flag of any pending flag before calling the associated user callback.
  * @retval None
  */
void HAL_ICACHE_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
  /* Get current interrupt flags and interrupt sources value */
  uint32_t itflags   = READ_REG(ICACHE->SR);
 800469a:	4b17      	ldr	r3, [pc, #92]	@ (80046f8 <HAL_ICACHE_IRQHandler+0x64>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	607b      	str	r3, [r7, #4]
  uint32_t itsources = READ_REG(ICACHE->IER);
 80046a0:	4b15      	ldr	r3, [pc, #84]	@ (80046f8 <HAL_ICACHE_IRQHandler+0x64>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	603b      	str	r3, [r7, #0]

  /* Check Instruction cache Error interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_ERROR) != 0U)
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4013      	ands	r3, r2
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_ICACHE_IRQHandler+0x36>
  {
    /* Disable error interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_ERRIE);
 80046b4:	4b10      	ldr	r3, [pc, #64]	@ (80046f8 <HAL_ICACHE_IRQHandler+0x64>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a0f      	ldr	r2, [pc, #60]	@ (80046f8 <HAL_ICACHE_IRQHandler+0x64>)
 80046ba:	f023 0304 	bic.w	r3, r3, #4
 80046be:	6093      	str	r3, [r2, #8]

    /* Clear ERR pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CERRF);
 80046c0:	4b0d      	ldr	r3, [pc, #52]	@ (80046f8 <HAL_ICACHE_IRQHandler+0x64>)
 80046c2:	2204      	movs	r2, #4
 80046c4:	60da      	str	r2, [r3, #12]

    /* Instruction cache error interrupt user callback */
    HAL_ICACHE_ErrorCallback();
 80046c6:	f000 f820 	bl	800470a <HAL_ICACHE_ErrorCallback>
  }

  /* Check Instruction cache BusyEnd interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_BUSYEND) != 0U)
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	4013      	ands	r3, r2
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <HAL_ICACHE_IRQHandler+0x5a>
  {
    /* Disable end of cache invalidation interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_BSYENDIE);
 80046d8:	4b07      	ldr	r3, [pc, #28]	@ (80046f8 <HAL_ICACHE_IRQHandler+0x64>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4a06      	ldr	r2, [pc, #24]	@ (80046f8 <HAL_ICACHE_IRQHandler+0x64>)
 80046de:	f023 0302 	bic.w	r3, r3, #2
 80046e2:	6093      	str	r3, [r2, #8]

    /* Clear BSYENDF pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 80046e4:	4b04      	ldr	r3, [pc, #16]	@ (80046f8 <HAL_ICACHE_IRQHandler+0x64>)
 80046e6:	2202      	movs	r2, #2
 80046e8:	60da      	str	r2, [r3, #12]

    /* Instruction cache busyend interrupt user callback */
    HAL_ICACHE_InvalidateCompleteCallback();
 80046ea:	f000 f807 	bl	80046fc <HAL_ICACHE_InvalidateCompleteCallback>
  }
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40030400 	.word	0x40030400

080046fc <HAL_ICACHE_InvalidateCompleteCallback>:

/**
  * @brief  Cache invalidation complete callback.
  */
__weak void HAL_ICACHE_InvalidateCompleteCallback(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_ICACHE_ErrorCallback>:

/**
  * @brief  Error callback.
  */
__weak void HAL_ICACHE_ErrorCallback(void)
{
 800470a:	b480      	push	{r7}
 800470c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_ErrorCallback() should be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800471c:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	4a04      	ldr	r2, [pc, #16]	@ (8004734 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	46020800 	.word	0x46020800

08004738 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e059      	b.n	80047fe <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 800474a:	4b30      	ldr	r3, [pc, #192]	@ (800480c <HAL_PWR_ConfigPVD+0xd4>)
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	492d      	ldr	r1, [pc, #180]	@ (800480c <HAL_PWR_ConfigPVD+0xd4>)
 8004758:	4313      	orrs	r3, r2
 800475a:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800475c:	4b2c      	ldr	r3, [pc, #176]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 800475e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004762:	4a2b      	ldr	r2, [pc, #172]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 8004764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004768:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800476c:	4b28      	ldr	r3, [pc, #160]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 800476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004772:	4a27      	ldr	r2, [pc, #156]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 8004774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004778:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800477c:	4b24      	ldr	r3, [pc, #144]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a23      	ldr	r2, [pc, #140]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 8004782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004786:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8004788:	4b21      	ldr	r3, [pc, #132]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4a20      	ldr	r2, [pc, #128]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 800478e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004792:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80047a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 80047a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80047bc:	4b14      	ldr	r3, [pc, #80]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 80047be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047c2:	4a13      	ldr	r2, [pc, #76]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80047d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 80047de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e2:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80047f0:	4b07      	ldr	r3, [pc, #28]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4a06      	ldr	r2, [pc, #24]	@ (8004810 <HAL_PWR_ConfigPVD+0xd8>)
 80047f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047fa:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	46020800 	.word	0x46020800
 8004810:	46022000 	.word	0x46022000

08004814 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 8004818:	4b05      	ldr	r3, [pc, #20]	@ (8004830 <HAL_PWR_EnablePVD+0x1c>)
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	4a04      	ldr	r2, [pc, #16]	@ (8004830 <HAL_PWR_EnablePVD+0x1c>)
 800481e:	f043 0310 	orr.w	r3, r3, #16
 8004822:	6113      	str	r3, [r2, #16]
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	46020800 	.word	0x46020800

08004834 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800483c:	4b39      	ldr	r3, [pc, #228]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800483e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004840:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004844:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	d10b      	bne.n	8004866 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004854:	d905      	bls.n	8004862 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004856:	4b33      	ldr	r3, [pc, #204]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	4a32      	ldr	r2, [pc, #200]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800485c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004860:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	e057      	b.n	8004916 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800486c:	d90a      	bls.n	8004884 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800486e:	4b2d      	ldr	r3, [pc, #180]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4313      	orrs	r3, r2
 800487a:	4a2a      	ldr	r2, [pc, #168]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800487c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004880:	60d3      	str	r3, [r2, #12]
 8004882:	e007      	b.n	8004894 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004884:	4b27      	ldr	r3, [pc, #156]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800488c:	4925      	ldr	r1, [pc, #148]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4313      	orrs	r3, r2
 8004892:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004894:	4b24      	ldr	r3, [pc, #144]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a24      	ldr	r2, [pc, #144]	@ (800492c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	099b      	lsrs	r3, r3, #6
 80048a0:	2232      	movs	r2, #50	@ 0x32
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	4a21      	ldr	r2, [pc, #132]	@ (800492c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	099b      	lsrs	r3, r3, #6
 80048ae:	3301      	adds	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80048b2:	e002      	b.n	80048ba <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80048ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <HAL_PWREx_ControlVoltageScaling+0x98>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f3      	bne.n	80048b4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01b      	beq.n	800490a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80048d2:	4b15      	ldr	r3, [pc, #84]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a15      	ldr	r2, [pc, #84]	@ (800492c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	099b      	lsrs	r3, r3, #6
 80048de:	2232      	movs	r2, #50	@ 0x32
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
 80048e4:	4a11      	ldr	r2, [pc, #68]	@ (800492c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	099b      	lsrs	r3, r3, #6
 80048ec:	3301      	adds	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80048f0:	e002      	b.n	80048f8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80048f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80048fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f3      	bne.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e000      	b.n	8004916 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	46020800 	.word	0x46020800
 8004928:	20000000 	.word	0x20000000
 800492c:	10624dd3 	.word	0x10624dd3

08004930 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004934:	4b04      	ldr	r3, [pc, #16]	@ (8004948 <HAL_PWREx_GetVoltageRange+0x18>)
 8004936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004938:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	46020800 	.word	0x46020800

0800494c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08e      	sub	sp, #56	@ 0x38
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004954:	2300      	movs	r3, #0
 8004956:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d102      	bne.n	8004966 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	f000 be9c 	b.w	800569e <HAL_RCC_OscConfig+0xd52>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004966:	4b99      	ldr	r3, [pc, #612]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004970:	4b96      	ldr	r3, [pc, #600]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 816c 	beq.w	8004c60 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498a:	2b00      	cmp	r3, #0
 800498c:	d007      	beq.n	800499e <HAL_RCC_OscConfig+0x52>
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	2b0c      	cmp	r3, #12
 8004992:	f040 80de 	bne.w	8004b52 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004998:	2b01      	cmp	r3, #1
 800499a:	f040 80da 	bne.w	8004b52 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d102      	bne.n	80049ac <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f000 be79 	b.w	800569e <HAL_RCC_OscConfig+0xd52>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049b0:	4b86      	ldr	r3, [pc, #536]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <HAL_RCC_OscConfig+0x7a>
 80049bc:	4b83      	ldr	r3, [pc, #524]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80049c4:	e005      	b.n	80049d2 <HAL_RCC_OscConfig+0x86>
 80049c6:	4b81      	ldr	r3, [pc, #516]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 80049c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d255      	bcs.n	8004a82 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10a      	bne.n	80049f2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 f9bd 	bl	8005d60 <RCC_SetFlashLatencyFromMSIRange>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f000 be56 	b.w	800569e <HAL_RCC_OscConfig+0xd52>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80049f2:	4b76      	ldr	r3, [pc, #472]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	4a75      	ldr	r2, [pc, #468]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 80049f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049fc:	6093      	str	r3, [r2, #8]
 80049fe:	4b73      	ldr	r3, [pc, #460]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	4970      	ldr	r1, [pc, #448]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004a18:	d309      	bcc.n	8004a2e <HAL_RCC_OscConfig+0xe2>
 8004a1a:	4b6c      	ldr	r3, [pc, #432]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f023 021f 	bic.w	r2, r3, #31
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	4969      	ldr	r1, [pc, #420]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60cb      	str	r3, [r1, #12]
 8004a2c:	e07e      	b.n	8004b2c <HAL_RCC_OscConfig+0x1e0>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	da0a      	bge.n	8004a4c <HAL_RCC_OscConfig+0x100>
 8004a36:	4b65      	ldr	r3, [pc, #404]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	015b      	lsls	r3, r3, #5
 8004a44:	4961      	ldr	r1, [pc, #388]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60cb      	str	r3, [r1, #12]
 8004a4a:	e06f      	b.n	8004b2c <HAL_RCC_OscConfig+0x1e0>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a54:	d30a      	bcc.n	8004a6c <HAL_RCC_OscConfig+0x120>
 8004a56:	4b5d      	ldr	r3, [pc, #372]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	029b      	lsls	r3, r3, #10
 8004a64:	4959      	ldr	r1, [pc, #356]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60cb      	str	r3, [r1, #12]
 8004a6a:	e05f      	b.n	8004b2c <HAL_RCC_OscConfig+0x1e0>
 8004a6c:	4b57      	ldr	r3, [pc, #348]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	03db      	lsls	r3, r3, #15
 8004a7a:	4954      	ldr	r1, [pc, #336]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60cb      	str	r3, [r1, #12]
 8004a80:	e054      	b.n	8004b2c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a82:	4b52      	ldr	r3, [pc, #328]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	4a51      	ldr	r2, [pc, #324]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a8c:	6093      	str	r3, [r2, #8]
 8004a8e:	4b4f      	ldr	r3, [pc, #316]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	494c      	ldr	r1, [pc, #304]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004aa8:	d309      	bcc.n	8004abe <HAL_RCC_OscConfig+0x172>
 8004aaa:	4b48      	ldr	r3, [pc, #288]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f023 021f 	bic.w	r2, r3, #31
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	4945      	ldr	r1, [pc, #276]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60cb      	str	r3, [r1, #12]
 8004abc:	e028      	b.n	8004b10 <HAL_RCC_OscConfig+0x1c4>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	da0a      	bge.n	8004adc <HAL_RCC_OscConfig+0x190>
 8004ac6:	4b41      	ldr	r3, [pc, #260]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	015b      	lsls	r3, r3, #5
 8004ad4:	493d      	ldr	r1, [pc, #244]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60cb      	str	r3, [r1, #12]
 8004ada:	e019      	b.n	8004b10 <HAL_RCC_OscConfig+0x1c4>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae4:	d30a      	bcc.n	8004afc <HAL_RCC_OscConfig+0x1b0>
 8004ae6:	4b39      	ldr	r3, [pc, #228]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	029b      	lsls	r3, r3, #10
 8004af4:	4935      	ldr	r1, [pc, #212]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60cb      	str	r3, [r1, #12]
 8004afa:	e009      	b.n	8004b10 <HAL_RCC_OscConfig+0x1c4>
 8004afc:	4b33      	ldr	r3, [pc, #204]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	03db      	lsls	r3, r3, #15
 8004b0a:	4930      	ldr	r1, [pc, #192]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10a      	bne.n	8004b2c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f001 f920 	bl	8005d60 <RCC_SetFlashLatencyFromMSIRange>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f000 bdb9 	b.w	800569e <HAL_RCC_OscConfig+0xd52>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004b2c:	f001 f8b2 	bl	8005c94 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b30:	4b27      	ldr	r3, [pc, #156]	@ (8004bd0 <HAL_RCC_OscConfig+0x284>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fc fd2d 	bl	8001594 <HAL_InitTick>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004b40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 808a 	beq.w	8004c5e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b4e:	f000 bda6 	b.w	800569e <HAL_RCC_OscConfig+0xd52>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d066      	beq.n	8004c28 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b66:	f7fd fbd1 	bl	800230c <HAL_GetTick>
 8004b6a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b6c:	e009      	b.n	8004b82 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b6e:	f7fd fbcd 	bl	800230c <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d902      	bls.n	8004b82 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	f000 bd8e 	b.w	800569e <HAL_RCC_OscConfig+0xd52>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b82:	4b12      	ldr	r3, [pc, #72]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0ef      	beq.n	8004b6e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	4a0e      	ldr	r2, [pc, #56]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004b94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b98:	6093      	str	r3, [r2, #8]
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	4909      	ldr	r1, [pc, #36]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004bb4:	d30e      	bcc.n	8004bd4 <HAL_RCC_OscConfig+0x288>
 8004bb6:	4b05      	ldr	r3, [pc, #20]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f023 021f 	bic.w	r2, r3, #31
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	4902      	ldr	r1, [pc, #8]	@ (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60cb      	str	r3, [r1, #12]
 8004bc8:	e04a      	b.n	8004c60 <HAL_RCC_OscConfig+0x314>
 8004bca:	bf00      	nop
 8004bcc:	46020c00 	.word	0x46020c00
 8004bd0:	20000004 	.word	0x20000004
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	da0a      	bge.n	8004bf2 <HAL_RCC_OscConfig+0x2a6>
 8004bdc:	4b98      	ldr	r3, [pc, #608]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	015b      	lsls	r3, r3, #5
 8004bea:	4995      	ldr	r1, [pc, #596]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60cb      	str	r3, [r1, #12]
 8004bf0:	e036      	b.n	8004c60 <HAL_RCC_OscConfig+0x314>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bfa:	d30a      	bcc.n	8004c12 <HAL_RCC_OscConfig+0x2c6>
 8004bfc:	4b90      	ldr	r3, [pc, #576]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	029b      	lsls	r3, r3, #10
 8004c0a:	498d      	ldr	r1, [pc, #564]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60cb      	str	r3, [r1, #12]
 8004c10:	e026      	b.n	8004c60 <HAL_RCC_OscConfig+0x314>
 8004c12:	4b8b      	ldr	r3, [pc, #556]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	03db      	lsls	r3, r3, #15
 8004c20:	4987      	ldr	r1, [pc, #540]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60cb      	str	r3, [r1, #12]
 8004c26:	e01b      	b.n	8004c60 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004c28:	4b85      	ldr	r3, [pc, #532]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a84      	ldr	r2, [pc, #528]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c34:	f7fd fb6a 	bl	800230c <HAL_GetTick>
 8004c38:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004c3a:	e009      	b.n	8004c50 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c3c:	f7fd fb66 	bl	800230c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d902      	bls.n	8004c50 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	f000 bd27 	b.w	800569e <HAL_RCC_OscConfig+0xd52>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004c50:	4b7b      	ldr	r3, [pc, #492]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1ef      	bne.n	8004c3c <HAL_RCC_OscConfig+0x2f0>
 8004c5c:	e000      	b.n	8004c60 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 808b 	beq.w	8004d84 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_OscConfig+0x334>
 8004c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d109      	bne.n	8004c8e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d106      	bne.n	8004c8e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d17d      	bne.n	8004d84 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f000 bd08 	b.w	800569e <HAL_RCC_OscConfig+0xd52>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c96:	d106      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x35a>
 8004c98:	4b69      	ldr	r3, [pc, #420]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a68      	ldr	r2, [pc, #416]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	e041      	b.n	8004d2a <HAL_RCC_OscConfig+0x3de>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cae:	d112      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x38a>
 8004cb0:	4b63      	ldr	r3, [pc, #396]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a62      	ldr	r2, [pc, #392]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004cb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	4b60      	ldr	r3, [pc, #384]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a5f      	ldr	r2, [pc, #380]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004cc2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	4b5d      	ldr	r3, [pc, #372]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a5c      	ldr	r2, [pc, #368]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	e029      	b.n	8004d2a <HAL_RCC_OscConfig+0x3de>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004cde:	d112      	bne.n	8004d06 <HAL_RCC_OscConfig+0x3ba>
 8004ce0:	4b57      	ldr	r3, [pc, #348]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a56      	ldr	r2, [pc, #344]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004ce6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	4b54      	ldr	r3, [pc, #336]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a53      	ldr	r2, [pc, #332]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4b51      	ldr	r3, [pc, #324]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a50      	ldr	r2, [pc, #320]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	e011      	b.n	8004d2a <HAL_RCC_OscConfig+0x3de>
 8004d06:	4b4e      	ldr	r3, [pc, #312]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a4d      	ldr	r2, [pc, #308]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004d0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b4b      	ldr	r3, [pc, #300]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a4a      	ldr	r2, [pc, #296]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004d18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	4b48      	ldr	r3, [pc, #288]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a47      	ldr	r2, [pc, #284]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004d24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004d28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d014      	beq.n	8004d5c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004d32:	f7fd faeb 	bl	800230c <HAL_GetTick>
 8004d36:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d38:	e009      	b.n	8004d4e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d3a:	f7fd fae7 	bl	800230c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b64      	cmp	r3, #100	@ 0x64
 8004d46:	d902      	bls.n	8004d4e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	f000 bca8 	b.w	800569e <HAL_RCC_OscConfig+0xd52>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0ef      	beq.n	8004d3a <HAL_RCC_OscConfig+0x3ee>
 8004d5a:	e013      	b.n	8004d84 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004d5c:	f7fd fad6 	bl	800230c <HAL_GetTick>
 8004d60:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d62:	e009      	b.n	8004d78 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d64:	f7fd fad2 	bl	800230c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	@ 0x64
 8004d70:	d902      	bls.n	8004d78 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	f000 bc93 	b.w	800569e <HAL_RCC_OscConfig+0xd52>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d78:	4b31      	ldr	r3, [pc, #196]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1ef      	bne.n	8004d64 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d05f      	beq.n	8004e50 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d005      	beq.n	8004da2 <HAL_RCC_OscConfig+0x456>
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	2b0c      	cmp	r3, #12
 8004d9a:	d114      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d111      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f000 bc77 	b.w	800569e <HAL_RCC_OscConfig+0xd52>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004db0:	4b23      	ldr	r3, [pc, #140]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	041b      	lsls	r3, r3, #16
 8004dbe:	4920      	ldr	r1, [pc, #128]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004dc4:	e044      	b.n	8004e50 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d024      	beq.n	8004e18 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004dce:	4b1c      	ldr	r3, [pc, #112]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004dda:	f7fd fa97 	bl	800230c <HAL_GetTick>
 8004dde:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004de0:	e009      	b.n	8004df6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de2:	f7fd fa93 	bl	800230c <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d902      	bls.n	8004df6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	f000 bc54 	b.w	800569e <HAL_RCC_OscConfig+0xd52>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004df6:	4b12      	ldr	r3, [pc, #72]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0ef      	beq.n	8004de2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004e02:	4b0f      	ldr	r3, [pc, #60]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	041b      	lsls	r3, r3, #16
 8004e10:	490b      	ldr	r1, [pc, #44]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	610b      	str	r3, [r1, #16]
 8004e16:	e01b      	b.n	8004e50 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004e18:	4b09      	ldr	r3, [pc, #36]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a08      	ldr	r2, [pc, #32]	@ (8004e40 <HAL_RCC_OscConfig+0x4f4>)
 8004e1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e22:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004e24:	f7fd fa72 	bl	800230c <HAL_GetTick>
 8004e28:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e2a:	e00b      	b.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2c:	f7fd fa6e 	bl	800230c <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d904      	bls.n	8004e44 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	f000 bc2f 	b.w	800569e <HAL_RCC_OscConfig+0xd52>
 8004e40:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e44:	4ba9      	ldr	r3, [pc, #676]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1ed      	bne.n	8004e2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80c7 	beq.w	8004fec <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e64:	4ba1      	ldr	r3, [pc, #644]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d111      	bne.n	8004e96 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e72:	4b9e      	ldr	r3, [pc, #632]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e78:	4a9c      	ldr	r2, [pc, #624]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004e7a:	f043 0304 	orr.w	r3, r3, #4
 8004e7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004e82:	4b9a      	ldr	r3, [pc, #616]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004e90:	2301      	movs	r3, #1
 8004e92:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e96:	4b96      	ldr	r3, [pc, #600]	@ (80050f0 <HAL_RCC_OscConfig+0x7a4>)
 8004e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d118      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x588>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004ea2:	4b93      	ldr	r3, [pc, #588]	@ (80050f0 <HAL_RCC_OscConfig+0x7a4>)
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea6:	4a92      	ldr	r2, [pc, #584]	@ (80050f0 <HAL_RCC_OscConfig+0x7a4>)
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eae:	f7fd fa2d 	bl	800230c <HAL_GetTick>
 8004eb2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x57c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb6:	f7fd fa29 	bl	800230c <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e3ea      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ec8:	4b89      	ldr	r3, [pc, #548]	@ (80050f0 <HAL_RCC_OscConfig+0x7a4>)
 8004eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d05f      	beq.n	8004f9c <HAL_RCC_OscConfig+0x650>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004edc:	4b83      	ldr	r3, [pc, #524]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ee2:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699a      	ldr	r2, [r3, #24]
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d037      	beq.n	8004f62 <HAL_RCC_OscConfig+0x616>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d006      	beq.n	8004f0a <HAL_RCC_OscConfig+0x5be>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_OscConfig+0x5be>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e3c9      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01b      	beq.n	8004f4c <HAL_RCC_OscConfig+0x600>
        {
          __HAL_RCC_LSI_DISABLE();
 8004f14:	4b75      	ldr	r3, [pc, #468]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f1a:	4a74      	ldr	r2, [pc, #464]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004f1c:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004f20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004f24:	f7fd f9f2 	bl	800230c <HAL_GetTick>
 8004f28:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x5f2>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f2c:	f7fd f9ee 	bl	800230c <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x5f2>
            {
              return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e3af      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f3e:	4b6b      	ldr	r3, [pc, #428]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1ef      	bne.n	8004f2c <HAL_RCC_OscConfig+0x5e0>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004f4c:	4b67      	ldr	r3, [pc, #412]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	4964      	ldr	r1, [pc, #400]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004f62:	4b62      	ldr	r3, [pc, #392]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f68:	4a60      	ldr	r2, [pc, #384]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004f6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004f72:	f7fd f9cb 	bl	800230c <HAL_GetTick>
 8004f76:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x640>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7a:	f7fd f9c7 	bl	800230c <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b05      	cmp	r3, #5
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x640>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e388      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004f8c:	4b57      	ldr	r3, [pc, #348]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0ef      	beq.n	8004f7a <HAL_RCC_OscConfig+0x62e>
 8004f9a:	e01b      	b.n	8004fd4 <HAL_RCC_OscConfig+0x688>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004f9c:	4b53      	ldr	r3, [pc, #332]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fa2:	4a52      	ldr	r2, [pc, #328]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004fa4:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004fa8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004fac:	f7fd f9ae 	bl	800230c <HAL_GetTick>
 8004fb0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x67a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fb4:	f7fd f9aa 	bl	800230c <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b05      	cmp	r3, #5
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x67a>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e36b      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004fc6:	4b49      	ldr	r3, [pc, #292]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1ef      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x668>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fd4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d107      	bne.n	8004fec <HAL_RCC_OscConfig+0x6a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fdc:	4b43      	ldr	r3, [pc, #268]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fe2:	4a42      	ldr	r2, [pc, #264]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8004fe4:	f023 0304 	bic.w	r3, r3, #4
 8004fe8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80e4 	beq.w	80051c2 <HAL_RCC_OscConfig+0x876>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005000:	4b3a      	ldr	r3, [pc, #232]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8005002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b00      	cmp	r3, #0
 800500c:	d111      	bne.n	8005032 <HAL_RCC_OscConfig+0x6e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500e:	4b37      	ldr	r3, [pc, #220]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8005010:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005014:	4a35      	ldr	r2, [pc, #212]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8005016:	f043 0304 	orr.w	r3, r3, #4
 800501a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800501e:	4b33      	ldr	r3, [pc, #204]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8005020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005032:	4b2f      	ldr	r3, [pc, #188]	@ (80050f0 <HAL_RCC_OscConfig+0x7a4>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d118      	bne.n	8005070 <HAL_RCC_OscConfig+0x724>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800503e:	4b2c      	ldr	r3, [pc, #176]	@ (80050f0 <HAL_RCC_OscConfig+0x7a4>)
 8005040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005042:	4a2b      	ldr	r2, [pc, #172]	@ (80050f0 <HAL_RCC_OscConfig+0x7a4>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800504a:	f7fd f95f 	bl	800230c <HAL_GetTick>
 800504e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x718>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005052:	f7fd f95b 	bl	800230c <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e31c      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005064:	4b22      	ldr	r3, [pc, #136]	@ (80050f0 <HAL_RCC_OscConfig+0x7a4>)
 8005066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x706>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01f      	beq.n	80050bc <HAL_RCC_OscConfig+0x770>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d010      	beq.n	80050aa <HAL_RCC_OscConfig+0x75e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005088:	4b18      	ldr	r3, [pc, #96]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 800508a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800508e:	4a17      	ldr	r2, [pc, #92]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 8005090:	f043 0304 	orr.w	r3, r3, #4
 8005094:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005098:	4b14      	ldr	r3, [pc, #80]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 800509a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800509e:	4a13      	ldr	r2, [pc, #76]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80050a8:	e018      	b.n	80050dc <HAL_RCC_OscConfig+0x790>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050aa:	4b10      	ldr	r3, [pc, #64]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 80050ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050b0:	4a0e      	ldr	r2, [pc, #56]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80050ba:	e00f      	b.n	80050dc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050bc:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 80050be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050c2:	4a0a      	ldr	r2, [pc, #40]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 80050c4:	f023 0301 	bic.w	r3, r3, #1
 80050c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050cc:	4b07      	ldr	r3, [pc, #28]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 80050ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050d2:	4a06      	ldr	r2, [pc, #24]	@ (80050ec <HAL_RCC_OscConfig+0x7a0>)
 80050d4:	f023 0304 	bic.w	r3, r3, #4
 80050d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d03c      	beq.n	800515e <HAL_RCC_OscConfig+0x812>
    {
      tickstart = HAL_GetTick();
 80050e4:	f7fd f912 	bl	800230c <HAL_GetTick>
 80050e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ea:	e005      	b.n	80050f8 <HAL_RCC_OscConfig+0x7ac>
 80050ec:	46020c00 	.word	0x46020c00
 80050f0:	46020800 	.word	0x46020800
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f4:	f7fd f90a 	bl	800230c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f8:	4ba1      	ldr	r3, [pc, #644]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 80050fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f6      	beq.n	80050f4 <HAL_RCC_OscConfig+0x7a8>
          return HAL_TIMEOUT;
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510e:	2b00      	cmp	r3, #0
 8005110:	d012      	beq.n	8005138 <HAL_RCC_OscConfig+0x7ec>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005112:	4b9b      	ldr	r3, [pc, #620]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005118:	4a99      	ldr	r2, [pc, #612]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 800511a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800511e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005122:	e001      	b.n	8005128 <HAL_RCC_OscConfig+0x7dc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005124:	f7fd f8f2 	bl	800230c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005128:	4b95      	ldr	r3, [pc, #596]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 800512a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800512e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f6      	beq.n	8005124 <HAL_RCC_OscConfig+0x7d8>
 8005136:	e038      	b.n	80051aa <HAL_RCC_OscConfig+0x85e>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005138:	4b91      	ldr	r3, [pc, #580]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 800513a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800513e:	4a90      	ldr	r2, [pc, #576]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005140:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005144:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005148:	e001      	b.n	800514e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fd f8df 	bl	800230c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800514e:	4b8c      	ldr	r3, [pc, #560]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1f6      	bne.n	800514a <HAL_RCC_OscConfig+0x7fe>
 800515c:	e025      	b.n	80051aa <HAL_RCC_OscConfig+0x85e>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800515e:	f7fd f8d5 	bl	800230c <HAL_GetTick>
 8005162:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005164:	e001      	b.n	800516a <HAL_RCC_OscConfig+0x81e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fd f8d1 	bl	800230c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800516a:	4b85      	ldr	r3, [pc, #532]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 800516c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f6      	bne.n	8005166 <HAL_RCC_OscConfig+0x81a>
        {
          return HAL_TIMEOUT;
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005178:	4b81      	ldr	r3, [pc, #516]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 800517a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800517e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005182:	2b00      	cmp	r3, #0
 8005184:	d011      	beq.n	80051aa <HAL_RCC_OscConfig+0x85e>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005186:	4b7e      	ldr	r3, [pc, #504]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800518c:	4a7c      	ldr	r2, [pc, #496]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 800518e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005192:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005196:	e001      	b.n	800519c <HAL_RCC_OscConfig+0x850>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005198:	f7fd f8b8 	bl	800230c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800519c:	4b78      	ldr	r3, [pc, #480]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 800519e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f6      	bne.n	8005198 <HAL_RCC_OscConfig+0x84c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051aa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d107      	bne.n	80051c2 <HAL_RCC_OscConfig+0x876>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b2:	4b73      	ldr	r3, [pc, #460]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 80051b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b8:	4a71      	ldr	r2, [pc, #452]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 80051ba:	f023 0304 	bic.w	r3, r3, #4
 80051be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d036      	beq.n	800523c <HAL_RCC_OscConfig+0x8f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d019      	beq.n	800520a <HAL_RCC_OscConfig+0x8be>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80051d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a69      	ldr	r2, [pc, #420]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 80051dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80051e0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80051e2:	f7fd f893 	bl	800230c <HAL_GetTick>
 80051e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x8b0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051ea:	f7fd f88f 	bl	800230c <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x8b0>
        {
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e250      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80051fc:	4b60      	ldr	r3, [pc, #384]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0f0      	beq.n	80051ea <HAL_RCC_OscConfig+0x89e>
 8005208:	e018      	b.n	800523c <HAL_RCC_OscConfig+0x8f0>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800520a:	4b5d      	ldr	r3, [pc, #372]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a5c      	ldr	r2, [pc, #368]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005210:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005214:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005216:	f7fd f879 	bl	800230c <HAL_GetTick>
 800521a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x8e4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800521e:	f7fd f875 	bl	800230c <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e236      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005230:	4b53      	ldr	r3, [pc, #332]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f0      	bne.n	800521e <HAL_RCC_OscConfig+0x8d2>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005244:	2b00      	cmp	r3, #0
 8005246:	d036      	beq.n	80052b6 <HAL_RCC_OscConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524c:	2b00      	cmp	r3, #0
 800524e:	d019      	beq.n	8005284 <HAL_RCC_OscConfig+0x938>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005250:	4b4b      	ldr	r3, [pc, #300]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a4a      	ldr	r2, [pc, #296]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005256:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800525a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800525c:	f7fd f856 	bl	800230c <HAL_GetTick>
 8005260:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x92a>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005264:	f7fd f852 	bl	800230c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x92a>
        {
          return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e213      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005276:	4b42      	ldr	r3, [pc, #264]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f0      	beq.n	8005264 <HAL_RCC_OscConfig+0x918>
 8005282:	e018      	b.n	80052b6 <HAL_RCC_OscConfig+0x96a>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005284:	4b3e      	ldr	r3, [pc, #248]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a3d      	ldr	r2, [pc, #244]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 800528a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800528e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005290:	f7fd f83c 	bl	800230c <HAL_GetTick>
 8005294:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x95e>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005298:	f7fd f838 	bl	800230c <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x95e>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e1f9      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80052aa:	4b35      	ldr	r3, [pc, #212]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f0      	bne.n	8005298 <HAL_RCC_OscConfig+0x94c>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8080 	beq.w	80053c4 <HAL_RCC_OscConfig+0xa78>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d062      	beq.n	8005392 <HAL_RCC_OscConfig+0xa46>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80052cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 80052d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052d6:	6093      	str	r3, [r2, #8]
 80052d8:	4b29      	ldr	r3, [pc, #164]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e4:	4926      	ldr	r1, [pc, #152]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80052f2:	d309      	bcc.n	8005308 <HAL_RCC_OscConfig+0x9bc>
 80052f4:	4b22      	ldr	r3, [pc, #136]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f023 021f 	bic.w	r2, r3, #31
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	491f      	ldr	r1, [pc, #124]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005302:	4313      	orrs	r3, r2
 8005304:	60cb      	str	r3, [r1, #12]
 8005306:	e028      	b.n	800535a <HAL_RCC_OscConfig+0xa0e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	2b00      	cmp	r3, #0
 800530e:	da0a      	bge.n	8005326 <HAL_RCC_OscConfig+0x9da>
 8005310:	4b1b      	ldr	r3, [pc, #108]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	015b      	lsls	r3, r3, #5
 800531e:	4918      	ldr	r1, [pc, #96]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005320:	4313      	orrs	r3, r2
 8005322:	60cb      	str	r3, [r1, #12]
 8005324:	e019      	b.n	800535a <HAL_RCC_OscConfig+0xa0e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800532e:	d30a      	bcc.n	8005346 <HAL_RCC_OscConfig+0x9fa>
 8005330:	4b13      	ldr	r3, [pc, #76]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	029b      	lsls	r3, r3, #10
 800533e:	4910      	ldr	r1, [pc, #64]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005340:	4313      	orrs	r3, r2
 8005342:	60cb      	str	r3, [r1, #12]
 8005344:	e009      	b.n	800535a <HAL_RCC_OscConfig+0xa0e>
 8005346:	4b0e      	ldr	r3, [pc, #56]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	03db      	lsls	r3, r3, #15
 8005354:	490a      	ldr	r1, [pc, #40]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005356:	4313      	orrs	r3, r2
 8005358:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800535a:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a08      	ldr	r2, [pc, #32]	@ (8005380 <HAL_RCC_OscConfig+0xa34>)
 8005360:	f043 0310 	orr.w	r3, r3, #16
 8005364:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005366:	f7fc ffd1 	bl	800230c <HAL_GetTick>
 800536a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800536c:	e00a      	b.n	8005384 <HAL_RCC_OscConfig+0xa38>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800536e:	f7fc ffcd 	bl	800230c <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d903      	bls.n	8005384 <HAL_RCC_OscConfig+0xa38>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e18e      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
 8005380:	46020c00 	.word	0x46020c00
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005384:	4b8d      	ldr	r3, [pc, #564]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0ee      	beq.n	800536e <HAL_RCC_OscConfig+0xa22>
 8005390:	e018      	b.n	80053c4 <HAL_RCC_OscConfig+0xa78>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005392:	4b8a      	ldr	r3, [pc, #552]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a89      	ldr	r2, [pc, #548]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 8005398:	f023 0310 	bic.w	r3, r3, #16
 800539c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800539e:	f7fc ffb5 	bl	800230c <HAL_GetTick>
 80053a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0xa6c>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80053a6:	f7fc ffb1 	bl	800230c <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0xa6c>
        {
          return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e172      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80053b8:	4b80      	ldr	r3, [pc, #512]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1f0      	bne.n	80053a6 <HAL_RCC_OscConfig+0xa5a>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8167 	beq.w	800569c <HAL_RCC_OscConfig+0xd50>
  {
    FlagStatus  pwrclkchanged = RESET;
 80053ce:	2300      	movs	r3, #0
 80053d0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053d4:	4b79      	ldr	r3, [pc, #484]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	f003 030c 	and.w	r3, r3, #12
 80053dc:	2b0c      	cmp	r3, #12
 80053de:	f000 80f3 	beq.w	80055c8 <HAL_RCC_OscConfig+0xc7c>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	f040 80c5 	bne.w	8005576 <HAL_RCC_OscConfig+0xc2a>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80053ec:	4b73      	ldr	r3, [pc, #460]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a72      	ldr	r2, [pc, #456]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 80053f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053f6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80053f8:	f7fc ff88 	bl	800230c <HAL_GetTick>
 80053fc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0xac6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005400:	f7fc ff84 	bl	800230c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0xac6>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e145      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005412:	4b6a      	ldr	r3, [pc, #424]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0xab4>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800541e:	4b67      	ldr	r3, [pc, #412]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 8005420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d111      	bne.n	8005450 <HAL_RCC_OscConfig+0xb04>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800542c:	4b63      	ldr	r3, [pc, #396]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 800542e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005432:	4a62      	ldr	r2, [pc, #392]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 8005434:	f043 0304 	orr.w	r3, r3, #4
 8005438:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800543c:	4b5f      	ldr	r3, [pc, #380]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 800543e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800544a:	2301      	movs	r3, #1
 800544c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005450:	4b5b      	ldr	r3, [pc, #364]	@ (80055c0 <HAL_RCC_OscConfig+0xc74>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005458:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800545c:	d102      	bne.n	8005464 <HAL_RCC_OscConfig+0xb18>
        {
          pwrboosten = SET;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005464:	4b56      	ldr	r3, [pc, #344]	@ (80055c0 <HAL_RCC_OscConfig+0xc74>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	4a55      	ldr	r2, [pc, #340]	@ (80055c0 <HAL_RCC_OscConfig+0xc74>)
 800546a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800546e:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005470:	4b52      	ldr	r3, [pc, #328]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 8005472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005474:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005478:	f023 0303 	bic.w	r3, r3, #3
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005484:	3a01      	subs	r2, #1
 8005486:	0212      	lsls	r2, r2, #8
 8005488:	4311      	orrs	r1, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800548e:	430a      	orrs	r2, r1
 8005490:	494a      	ldr	r1, [pc, #296]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 8005492:	4313      	orrs	r3, r2
 8005494:	628b      	str	r3, [r1, #40]	@ 0x28
 8005496:	4b49      	ldr	r3, [pc, #292]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 8005498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800549a:	4b4a      	ldr	r3, [pc, #296]	@ (80055c4 <HAL_RCC_OscConfig+0xc78>)
 800549c:	4013      	ands	r3, r2
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80054a2:	3a01      	subs	r2, #1
 80054a4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80054ac:	3a01      	subs	r2, #1
 80054ae:	0252      	lsls	r2, r2, #9
 80054b0:	b292      	uxth	r2, r2
 80054b2:	4311      	orrs	r1, r2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054b8:	3a01      	subs	r2, #1
 80054ba:	0412      	lsls	r2, r2, #16
 80054bc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80054c0:	4311      	orrs	r1, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80054c6:	3a01      	subs	r2, #1
 80054c8:	0612      	lsls	r2, r2, #24
 80054ca:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80054ce:	430a      	orrs	r2, r1
 80054d0:	493a      	ldr	r1, [pc, #232]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80054d6:	4b39      	ldr	r3, [pc, #228]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 80054d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054da:	4a38      	ldr	r2, [pc, #224]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 80054dc:	f023 0310 	bic.w	r3, r3, #16
 80054e0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e6:	4a35      	ldr	r2, [pc, #212]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80054ec:	4b33      	ldr	r3, [pc, #204]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 80054ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f0:	4a32      	ldr	r2, [pc, #200]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 80054f2:	f043 0310 	orr.w	r3, r3, #16
 80054f6:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80054f8:	4b30      	ldr	r3, [pc, #192]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	f023 020c 	bic.w	r2, r3, #12
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005504:	492d      	ldr	r1, [pc, #180]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 8005506:	4313      	orrs	r3, r2
 8005508:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800550a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800550e:	2b01      	cmp	r3, #1
 8005510:	d105      	bne.n	800551e <HAL_RCC_OscConfig+0xbd2>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005512:	4b2b      	ldr	r3, [pc, #172]	@ (80055c0 <HAL_RCC_OscConfig+0xc74>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	4a2a      	ldr	r2, [pc, #168]	@ (80055c0 <HAL_RCC_OscConfig+0xc74>)
 8005518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800551c:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800551e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005522:	2b01      	cmp	r3, #1
 8005524:	d107      	bne.n	8005536 <HAL_RCC_OscConfig+0xbea>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005526:	4b25      	ldr	r3, [pc, #148]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 8005528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800552c:	4a23      	ldr	r2, [pc, #140]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 800552e:	f023 0304 	bic.w	r3, r3, #4
 8005532:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005536:	4b21      	ldr	r3, [pc, #132]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a20      	ldr	r2, [pc, #128]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 800553c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005540:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005542:	f7fc fee3 	bl	800230c <HAL_GetTick>
 8005546:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0xc10>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800554a:	f7fc fedf 	bl	800230c <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0xc10>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e0a0      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800555c:	4b17      	ldr	r3, [pc, #92]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <HAL_RCC_OscConfig+0xbfe>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005568:	4b14      	ldr	r3, [pc, #80]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 800556a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556c:	4a13      	ldr	r2, [pc, #76]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 800556e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005572:	6293      	str	r3, [r2, #40]	@ 0x28
 8005574:	e092      	b.n	800569c <HAL_RCC_OscConfig+0xd50>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005576:	4b11      	ldr	r3, [pc, #68]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a10      	ldr	r2, [pc, #64]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 800557c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005580:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005582:	f7fc fec3 	bl	800230c <HAL_GetTick>
 8005586:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0xc50>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800558a:	f7fc febf 	bl	800230c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0xc50>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e080      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800559c:	4b07      	ldr	r3, [pc, #28]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f0      	bne.n	800558a <HAL_RCC_OscConfig+0xc3e>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80055a8:	4b04      	ldr	r3, [pc, #16]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 80055aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ac:	4a03      	ldr	r2, [pc, #12]	@ (80055bc <HAL_RCC_OscConfig+0xc70>)
 80055ae:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80055b2:	f023 0303 	bic.w	r3, r3, #3
 80055b6:	6293      	str	r3, [r2, #40]	@ 0x28
 80055b8:	e070      	b.n	800569c <HAL_RCC_OscConfig+0xd50>
 80055ba:	bf00      	nop
 80055bc:	46020c00 	.word	0x46020c00
 80055c0:	46020800 	.word	0x46020800
 80055c4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80055c8:	4b37      	ldr	r3, [pc, #220]	@ (80056a8 <HAL_RCC_OscConfig+0xd5c>)
 80055ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055cc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055ce:	4b36      	ldr	r3, [pc, #216]	@ (80056a8 <HAL_RCC_OscConfig+0xd5c>)
 80055d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d039      	beq.n	8005650 <HAL_RCC_OscConfig+0xd04>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f003 0203 	and.w	r2, r3, #3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d132      	bne.n	8005650 <HAL_RCC_OscConfig+0xd04>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	0a1b      	lsrs	r3, r3, #8
 80055ee:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d129      	bne.n	8005650 <HAL_RCC_OscConfig+0xd04>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d122      	bne.n	8005650 <HAL_RCC_OscConfig+0xd04>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005614:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005616:	429a      	cmp	r2, r3
 8005618:	d11a      	bne.n	8005650 <HAL_RCC_OscConfig+0xd04>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	0a5b      	lsrs	r3, r3, #9
 800561e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005626:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005628:	429a      	cmp	r2, r3
 800562a:	d111      	bne.n	8005650 <HAL_RCC_OscConfig+0xd04>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	0c1b      	lsrs	r3, r3, #16
 8005630:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005638:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800563a:	429a      	cmp	r2, r3
 800563c:	d108      	bne.n	8005650 <HAL_RCC_OscConfig+0xd04>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	0e1b      	lsrs	r3, r3, #24
 8005642:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800564c:	429a      	cmp	r2, r3
 800564e:	d001      	beq.n	8005654 <HAL_RCC_OscConfig+0xd08>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e024      	b.n	800569e <HAL_RCC_OscConfig+0xd52>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005654:	4b14      	ldr	r3, [pc, #80]	@ (80056a8 <HAL_RCC_OscConfig+0xd5c>)
 8005656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005658:	08db      	lsrs	r3, r3, #3
 800565a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005662:	429a      	cmp	r2, r3
 8005664:	d01a      	beq.n	800569c <HAL_RCC_OscConfig+0xd50>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005666:	4b10      	ldr	r3, [pc, #64]	@ (80056a8 <HAL_RCC_OscConfig+0xd5c>)
 8005668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566a:	4a0f      	ldr	r2, [pc, #60]	@ (80056a8 <HAL_RCC_OscConfig+0xd5c>)
 800566c:	f023 0310 	bic.w	r3, r3, #16
 8005670:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005672:	f7fc fe4b 	bl	800230c <HAL_GetTick>
 8005676:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005678:	bf00      	nop
 800567a:	f7fc fe47 	bl	800230c <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005682:	4293      	cmp	r3, r2
 8005684:	d0f9      	beq.n	800567a <HAL_RCC_OscConfig+0xd2e>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800568a:	4a07      	ldr	r2, [pc, #28]	@ (80056a8 <HAL_RCC_OscConfig+0xd5c>)
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005690:	4b05      	ldr	r3, [pc, #20]	@ (80056a8 <HAL_RCC_OscConfig+0xd5c>)
 8005692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005694:	4a04      	ldr	r2, [pc, #16]	@ (80056a8 <HAL_RCC_OscConfig+0xd5c>)
 8005696:	f043 0310 	orr.w	r3, r3, #16
 800569a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3738      	adds	r7, #56	@ 0x38
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	46020c00 	.word	0x46020c00

080056ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e1d9      	b.n	8005a74 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056c0:	4b9b      	ldr	r3, [pc, #620]	@ (8005930 <HAL_RCC_ClockConfig+0x284>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d910      	bls.n	80056f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ce:	4b98      	ldr	r3, [pc, #608]	@ (8005930 <HAL_RCC_ClockConfig+0x284>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f023 020f 	bic.w	r2, r3, #15
 80056d6:	4996      	ldr	r1, [pc, #600]	@ (8005930 <HAL_RCC_ClockConfig+0x284>)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	4313      	orrs	r3, r2
 80056dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056de:	4b94      	ldr	r3, [pc, #592]	@ (8005930 <HAL_RCC_ClockConfig+0x284>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e1c1      	b.n	8005a74 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d010      	beq.n	800571e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	695a      	ldr	r2, [r3, #20]
 8005700:	4b8c      	ldr	r3, [pc, #560]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 8005702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005704:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005708:	429a      	cmp	r2, r3
 800570a:	d908      	bls.n	800571e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800570c:	4b89      	ldr	r3, [pc, #548]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 800570e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005710:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	4986      	ldr	r1, [pc, #536]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 800571a:	4313      	orrs	r3, r2
 800571c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d012      	beq.n	8005750 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	4b81      	ldr	r3, [pc, #516]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	091b      	lsrs	r3, r3, #4
 8005734:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005738:	429a      	cmp	r2, r3
 800573a:	d909      	bls.n	8005750 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800573c:	4b7d      	ldr	r3, [pc, #500]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	497a      	ldr	r1, [pc, #488]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 800574c:	4313      	orrs	r3, r2
 800574e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d010      	beq.n	800577e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	4b74      	ldr	r3, [pc, #464]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005768:	429a      	cmp	r2, r3
 800576a:	d908      	bls.n	800577e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800576c:	4b71      	ldr	r3, [pc, #452]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	496e      	ldr	r1, [pc, #440]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 800577a:	4313      	orrs	r3, r2
 800577c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d010      	beq.n	80057ac <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	4b69      	ldr	r3, [pc, #420]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	429a      	cmp	r2, r3
 8005798:	d908      	bls.n	80057ac <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800579a:	4b66      	ldr	r3, [pc, #408]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	f023 020f 	bic.w	r2, r3, #15
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4963      	ldr	r1, [pc, #396]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80d2 	beq.w	800595e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80057ba:	2300      	movs	r3, #0
 80057bc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d143      	bne.n	800584e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057c6:	4b5b      	ldr	r3, [pc, #364]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 80057c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d110      	bne.n	80057f6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80057d4:	4b57      	ldr	r3, [pc, #348]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 80057d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057da:	4a56      	ldr	r2, [pc, #344]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 80057dc:	f043 0304 	orr.w	r3, r3, #4
 80057e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80057e4:	4b53      	ldr	r3, [pc, #332]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 80057e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	60bb      	str	r3, [r7, #8]
 80057f0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80057f2:	2301      	movs	r3, #1
 80057f4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80057f6:	f7fc fd89 	bl	800230c <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80057fc:	4b4e      	ldr	r3, [pc, #312]	@ (8005938 <HAL_RCC_ClockConfig+0x28c>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00f      	beq.n	8005828 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005808:	e008      	b.n	800581c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800580a:	f7fc fd7f 	bl	800230c <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e12b      	b.n	8005a74 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800581c:	4b46      	ldr	r3, [pc, #280]	@ (8005938 <HAL_RCC_ClockConfig+0x28c>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0f0      	beq.n	800580a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005828:	7dfb      	ldrb	r3, [r7, #23]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d107      	bne.n	800583e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800582e:	4b41      	ldr	r3, [pc, #260]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 8005830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005834:	4a3f      	ldr	r2, [pc, #252]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 8005836:	f023 0304 	bic.w	r3, r3, #4
 800583a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800583e:	4b3d      	ldr	r3, [pc, #244]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d121      	bne.n	800588e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e112      	b.n	8005a74 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d107      	bne.n	8005866 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005856:	4b37      	ldr	r3, [pc, #220]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d115      	bne.n	800588e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e106      	b.n	8005a74 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d107      	bne.n	800587e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800586e:	4b31      	ldr	r3, [pc, #196]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0304 	and.w	r3, r3, #4
 8005876:	2b00      	cmp	r3, #0
 8005878:	d109      	bne.n	800588e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0fa      	b.n	8005a74 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800587e:	4b2d      	ldr	r3, [pc, #180]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0f2      	b.n	8005a74 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800588e:	4b29      	ldr	r3, [pc, #164]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f023 0203 	bic.w	r2, r3, #3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	4926      	ldr	r1, [pc, #152]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 800589c:	4313      	orrs	r3, r2
 800589e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80058a0:	f7fc fd34 	bl	800230c <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d112      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058ae:	e00a      	b.n	80058c6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b0:	f7fc fd2c 	bl	800230c <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058be:	4293      	cmp	r3, r2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e0d6      	b.n	8005a74 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b0c      	cmp	r3, #12
 80058d0:	d1ee      	bne.n	80058b0 <HAL_RCC_ClockConfig+0x204>
 80058d2:	e044      	b.n	800595e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d112      	bne.n	8005902 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058dc:	e00a      	b.n	80058f4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058de:	f7fc fd15 	bl	800230c <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e0bf      	b.n	8005a74 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f003 030c 	and.w	r3, r3, #12
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d1ee      	bne.n	80058de <HAL_RCC_ClockConfig+0x232>
 8005900:	e02d      	b.n	800595e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d123      	bne.n	8005952 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800590a:	e00a      	b.n	8005922 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800590c:	f7fc fcfe 	bl	800230c <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800591a:	4293      	cmp	r3, r2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e0a8      	b.n	8005a74 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005922:	4b04      	ldr	r3, [pc, #16]	@ (8005934 <HAL_RCC_ClockConfig+0x288>)
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1ee      	bne.n	800590c <HAL_RCC_ClockConfig+0x260>
 800592e:	e016      	b.n	800595e <HAL_RCC_ClockConfig+0x2b2>
 8005930:	40022000 	.word	0x40022000
 8005934:	46020c00 	.word	0x46020c00
 8005938:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593c:	f7fc fce6 	bl	800230c <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800594a:	4293      	cmp	r3, r2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e090      	b.n	8005a74 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005952:	4b4a      	ldr	r3, [pc, #296]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f003 030c 	and.w	r3, r3, #12
 800595a:	2b04      	cmp	r3, #4
 800595c:	d1ee      	bne.n	800593c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d010      	beq.n	800598c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	4b43      	ldr	r3, [pc, #268]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	429a      	cmp	r2, r3
 8005978:	d208      	bcs.n	800598c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800597a:	4b40      	ldr	r3, [pc, #256]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	f023 020f 	bic.w	r2, r3, #15
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	493d      	ldr	r1, [pc, #244]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 8005988:	4313      	orrs	r3, r2
 800598a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800598c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a80 <HAL_RCC_ClockConfig+0x3d4>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d210      	bcs.n	80059bc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599a:	4b39      	ldr	r3, [pc, #228]	@ (8005a80 <HAL_RCC_ClockConfig+0x3d4>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f023 020f 	bic.w	r2, r3, #15
 80059a2:	4937      	ldr	r1, [pc, #220]	@ (8005a80 <HAL_RCC_ClockConfig+0x3d4>)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059aa:	4b35      	ldr	r3, [pc, #212]	@ (8005a80 <HAL_RCC_ClockConfig+0x3d4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d001      	beq.n	80059bc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e05b      	b.n	8005a74 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d010      	beq.n	80059ea <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	4b2b      	ldr	r3, [pc, #172]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d208      	bcs.n	80059ea <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80059d8:	4b28      	ldr	r3, [pc, #160]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	4925      	ldr	r1, [pc, #148]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d012      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	4b20      	ldr	r3, [pc, #128]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	091b      	lsrs	r3, r3, #4
 8005a00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d209      	bcs.n	8005a1c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005a08:	4b1c      	ldr	r3, [pc, #112]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	4919      	ldr	r1, [pc, #100]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d010      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	4b13      	ldr	r3, [pc, #76]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d208      	bcs.n	8005a4a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005a38:	4b10      	ldr	r3, [pc, #64]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	490d      	ldr	r1, [pc, #52]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005a4a:	f000 f821 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	4b0a      	ldr	r3, [pc, #40]	@ (8005a7c <HAL_RCC_ClockConfig+0x3d0>)
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	490a      	ldr	r1, [pc, #40]	@ (8005a84 <HAL_RCC_ClockConfig+0x3d8>)
 8005a5a:	5ccb      	ldrb	r3, [r1, r3]
 8005a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a60:	4a09      	ldr	r2, [pc, #36]	@ (8005a88 <HAL_RCC_ClockConfig+0x3dc>)
 8005a62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a64:	4b09      	ldr	r3, [pc, #36]	@ (8005a8c <HAL_RCC_ClockConfig+0x3e0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fb fd93 	bl	8001594 <HAL_InitTick>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	73fb      	strb	r3, [r7, #15]

  return status;
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	46020c00 	.word	0x46020c00
 8005a80:	40022000 	.word	0x40022000
 8005a84:	0800d408 	.word	0x0800d408
 8005a88:	20000000 	.word	0x20000000
 8005a8c:	20000004 	.word	0x20000004

08005a90 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b08b      	sub	sp, #44	@ 0x2c
 8005a94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a9e:	4b78      	ldr	r3, [pc, #480]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
 8005aa6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aa8:	4b75      	ldr	r3, [pc, #468]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b0c      	cmp	r3, #12
 8005abc:	d121      	bne.n	8005b02 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d11e      	bne.n	8005b02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005ac4:	4b6e      	ldr	r3, [pc, #440]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d107      	bne.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ad6:	0b1b      	lsrs	r3, r3, #12
 8005ad8:	f003 030f 	and.w	r3, r3, #15
 8005adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ade:	e005      	b.n	8005aec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005ae0:	4b67      	ldr	r3, [pc, #412]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	0f1b      	lsrs	r3, r3, #28
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005aec:	4a65      	ldr	r2, [pc, #404]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d110      	bne.n	8005b1e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b00:	e00d      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b02:	4b5f      	ldr	r3, [pc, #380]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d102      	bne.n	8005b14 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b0e:	4b5e      	ldr	r3, [pc, #376]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005b10:	623b      	str	r3, [r7, #32]
 8005b12:	e004      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d101      	bne.n	8005b1e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005b1c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	f040 80a5 	bne.w	8005c70 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005b26:	4b56      	ldr	r3, [pc, #344]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005b30:	4b53      	ldr	r3, [pc, #332]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b34:	0a1b      	lsrs	r3, r3, #8
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005b3e:	4b50      	ldr	r3, [pc, #320]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b42:	091b      	lsrs	r3, r3, #4
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b4a:	4b4d      	ldr	r3, [pc, #308]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4e:	08db      	lsrs	r3, r3, #3
 8005b50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	fb02 f303 	mul.w	r3, r2, r3
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b62:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d003      	beq.n	8005b74 <HAL_RCC_GetSysClockFreq+0xe4>
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d022      	beq.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x128>
 8005b72:	e043      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005c8c <HAL_RCC_GetSysClockFreq+0x1fc>
 8005b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b86:	4b3e      	ldr	r3, [pc, #248]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b96:	ed97 6a01 	vldr	s12, [r7, #4]
 8005b9a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005c90 <HAL_RCC_GetSysClockFreq+0x200>
 8005b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bb6:	e046      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005c8c <HAL_RCC_GetSysClockFreq+0x1fc>
 8005bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bca:	4b2d      	ldr	r3, [pc, #180]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd2:	ee07 3a90 	vmov	s15, r3
 8005bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bda:	ed97 6a01 	vldr	s12, [r7, #4]
 8005bde:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005c90 <HAL_RCC_GetSysClockFreq+0x200>
 8005be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bfa:	e024      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	ee07 3a90 	vmov	s15, r3
 8005c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c14:	4b1a      	ldr	r3, [pc, #104]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1c:	ee07 3a90 	vmov	s15, r3
 8005c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c24:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c28:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005c90 <HAL_RCC_GetSysClockFreq+0x200>
 8005c2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c44:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005c46:	4b0e      	ldr	r3, [pc, #56]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4a:	0e1b      	lsrs	r3, r3, #24
 8005c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c50:	3301      	adds	r3, #1
 8005c52:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c6a:	ee17 3a90 	vmov	r3, s15
 8005c6e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005c70:	6a3b      	ldr	r3, [r7, #32]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	372c      	adds	r7, #44	@ 0x2c
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	46020c00 	.word	0x46020c00
 8005c84:	0800d420 	.word	0x0800d420
 8005c88:	00f42400 	.word	0x00f42400
 8005c8c:	4b742400 	.word	0x4b742400
 8005c90:	46000000 	.word	0x46000000

08005c94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005c98:	f7ff fefa 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	4b07      	ldr	r3, [pc, #28]	@ (8005cbc <HAL_RCC_GetHCLKFreq+0x28>)
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	4906      	ldr	r1, [pc, #24]	@ (8005cc0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005ca8:	5ccb      	ldrb	r3, [r1, r3]
 8005caa:	fa22 f303 	lsr.w	r3, r2, r3
 8005cae:	4a05      	ldr	r2, [pc, #20]	@ (8005cc4 <HAL_RCC_GetHCLKFreq+0x30>)
 8005cb0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005cb2:	4b04      	ldr	r3, [pc, #16]	@ (8005cc4 <HAL_RCC_GetHCLKFreq+0x30>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	46020c00 	.word	0x46020c00
 8005cc0:	0800d408 	.word	0x0800d408
 8005cc4:	20000000 	.word	0x20000000

08005cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005ccc:	f7ff ffe2 	bl	8005c94 <HAL_RCC_GetHCLKFreq>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4b05      	ldr	r3, [pc, #20]	@ (8005ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	4903      	ldr	r1, [pc, #12]	@ (8005cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cde:	5ccb      	ldrb	r3, [r1, r3]
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	46020c00 	.word	0x46020c00
 8005cec:	0800d418 	.word	0x0800d418

08005cf0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	221f      	movs	r2, #31
 8005cfe:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005d00:	4b15      	ldr	r3, [pc, #84]	@ (8005d58 <HAL_RCC_GetClockConfig+0x68>)
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f003 0203 	and.w	r2, r3, #3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8005d0c:	4b12      	ldr	r3, [pc, #72]	@ (8005d58 <HAL_RCC_GetClockConfig+0x68>)
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	f003 020f 	and.w	r2, r3, #15
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8005d18:	4b0f      	ldr	r3, [pc, #60]	@ (8005d58 <HAL_RCC_GetClockConfig+0x68>)
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8005d24:	4b0c      	ldr	r3, [pc, #48]	@ (8005d58 <HAL_RCC_GetClockConfig+0x68>)
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	091b      	lsrs	r3, r3, #4
 8005d2a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8005d32:	4b09      	ldr	r3, [pc, #36]	@ (8005d58 <HAL_RCC_GetClockConfig+0x68>)
 8005d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d36:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d3e:	4b07      	ldr	r3, [pc, #28]	@ (8005d5c <HAL_RCC_GetClockConfig+0x6c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 020f 	and.w	r2, r3, #15
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	601a      	str	r2, [r3, #0]
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	46020c00 	.word	0x46020c00
 8005d5c:	40022000 	.word	0x40022000

08005d60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d68:	4b3e      	ldr	r3, [pc, #248]	@ (8005e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d76:	f7fe fddb 	bl	8004930 <HAL_PWREx_GetVoltageRange>
 8005d7a:	6178      	str	r0, [r7, #20]
 8005d7c:	e019      	b.n	8005db2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d7e:	4b39      	ldr	r3, [pc, #228]	@ (8005e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d84:	4a37      	ldr	r2, [pc, #220]	@ (8005e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d86:	f043 0304 	orr.w	r3, r3, #4
 8005d8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005d8e:	4b35      	ldr	r3, [pc, #212]	@ (8005e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d9c:	f7fe fdc8 	bl	8004930 <HAL_PWREx_GetVoltageRange>
 8005da0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005da2:	4b30      	ldr	r3, [pc, #192]	@ (8005e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005da8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005daa:	f023 0304 	bic.w	r3, r3, #4
 8005dae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005db8:	d003      	beq.n	8005dc2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dc0:	d109      	bne.n	8005dd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dc8:	d202      	bcs.n	8005dd0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005dca:	2301      	movs	r3, #1
 8005dcc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005dce:	e033      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005dd4:	e030      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ddc:	d208      	bcs.n	8005df0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de4:	d102      	bne.n	8005dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005de6:	2303      	movs	r3, #3
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	e025      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e035      	b.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005df6:	d90f      	bls.n	8005e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d109      	bne.n	8005e12 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e04:	d902      	bls.n	8005e0c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	e015      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	e012      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	e00f      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e1e:	d109      	bne.n	8005e34 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e26:	d102      	bne.n	8005e2e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005e28:	2301      	movs	r3, #1
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	e004      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005e2e:	2302      	movs	r3, #2
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	e001      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005e34:	2301      	movs	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e38:	4b0b      	ldr	r3, [pc, #44]	@ (8005e68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f023 020f 	bic.w	r2, r3, #15
 8005e40:	4909      	ldr	r1, [pc, #36]	@ (8005e68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005e48:	4b07      	ldr	r3, [pc, #28]	@ (8005e68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d001      	beq.n	8005e5a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	46020c00 	.word	0x46020c00
 8005e68:	40022000 	.word	0x40022000

08005e6c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e70:	b0b8      	sub	sp, #224	@ 0xe0
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f002 0401 	and.w	r4, r2, #1
 8005e90:	2500      	movs	r5, #0
 8005e92:	ea54 0305 	orrs.w	r3, r4, r5
 8005e96:	d00b      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005e98:	4bca      	ldr	r3, [pc, #808]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e9e:	f023 0103 	bic.w	r1, r3, #3
 8005ea2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea8:	4ac6      	ldr	r2, [pc, #792]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005eaa:	430b      	orrs	r3, r1
 8005eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005eb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f002 0802 	and.w	r8, r2, #2
 8005ebc:	f04f 0900 	mov.w	r9, #0
 8005ec0:	ea58 0309 	orrs.w	r3, r8, r9
 8005ec4:	d00b      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005ec6:	4bbf      	ldr	r3, [pc, #764]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ecc:	f023 010c 	bic.w	r1, r3, #12
 8005ed0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed6:	4abb      	ldr	r2, [pc, #748]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ede:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f002 0a04 	and.w	sl, r2, #4
 8005eea:	f04f 0b00 	mov.w	fp, #0
 8005eee:	ea5a 030b 	orrs.w	r3, sl, fp
 8005ef2:	d00b      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005ef4:	4bb3      	ldr	r3, [pc, #716]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005efa:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f04:	4aaf      	ldr	r2, [pc, #700]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f06:	430b      	orrs	r3, r1
 8005f08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	f002 0308 	and.w	r3, r2, #8
 8005f18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	d00b      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005f2c:	4ba5      	ldr	r3, [pc, #660]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3c:	4aa1      	ldr	r2, [pc, #644]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f002 0310 	and.w	r3, r2, #16
 8005f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f54:	2300      	movs	r3, #0
 8005f56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4313      	orrs	r3, r2
 8005f62:	d00b      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005f64:	4b97      	ldr	r3, [pc, #604]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f74:	4a93      	ldr	r2, [pc, #588]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f76:	430b      	orrs	r3, r1
 8005f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f002 0320 	and.w	r3, r2, #32
 8005f88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	d00b      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005f9c:	4b89      	ldr	r3, [pc, #548]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fa2:	f023 0107 	bic.w	r1, r3, #7
 8005fa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fac:	4a85      	ldr	r2, [pc, #532]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fae:	430b      	orrs	r3, r1
 8005fb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	d00b      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005fd4:	4b7b      	ldr	r3, [pc, #492]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fda:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005fde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fe2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fe4:	4a77      	ldr	r2, [pc, #476]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005ff8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006002:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006006:	460b      	mov	r3, r1
 8006008:	4313      	orrs	r3, r2
 800600a:	d00b      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800600c:	4b6d      	ldr	r3, [pc, #436]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800600e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006012:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006016:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800601a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800601c:	4a69      	ldr	r2, [pc, #420]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800601e:	430b      	orrs	r3, r1
 8006020:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006024:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006034:	2300      	movs	r3, #0
 8006036:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800603a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800603e:	460b      	mov	r3, r1
 8006040:	4313      	orrs	r3, r2
 8006042:	d00b      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006044:	4b5f      	ldr	r3, [pc, #380]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006046:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800604a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800604e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006054:	4a5b      	ldr	r2, [pc, #364]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006056:	430b      	orrs	r3, r1
 8006058:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800605c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006068:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800606c:	2300      	movs	r3, #0
 800606e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006072:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006076:	460b      	mov	r3, r1
 8006078:	4313      	orrs	r3, r2
 800607a:	d00b      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800607c:	4b51      	ldr	r3, [pc, #324]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800607e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006082:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8006086:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800608a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800608c:	4a4d      	ldr	r2, [pc, #308]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800608e:	430b      	orrs	r3, r1
 8006090:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006094:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80060a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060a4:	2300      	movs	r3, #0
 80060a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80060ae:	460b      	mov	r3, r1
 80060b0:	4313      	orrs	r3, r2
 80060b2:	d00b      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80060b4:	4b43      	ldr	r3, [pc, #268]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060ba:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80060be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060c4:	4a3f      	ldr	r2, [pc, #252]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060c6:	430b      	orrs	r3, r1
 80060c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80060d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80060e6:	460b      	mov	r3, r1
 80060e8:	4313      	orrs	r3, r2
 80060ea:	d00b      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80060ec:	4b35      	ldr	r3, [pc, #212]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060f2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80060f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060fc:	4a31      	ldr	r2, [pc, #196]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060fe:	430b      	orrs	r3, r1
 8006100:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006110:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006112:	2300      	movs	r3, #0
 8006114:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006116:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800611a:	460b      	mov	r3, r1
 800611c:	4313      	orrs	r3, r2
 800611e:	d00c      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006120:	4b28      	ldr	r3, [pc, #160]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006122:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006126:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800612a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800612e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006132:	4a24      	ldr	r2, [pc, #144]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006134:	430b      	orrs	r3, r1
 8006136:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800613a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006146:	673b      	str	r3, [r7, #112]	@ 0x70
 8006148:	2300      	movs	r3, #0
 800614a:	677b      	str	r3, [r7, #116]	@ 0x74
 800614c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006150:	460b      	mov	r3, r1
 8006152:	4313      	orrs	r3, r2
 8006154:	d04f      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006156:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800615a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800615e:	2b80      	cmp	r3, #128	@ 0x80
 8006160:	d02d      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006162:	2b80      	cmp	r3, #128	@ 0x80
 8006164:	d827      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006166:	2b60      	cmp	r3, #96	@ 0x60
 8006168:	d02e      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800616a:	2b60      	cmp	r3, #96	@ 0x60
 800616c:	d823      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800616e:	2b40      	cmp	r3, #64	@ 0x40
 8006170:	d006      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006172:	2b40      	cmp	r3, #64	@ 0x40
 8006174:	d81f      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800617a:	2b20      	cmp	r3, #32
 800617c:	d011      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800617e:	e01a      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006180:	4b10      	ldr	r3, [pc, #64]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006184:	4a0f      	ldr	r2, [pc, #60]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800618a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800618c:	e01d      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800618e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006192:	3308      	adds	r3, #8
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fc01 	bl	800699c <RCCEx_PLL2_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061a0:	e013      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061a6:	332c      	adds	r3, #44	@ 0x2c
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fc8f 	bl	8006acc <RCCEx_PLL3_Config>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061b4:	e009      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80061bc:	e005      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80061be:	bf00      	nop
 80061c0:	e003      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80061c2:	bf00      	nop
 80061c4:	46020c00 	.word	0x46020c00
        break;
 80061c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10d      	bne.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80061d2:	4bb6      	ldr	r3, [pc, #728]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80061d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061d8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80061dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e4:	4ab1      	ldr	r2, [pc, #708]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80061e6:	430b      	orrs	r3, r1
 80061e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80061ec:	e003      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ee:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80061f2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006202:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006204:	2300      	movs	r3, #0
 8006206:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006208:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800620c:	460b      	mov	r3, r1
 800620e:	4313      	orrs	r3, r2
 8006210:	d053      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006212:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800621a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800621e:	d033      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006224:	d82c      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800622a:	d02f      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800622c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006230:	d826      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006236:	d008      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800623c:	d820      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006246:	d011      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006248:	e01a      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800624a:	4b98      	ldr	r3, [pc, #608]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800624c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624e:	4a97      	ldr	r2, [pc, #604]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006254:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006256:	e01a      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006258:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800625c:	3308      	adds	r3, #8
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fb9c 	bl	800699c <RCCEx_PLL2_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800626a:	e010      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800626c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006270:	332c      	adds	r3, #44	@ 0x2c
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fc2a 	bl	8006acc <RCCEx_PLL3_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800627e:	e006      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006286:	e002      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006288:	bf00      	nop
 800628a:	e000      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800628c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10d      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006296:	4b85      	ldr	r3, [pc, #532]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006298:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800629c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80062a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062a8:	4a80      	ldr	r2, [pc, #512]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062aa:	430b      	orrs	r3, r1
 80062ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80062b0:	e003      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80062b6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80062ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80062c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80062c8:	2300      	movs	r3, #0
 80062ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80062cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80062d0:	460b      	mov	r3, r1
 80062d2:	4313      	orrs	r3, r2
 80062d4:	d046      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80062d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80062e2:	d028      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80062e4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80062e8:	d821      	bhi.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80062ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062ee:	d022      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80062f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062f4:	d81b      	bhi.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80062f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062fa:	d01c      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80062fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006300:	d815      	bhi.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006306:	d008      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800630c:	d80f      	bhi.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800630e:	2b00      	cmp	r3, #0
 8006310:	d011      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006316:	d00e      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006318:	e009      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800631a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800631e:	3308      	adds	r3, #8
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fb3b 	bl	800699c <RCCEx_PLL2_Config>
 8006326:	4603      	mov	r3, r0
 8006328:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800632c:	e004      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006334:	e000      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8006336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006338:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006340:	4b5a      	ldr	r3, [pc, #360]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006346:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800634a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800634e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006352:	4a56      	ldr	r2, [pc, #344]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006354:	430b      	orrs	r3, r1
 8006356:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800635a:	e003      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006360:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006364:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006372:	2300      	movs	r3, #0
 8006374:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006376:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800637a:	460b      	mov	r3, r1
 800637c:	4313      	orrs	r3, r2
 800637e:	d03f      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006380:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006388:	2b04      	cmp	r3, #4
 800638a:	d81e      	bhi.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800638c:	a201      	add	r2, pc, #4	@ (adr r2, 8006394 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006392:	bf00      	nop
 8006394:	080063d3 	.word	0x080063d3
 8006398:	080063a9 	.word	0x080063a9
 800639c:	080063b7 	.word	0x080063b7
 80063a0:	080063d3 	.word	0x080063d3
 80063a4:	080063d3 	.word	0x080063d3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063a8:	4b40      	ldr	r3, [pc, #256]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80063aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ac:	4a3f      	ldr	r2, [pc, #252]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80063ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80063b4:	e00e      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063ba:	332c      	adds	r3, #44	@ 0x2c
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fb85 	bl	8006acc <RCCEx_PLL3_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80063c8:	e004      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80063d0:	e000      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80063d2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80063d4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10d      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80063dc:	4b33      	ldr	r3, [pc, #204]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80063de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063e2:	f023 0107 	bic.w	r1, r3, #7
 80063e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ee:	4a2f      	ldr	r2, [pc, #188]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80063f0:	430b      	orrs	r3, r1
 80063f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80063f6:	e003      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80063fc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800640c:	653b      	str	r3, [r7, #80]	@ 0x50
 800640e:	2300      	movs	r3, #0
 8006410:	657b      	str	r3, [r7, #84]	@ 0x54
 8006412:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006416:	460b      	mov	r3, r1
 8006418:	4313      	orrs	r3, r2
 800641a:	d04d      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800641c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006424:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006428:	d028      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x610>
 800642a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800642e:	d821      	bhi.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006430:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006434:	d024      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006436:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800643a:	d81b      	bhi.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800643c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006440:	d00e      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8006442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006446:	d815      	bhi.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01b      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800644c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006450:	d110      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006452:	4b16      	ldr	r3, [pc, #88]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006456:	4a15      	ldr	r2, [pc, #84]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800645c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800645e:	e012      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006464:	332c      	adds	r3, #44	@ 0x2c
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fb30 	bl	8006acc <RCCEx_PLL3_Config>
 800646c:	4603      	mov	r3, r0
 800646e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006472:	e008      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800647a:	e004      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800647c:	bf00      	nop
 800647e:	e002      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006480:	bf00      	nop
 8006482:	e000      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006484:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006486:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800648a:	2b00      	cmp	r3, #0
 800648c:	d110      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800648e:	4b07      	ldr	r3, [pc, #28]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006494:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006498:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800649c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064a0:	4a02      	ldr	r2, [pc, #8]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80064a2:	430b      	orrs	r3, r1
 80064a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80064a8:	e006      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80064aa:	bf00      	nop
 80064ac:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80064b4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80064c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064c6:	2300      	movs	r3, #0
 80064c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80064ce:	460b      	mov	r3, r1
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f000 80a9 	beq.w	8006628 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064d6:	2300      	movs	r3, #0
 80064d8:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064dc:	4b97      	ldr	r3, [pc, #604]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80064de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d113      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ea:	4b94      	ldr	r3, [pc, #592]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80064ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064f0:	4a92      	ldr	r2, [pc, #584]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80064f2:	f043 0304 	orr.w	r3, r3, #4
 80064f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80064fa:	4b90      	ldr	r3, [pc, #576]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80064fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006508:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 800650c:	2301      	movs	r3, #1
 800650e:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006512:	4b8b      	ldr	r3, [pc, #556]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006516:	4a8a      	ldr	r2, [pc, #552]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006518:	f043 0301 	orr.w	r3, r3, #1
 800651c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800651e:	f7fb fef5 	bl	800230c <HAL_GetTick>
 8006522:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006526:	e00b      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006528:	f7fb fef0 	bl	800230c <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d903      	bls.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800653e:	e005      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006540:	4b7f      	ldr	r3, [pc, #508]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0ed      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800654c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006550:	2b00      	cmp	r3, #0
 8006552:	d159      	bne.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006554:	4b79      	ldr	r3, [pc, #484]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800655a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800655e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006566:	2b00      	cmp	r3, #0
 8006568:	d023      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800656a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800656e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006576:	4293      	cmp	r3, r2
 8006578:	d01b      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800657a:	4b70      	ldr	r3, [pc, #448]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800657c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006584:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006588:	4b6c      	ldr	r3, [pc, #432]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800658a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800658e:	4a6b      	ldr	r2, [pc, #428]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006594:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006598:	4b68      	ldr	r3, [pc, #416]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800659a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800659e:	4a67      	ldr	r2, [pc, #412]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80065a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065a8:	4a64      	ldr	r2, [pc, #400]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80065aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00d      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x76e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065be:	f7fb fea5 	bl	800230c <HAL_GetTick>
 80065c2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065c6:	e001      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x760>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c8:	f7fb fea0 	bl	800230c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065cc:	4b5b      	ldr	r3, [pc, #364]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80065ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0f6      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
            break;
          }
        }
      }

      if (ret == HAL_OK)
 80065da:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10d      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80065e2:	4b56      	ldr	r3, [pc, #344]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80065e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80065f4:	4a51      	ldr	r2, [pc, #324]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80065f6:	430b      	orrs	r3, r1
 80065f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80065fc:	e008      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065fe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006602:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8006606:	e003      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006608:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800660c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006610:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8006614:	2b01      	cmp	r3, #1
 8006616:	d107      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006618:	4b48      	ldr	r3, [pc, #288]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800661a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800661e:	4a47      	ldr	r2, [pc, #284]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006620:	f023 0304 	bic.w	r3, r3, #4
 8006624:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006628:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006634:	643b      	str	r3, [r7, #64]	@ 0x40
 8006636:	2300      	movs	r3, #0
 8006638:	647b      	str	r3, [r7, #68]	@ 0x44
 800663a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800663e:	460b      	mov	r3, r1
 8006640:	4313      	orrs	r3, r2
 8006642:	d042      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x85e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006644:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006648:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800664c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006650:	d022      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006652:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006656:	d81b      	bhi.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8006658:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800665c:	d011      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800665e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006662:	d815      	bhi.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8006664:	2b00      	cmp	r3, #0
 8006666:	d019      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x830>
 8006668:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800666c:	d110      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x824>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800666e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006672:	3308      	adds	r3, #8
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f991 	bl	800699c <RCCEx_PLL2_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006680:	e00d      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x832>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006682:	4b2e      	ldr	r3, [pc, #184]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	4a2d      	ldr	r2, [pc, #180]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800668c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800668e:	e006      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x832>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006696:	e002      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x832>
        break;
 8006698:	bf00      	nop
 800669a:	e000      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x832>
        break;
 800669c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800669e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10d      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x856>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80066a6:	4b25      	ldr	r3, [pc, #148]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80066a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ac:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80066b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066b8:	4a20      	ldr	r2, [pc, #128]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80066ba:	430b      	orrs	r3, r1
 80066bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80066c0:	e003      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x85e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80066c6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80066d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066d8:	2300      	movs	r3, #0
 80066da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066dc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80066e0:	460b      	mov	r3, r1
 80066e2:	4313      	orrs	r3, r2
 80066e4:	d032      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80066e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f2:	d00b      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 80066f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f8:	d804      	bhi.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x898>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d008      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80066fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006702:	d007      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800670a:	e004      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        break;
 800670c:	bf00      	nop
 800670e:	e002      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        break;
 8006710:	bf00      	nop
 8006712:	e000      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        break;
 8006714:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006716:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800671a:	2b00      	cmp	r3, #0
 800671c:	d112      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800671e:	4b07      	ldr	r3, [pc, #28]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006720:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006724:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800672c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006730:	4a02      	ldr	r2, [pc, #8]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006732:	430b      	orrs	r3, r1
 8006734:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006738:	e008      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 800673a:	bf00      	nop
 800673c:	46020c00 	.word	0x46020c00
 8006740:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006744:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006748:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800674c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006758:	633b      	str	r3, [r7, #48]	@ 0x30
 800675a:	2300      	movs	r3, #0
 800675c:	637b      	str	r3, [r7, #52]	@ 0x34
 800675e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006762:	460b      	mov	r3, r1
 8006764:	4313      	orrs	r3, r2
 8006766:	d019      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006768:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800676c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006770:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006774:	d105      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x916>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006776:	4b88      	ldr	r3, [pc, #544]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	4a87      	ldr	r2, [pc, #540]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 800677c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006780:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006782:	4b85      	ldr	r3, [pc, #532]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 8006784:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006788:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800678c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006790:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006794:	4a80      	ldr	r2, [pc, #512]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 8006796:	430b      	orrs	r3, r1
 8006798:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800679c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80067a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067aa:	2300      	movs	r3, #0
 80067ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067ae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80067b2:	460b      	mov	r3, r1
 80067b4:	4313      	orrs	r3, r2
 80067b6:	d00c      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x966>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80067b8:	4b77      	ldr	r3, [pc, #476]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 80067ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067ca:	4973      	ldr	r1, [pc, #460]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80067d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80067de:	623b      	str	r3, [r7, #32]
 80067e0:	2300      	movs	r3, #0
 80067e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80067e8:	460b      	mov	r3, r1
 80067ea:	4313      	orrs	r3, r2
 80067ec:	d00c      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x99c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80067ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 80067f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80067f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006800:	4965      	ldr	r1, [pc, #404]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006808:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006814:	61bb      	str	r3, [r7, #24]
 8006816:	2300      	movs	r3, #0
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800681e:	460b      	mov	r3, r1
 8006820:	4313      	orrs	r3, r2
 8006822:	d00c      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006824:	4b5c      	ldr	r3, [pc, #368]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 8006826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800682a:	f023 0218 	bic.w	r2, r3, #24
 800682e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006832:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006836:	4958      	ldr	r1, [pc, #352]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800683e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	2300      	movs	r3, #0
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006854:	460b      	mov	r3, r1
 8006856:	4313      	orrs	r3, r2
 8006858:	d032      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800685a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800685e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006862:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006866:	d105      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xa08>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006868:	4b4b      	ldr	r3, [pc, #300]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 800686a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686c:	4a4a      	ldr	r2, [pc, #296]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 800686e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006872:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006874:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006878:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800687c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006880:	d108      	bne.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xa28>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006882:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006886:	3308      	adds	r3, #8
 8006888:	4618      	mov	r0, r3
 800688a:	f000 f887 	bl	800699c <RCCEx_PLL2_Config>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8006894:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10d      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800689c:	4b3e      	ldr	r3, [pc, #248]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 800689e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068ae:	493a      	ldr	r1, [pc, #232]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80068b6:	e003      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068bc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80068c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80068cc:	60bb      	str	r3, [r7, #8]
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80068d6:	460b      	mov	r3, r1
 80068d8:	4313      	orrs	r3, r2
 80068da:	d03a      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xae6>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80068dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068e8:	d00e      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xa9c>
 80068ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068ee:	d815      	bhi.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d017      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xab8>
 80068f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068f8:	d110      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xab0>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068fa:	4b27      	ldr	r3, [pc, #156]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 80068fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fe:	4a26      	ldr	r2, [pc, #152]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 8006900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006904:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006906:	e00e      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xaba>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006908:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800690c:	3308      	adds	r3, #8
 800690e:	4618      	mov	r0, r3
 8006910:	f000 f844 	bl	800699c <RCCEx_PLL2_Config>
 8006914:	4603      	mov	r3, r0
 8006916:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800691a:	e004      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xaba>
      default:
        ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006922:	e000      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xaba>
        break;
 8006924:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006926:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10d      	bne.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800692e:	4b1a      	ldr	r3, [pc, #104]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 8006930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006934:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006938:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800693c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006940:	4915      	ldr	r1, [pc, #84]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006948:	e003      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xae6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800694e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006952:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	2300      	movs	r3, #0
 8006962:	607b      	str	r3, [r7, #4]
 8006964:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006968:	460b      	mov	r3, r1
 800696a:	4313      	orrs	r3, r2
 800696c:	d00c      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xb1c>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800696e:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 8006970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006974:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800697c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006980:	4905      	ldr	r1, [pc, #20]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006988:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 800698c:	4618      	mov	r0, r3
 800698e:	37e0      	adds	r7, #224	@ 0xe0
 8006990:	46bd      	mov	sp, r7
 8006992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006996:	bf00      	nop
 8006998:	46020c00 	.word	0x46020c00

0800699c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80069a4:	4b47      	ldr	r3, [pc, #284]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a46      	ldr	r2, [pc, #280]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 80069aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069ae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069b0:	f7fb fcac 	bl	800230c <HAL_GetTick>
 80069b4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069b6:	e008      	b.n	80069ca <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069b8:	f7fb fca8 	bl	800230c <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d901      	bls.n	80069ca <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e077      	b.n	8006aba <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069ca:	4b3e      	ldr	r3, [pc, #248]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1f0      	bne.n	80069b8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80069d6:	4b3b      	ldr	r3, [pc, #236]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 80069d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80069de:	f023 0303 	bic.w	r3, r3, #3
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6811      	ldr	r1, [r2, #0]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6852      	ldr	r2, [r2, #4]
 80069ea:	3a01      	subs	r2, #1
 80069ec:	0212      	lsls	r2, r2, #8
 80069ee:	430a      	orrs	r2, r1
 80069f0:	4934      	ldr	r1, [pc, #208]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80069f6:	4b33      	ldr	r3, [pc, #204]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 80069f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069fa:	4b33      	ldr	r3, [pc, #204]	@ (8006ac8 <RCCEx_PLL2_Config+0x12c>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6892      	ldr	r2, [r2, #8]
 8006a02:	3a01      	subs	r2, #1
 8006a04:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	68d2      	ldr	r2, [r2, #12]
 8006a0c:	3a01      	subs	r2, #1
 8006a0e:	0252      	lsls	r2, r2, #9
 8006a10:	b292      	uxth	r2, r2
 8006a12:	4311      	orrs	r1, r2
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6912      	ldr	r2, [r2, #16]
 8006a18:	3a01      	subs	r2, #1
 8006a1a:	0412      	lsls	r2, r2, #16
 8006a1c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006a20:	4311      	orrs	r1, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6952      	ldr	r2, [r2, #20]
 8006a26:	3a01      	subs	r2, #1
 8006a28:	0612      	lsls	r2, r2, #24
 8006a2a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	4924      	ldr	r1, [pc, #144]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006a36:	4b23      	ldr	r3, [pc, #140]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3a:	f023 020c 	bic.w	r2, r3, #12
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	4920      	ldr	r1, [pc, #128]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006a48:	4b1e      	ldr	r3, [pc, #120]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	491c      	ldr	r1, [pc, #112]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006a56:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006a5c:	f023 0310 	bic.w	r3, r3, #16
 8006a60:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a62:	4b18      	ldr	r3, [pc, #96]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a6a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	69d2      	ldr	r2, [r2, #28]
 8006a72:	00d2      	lsls	r2, r2, #3
 8006a74:	4913      	ldr	r1, [pc, #76]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006a7a:	4b12      	ldr	r3, [pc, #72]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	4a11      	ldr	r2, [pc, #68]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006a80:	f043 0310 	orr.w	r3, r3, #16
 8006a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006a86:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006a8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a90:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a92:	f7fb fc3b 	bl	800230c <HAL_GetTick>
 8006a96:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a98:	e008      	b.n	8006aac <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a9a:	f7fb fc37 	bl	800230c <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d901      	bls.n	8006aac <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e006      	b.n	8006aba <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006aac:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <RCCEx_PLL2_Config+0x128>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0f0      	beq.n	8006a9a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0

}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	46020c00 	.word	0x46020c00
 8006ac8:	80800000 	.word	0x80800000

08006acc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006ad4:	4b47      	ldr	r3, [pc, #284]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a46      	ldr	r2, [pc, #280]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ade:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ae0:	f7fb fc14 	bl	800230c <HAL_GetTick>
 8006ae4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ae6:	e008      	b.n	8006afa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ae8:	f7fb fc10 	bl	800230c <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d901      	bls.n	8006afa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e077      	b.n	8006bea <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006afa:	4b3e      	ldr	r3, [pc, #248]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1f0      	bne.n	8006ae8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006b06:	4b3b      	ldr	r3, [pc, #236]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006b0e:	f023 0303 	bic.w	r3, r3, #3
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6811      	ldr	r1, [r2, #0]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6852      	ldr	r2, [r2, #4]
 8006b1a:	3a01      	subs	r2, #1
 8006b1c:	0212      	lsls	r2, r2, #8
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	4934      	ldr	r1, [pc, #208]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	630b      	str	r3, [r1, #48]	@ 0x30
 8006b26:	4b33      	ldr	r3, [pc, #204]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b2a:	4b33      	ldr	r3, [pc, #204]	@ (8006bf8 <RCCEx_PLL3_Config+0x12c>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6892      	ldr	r2, [r2, #8]
 8006b32:	3a01      	subs	r2, #1
 8006b34:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	68d2      	ldr	r2, [r2, #12]
 8006b3c:	3a01      	subs	r2, #1
 8006b3e:	0252      	lsls	r2, r2, #9
 8006b40:	b292      	uxth	r2, r2
 8006b42:	4311      	orrs	r1, r2
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6912      	ldr	r2, [r2, #16]
 8006b48:	3a01      	subs	r2, #1
 8006b4a:	0412      	lsls	r2, r2, #16
 8006b4c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006b50:	4311      	orrs	r1, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6952      	ldr	r2, [r2, #20]
 8006b56:	3a01      	subs	r2, #1
 8006b58:	0612      	lsls	r2, r2, #24
 8006b5a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	4924      	ldr	r1, [pc, #144]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006b66:	4b23      	ldr	r3, [pc, #140]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6a:	f023 020c 	bic.w	r2, r3, #12
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	4920      	ldr	r1, [pc, #128]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006b78:	4b1e      	ldr	r3, [pc, #120]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006b7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	491c      	ldr	r1, [pc, #112]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006b86:	4b1b      	ldr	r3, [pc, #108]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006b8c:	f023 0310 	bic.w	r3, r3, #16
 8006b90:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b92:	4b18      	ldr	r3, [pc, #96]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b9a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	69d2      	ldr	r2, [r2, #28]
 8006ba2:	00d2      	lsls	r2, r2, #3
 8006ba4:	4913      	ldr	r1, [pc, #76]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006baa:	4b12      	ldr	r3, [pc, #72]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bae:	4a11      	ldr	r2, [pc, #68]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006bb0:	f043 0310 	orr.w	r3, r3, #16
 8006bb4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a0e      	ldr	r2, [pc, #56]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bc0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006bc2:	f7fb fba3 	bl	800230c <HAL_GetTick>
 8006bc6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bc8:	e008      	b.n	8006bdc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bca:	f7fb fb9f 	bl	800230c <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e006      	b.n	8006bea <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bdc:	4b05      	ldr	r3, [pc, #20]	@ (8006bf4 <RCCEx_PLL3_Config+0x128>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0f0      	beq.n	8006bca <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	46020c00 	.word	0x46020c00
 8006bf8:	80800000 	.word	0x80800000

08006bfc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80d2 	beq.w	8006db4 <HAL_RTC_Init+0x1b8>
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));
    assert_param(IS_RTC_BINARY_MODE(hrtc->Init.BinMode));
    assert_param(IS_RTC_BINARY_MIX_BCDU(hrtc->Init.BinMixBcdU));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d166      	bne.n	8006cea <HAL_RTC_Init+0xee>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
      /* Legacy weak AlarmAEventCallback      */
      hrtc->AlarmAEventCallback          = HAL_RTC_AlarmAEventCallback;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a66      	ldr	r2, [pc, #408]	@ (8006dc0 <HAL_RTC_Init+0x1c4>)
 8006c28:	631a      	str	r2, [r3, #48]	@ 0x30
      /* Legacy weak AlarmBEventCallback      */
      hrtc->AlarmBEventCallback          = HAL_RTCEx_AlarmBEventCallback;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a65      	ldr	r2, [pc, #404]	@ (8006dc4 <HAL_RTC_Init+0x1c8>)
 8006c2e:	635a      	str	r2, [r3, #52]	@ 0x34
      /* Legacy weak TimeStampEventCallback   */
      hrtc->TimeStampEventCallback       = HAL_RTCEx_TimeStampEventCallback;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a65      	ldr	r2, [pc, #404]	@ (8006dc8 <HAL_RTC_Init+0x1cc>)
 8006c34:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Legacy weak WakeUpTimerEventCallback */
      hrtc->WakeUpTimerEventCallback     = HAL_RTCEx_WakeUpTimerEventCallback;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a64      	ldr	r2, [pc, #400]	@ (8006dcc <HAL_RTC_Init+0x1d0>)
 8006c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
      /* Legacy weak SSRUEventCallback */
      hrtc->SSRUEventCallback            = HAL_RTCEx_SSRUEventCallback;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a64      	ldr	r2, [pc, #400]	@ (8006dd0 <HAL_RTC_Init+0x1d4>)
 8006c40:	641a      	str	r2, [r3, #64]	@ 0x40
      /* Legacy weak Tamper1EventCallback     */
      hrtc->Tamper1EventCallback         = HAL_RTCEx_Tamper1EventCallback;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a63      	ldr	r2, [pc, #396]	@ (8006dd4 <HAL_RTC_Init+0x1d8>)
 8006c46:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Legacy weak Tamper2EventCallback     */
      hrtc->Tamper2EventCallback         = HAL_RTCEx_Tamper2EventCallback;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a63      	ldr	r2, [pc, #396]	@ (8006dd8 <HAL_RTC_Init+0x1dc>)
 8006c4c:	649a      	str	r2, [r3, #72]	@ 0x48
      /* Legacy weak Tamper3EventCallback     */
      hrtc->Tamper3EventCallback         = HAL_RTCEx_Tamper3EventCallback;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a62      	ldr	r2, [pc, #392]	@ (8006ddc <HAL_RTC_Init+0x1e0>)
 8006c52:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Legacy weak Tamper4EventCallback     */
      hrtc->Tamper4EventCallback         = HAL_RTCEx_Tamper4EventCallback;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a62      	ldr	r2, [pc, #392]	@ (8006de0 <HAL_RTC_Init+0x1e4>)
 8006c58:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Legacy weak Tamper5EventCallback     */
      hrtc->Tamper5EventCallback         = HAL_RTCEx_Tamper5EventCallback;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a61      	ldr	r2, [pc, #388]	@ (8006de4 <HAL_RTC_Init+0x1e8>)
 8006c5e:	655a      	str	r2, [r3, #84]	@ 0x54
      /* Legacy weak Tamper6EventCallback     */
      hrtc->Tamper6EventCallback         = HAL_RTCEx_Tamper6EventCallback;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a61      	ldr	r2, [pc, #388]	@ (8006de8 <HAL_RTC_Init+0x1ec>)
 8006c64:	659a      	str	r2, [r3, #88]	@ 0x58
      /* Legacy weak Tamper7EventCallback     */
      hrtc->Tamper7EventCallback         = HAL_RTCEx_Tamper7EventCallback;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a60      	ldr	r2, [pc, #384]	@ (8006dec <HAL_RTC_Init+0x1f0>)
 8006c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Legacy weak Tamper8EventCallback     */
      hrtc->Tamper8EventCallback         = HAL_RTCEx_Tamper8EventCallback;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a60      	ldr	r2, [pc, #384]	@ (8006df0 <HAL_RTC_Init+0x1f4>)
 8006c70:	661a      	str	r2, [r3, #96]	@ 0x60
      /* Legacy weak InternalTamper1EventCallback */
      hrtc->InternalTamper1EventCallback = HAL_RTCEx_InternalTamper1EventCallback;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a5f      	ldr	r2, [pc, #380]	@ (8006df4 <HAL_RTC_Init+0x1f8>)
 8006c76:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Legacy weak InternalTamper2EventCallback */
      hrtc->InternalTamper2EventCallback = HAL_RTCEx_InternalTamper2EventCallback;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a5f      	ldr	r2, [pc, #380]	@ (8006df8 <HAL_RTC_Init+0x1fc>)
 8006c7c:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Legacy weak InternalTamper3EventCallback */
      hrtc->InternalTamper3EventCallback = HAL_RTCEx_InternalTamper3EventCallback;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a5e      	ldr	r2, [pc, #376]	@ (8006dfc <HAL_RTC_Init+0x200>)
 8006c82:	66da      	str	r2, [r3, #108]	@ 0x6c
      /* Legacy weak InternalTamper5EventCallback */
      hrtc->InternalTamper5EventCallback = HAL_RTCEx_InternalTamper5EventCallback;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a5e      	ldr	r2, [pc, #376]	@ (8006e00 <HAL_RTC_Init+0x204>)
 8006c88:	671a      	str	r2, [r3, #112]	@ 0x70
      /* Legacy weak InternalTamper6EventCallback */
      hrtc->InternalTamper6EventCallback = HAL_RTCEx_InternalTamper6EventCallback;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a5d      	ldr	r2, [pc, #372]	@ (8006e04 <HAL_RTC_Init+0x208>)
 8006c8e:	675a      	str	r2, [r3, #116]	@ 0x74
      /* Legacy weak InternalTamper7EventCallback */
      hrtc->InternalTamper7EventCallback = HAL_RTCEx_InternalTamper7EventCallback;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a5d      	ldr	r2, [pc, #372]	@ (8006e08 <HAL_RTC_Init+0x20c>)
 8006c94:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Legacy weak InternalTamper8EventCallback */
      hrtc->InternalTamper8EventCallback = HAL_RTCEx_InternalTamper8EventCallback;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a5c      	ldr	r2, [pc, #368]	@ (8006e0c <HAL_RTC_Init+0x210>)
 8006c9a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Legacy weak InternalTamper9EventCallback */
      hrtc->InternalTamper9EventCallback = HAL_RTCEx_InternalTamper9EventCallback;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a5c      	ldr	r2, [pc, #368]	@ (8006e10 <HAL_RTC_Init+0x214>)
 8006ca0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* Legacy weak InternalTamper11EventCallback */
      hrtc->InternalTamper11EventCallback = HAL_RTCEx_InternalTamper11EventCallback;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a5b      	ldr	r2, [pc, #364]	@ (8006e14 <HAL_RTC_Init+0x218>)
 8006ca8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Legacy weak InternalTamper12EventCallback */
      hrtc->InternalTamper12EventCallback = HAL_RTCEx_InternalTamper12EventCallback;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a5a      	ldr	r2, [pc, #360]	@ (8006e18 <HAL_RTC_Init+0x21c>)
 8006cb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Legacy weak InternalTamper13EventCallback */
      hrtc->InternalTamper13EventCallback = HAL_RTCEx_InternalTamper13EventCallback;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a59      	ldr	r2, [pc, #356]	@ (8006e1c <HAL_RTC_Init+0x220>)
 8006cb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      if (hrtc->MspInitCallback == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d103      	bne.n	8006cce <HAL_RTC_Init+0xd2>
      {
        hrtc->MspInitCallback = HAL_RTC_MspInit;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a55      	ldr	r2, [pc, #340]	@ (8006e20 <HAL_RTC_Init+0x224>)
 8006cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
      /* Init the low level hardware */
      hrtc->MspInitCallback(hrtc);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	4798      	blx	r3

      if (hrtc->MspDeInitCallback == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d103      	bne.n	8006cea <HAL_RTC_Init+0xee>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a4f      	ldr	r2, [pc, #316]	@ (8006e24 <HAL_RTC_Init+0x228>)
 8006ce6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      HAL_RTC_MspInit(hrtc);
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2202      	movs	r2, #2
 8006cee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8006e28 <HAL_RTC_Init+0x22c>)
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f003 0310 	and.w	r3, r3, #16
 8006cfa:	2b10      	cmp	r3, #16
 8006cfc:	d051      	beq.n	8006da2 <HAL_RTC_Init+0x1a6>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8006e28 <HAL_RTC_Init+0x22c>)
 8006d00:	22ca      	movs	r2, #202	@ 0xca
 8006d02:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d04:	4b48      	ldr	r3, [pc, #288]	@ (8006e28 <HAL_RTC_Init+0x22c>)
 8006d06:	2253      	movs	r2, #83	@ 0x53
 8006d08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f9ec 	bl	80070e8 <RTC_EnterInitMode>
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d13f      	bne.n	8006d9a <HAL_RTC_Init+0x19e>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006d1a:	4b43      	ldr	r3, [pc, #268]	@ (8006e28 <HAL_RTC_Init+0x22c>)
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	4a42      	ldr	r2, [pc, #264]	@ (8006e28 <HAL_RTC_Init+0x22c>)
 8006d20:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006d24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d28:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e28 <HAL_RTC_Init+0x22c>)
 8006d2c:	699a      	ldr	r2, [r3, #24]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6859      	ldr	r1, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	4319      	orrs	r1, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	493a      	ldr	r1, [pc, #232]	@ (8006e28 <HAL_RTC_Init+0x22c>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	041b      	lsls	r3, r3, #16
 8006d4e:	4936      	ldr	r1, [pc, #216]	@ (8006e28 <HAL_RTC_Init+0x22c>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006d54:	4b34      	ldr	r3, [pc, #208]	@ (8006e28 <HAL_RTC_Init+0x22c>)
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d64:	430b      	orrs	r3, r1
 8006d66:	4930      	ldr	r1, [pc, #192]	@ (8006e28 <HAL_RTC_Init+0x22c>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f9f7 	bl	8007160 <RTC_ExitInitMode>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10e      	bne.n	8006d9a <HAL_RTC_Init+0x19e>
        {
          MODIFY_REG(RTC->CR, \
 8006d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8006e28 <HAL_RTC_Init+0x22c>)
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a19      	ldr	r1, [r3, #32]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	4319      	orrs	r1, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	430b      	orrs	r3, r1
 8006d94:	4924      	ldr	r1, [pc, #144]	@ (8006e28 <HAL_RTC_Init+0x22c>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d9a:	4b23      	ldr	r3, [pc, #140]	@ (8006e28 <HAL_RTC_Init+0x22c>)
 8006d9c:	22ff      	movs	r2, #255	@ 0xff
 8006d9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006da0:	e001      	b.n	8006da6 <HAL_RTC_Init+0x1aa>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d103      	bne.n	8006db4 <HAL_RTC_Init+0x1b8>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	08007071 	.word	0x08007071
 8006dc4:	08007259 	.word	0x08007259
 8006dc8:	0800721d 	.word	0x0800721d
 8006dcc:	08007231 	.word	0x08007231
 8006dd0:	08007245 	.word	0x08007245
 8006dd4:	0800726d 	.word	0x0800726d
 8006dd8:	08007281 	.word	0x08007281
 8006ddc:	08007295 	.word	0x08007295
 8006de0:	080072a9 	.word	0x080072a9
 8006de4:	080072bd 	.word	0x080072bd
 8006de8:	080072d1 	.word	0x080072d1
 8006dec:	080072e5 	.word	0x080072e5
 8006df0:	080072f9 	.word	0x080072f9
 8006df4:	0800730d 	.word	0x0800730d
 8006df8:	08007321 	.word	0x08007321
 8006dfc:	08007335 	.word	0x08007335
 8006e00:	08007349 	.word	0x08007349
 8006e04:	0800735d 	.word	0x0800735d
 8006e08:	08007371 	.word	0x08007371
 8006e0c:	08007385 	.word	0x08007385
 8006e10:	08007399 	.word	0x08007399
 8006e14:	080073ad 	.word	0x080073ad
 8006e18:	080073c1 	.word	0x080073c1
 8006e1c:	080073d5 	.word	0x080073d5
 8006e20:	08000fc9 	.word	0x08000fc9
 8006e24:	08001061 	.word	0x08001061
 8006e28:	46007800 	.word	0x46007800

08006e2c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006e2c:	b590      	push	{r4, r7, lr}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d101      	bne.n	8006e46 <HAL_RTC_SetTime+0x1a>
 8006e42:	2302      	movs	r3, #2
 8006e44:	e088      	b.n	8006f58 <HAL_RTC_SetTime+0x12c>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2202      	movs	r2, #2
 8006e52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e56:	4b42      	ldr	r3, [pc, #264]	@ (8006f60 <HAL_RTC_SetTime+0x134>)
 8006e58:	22ca      	movs	r2, #202	@ 0xca
 8006e5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e5c:	4b40      	ldr	r3, [pc, #256]	@ (8006f60 <HAL_RTC_SetTime+0x134>)
 8006e5e:	2253      	movs	r2, #83	@ 0x53
 8006e60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 f940 	bl	80070e8 <RTC_EnterInitMode>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006e6c:	7cfb      	ldrb	r3, [r7, #19]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d163      	bne.n	8006f3a <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8006e72:	4b3b      	ldr	r3, [pc, #236]	@ (8006f60 <HAL_RTC_SetTime+0x134>)
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e7e:	d057      	beq.n	8006f30 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d125      	bne.n	8006ed2 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006e86:	4b36      	ldr	r3, [pc, #216]	@ (8006f60 <HAL_RTC_SetTime+0x134>)
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2200      	movs	r2, #0
 8006e96:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 f99d 	bl	80071dc <RTC_ByteToBcd2>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	785b      	ldrb	r3, [r3, #1]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 f996 	bl	80071dc <RTC_ByteToBcd2>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006eb4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	789b      	ldrb	r3, [r3, #2]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 f98e 	bl	80071dc <RTC_ByteToBcd2>
 8006ec0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ec2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	78db      	ldrb	r3, [r3, #3]
 8006eca:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]
 8006ed0:	e017      	b.n	8006f02 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006ed2:	4b23      	ldr	r3, [pc, #140]	@ (8006f60 <HAL_RTC_SetTime+0x134>)
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d102      	bne.n	8006ee4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	785b      	ldrb	r3, [r3, #1]
 8006eee:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006ef0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ef6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	78db      	ldrb	r3, [r3, #3]
 8006efc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8006f02:	4a17      	ldr	r2, [pc, #92]	@ (8006f60 <HAL_RTC_SetTime+0x134>)
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006f0a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006f0e:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8006f10:	4b13      	ldr	r3, [pc, #76]	@ (8006f60 <HAL_RTC_SetTime+0x134>)
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	4a12      	ldr	r2, [pc, #72]	@ (8006f60 <HAL_RTC_SetTime+0x134>)
 8006f16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f1a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8006f1c:	4b10      	ldr	r3, [pc, #64]	@ (8006f60 <HAL_RTC_SetTime+0x134>)
 8006f1e:	699a      	ldr	r2, [r3, #24]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	68d9      	ldr	r1, [r3, #12]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	490d      	ldr	r1, [pc, #52]	@ (8006f60 <HAL_RTC_SetTime+0x134>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f915 	bl	8007160 <RTC_ExitInitMode>
 8006f36:	4603      	mov	r3, r0
 8006f38:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f3a:	4b09      	ldr	r3, [pc, #36]	@ (8006f60 <HAL_RTC_SetTime+0x134>)
 8006f3c:	22ff      	movs	r2, #255	@ 0xff
 8006f3e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006f40:	7cfb      	ldrb	r3, [r7, #19]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d103      	bne.n	8006f4e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8006f56:	7cfb      	ldrb	r3, [r7, #19]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd90      	pop	{r4, r7, pc}
 8006f60:	46007800 	.word	0x46007800

08006f64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d101      	bne.n	8006f7e <HAL_RTC_SetDate+0x1a>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	e071      	b.n	8007062 <HAL_RTC_SetDate+0xfe>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10e      	bne.n	8006fb2 <HAL_RTC_SetDate+0x4e>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	785b      	ldrb	r3, [r3, #1]
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d008      	beq.n	8006fb2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	f023 0310 	bic.w	r3, r3, #16
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	330a      	adds	r3, #10
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d11c      	bne.n	8006ff2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	78db      	ldrb	r3, [r3, #3]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 f90d 	bl	80071dc <RTC_ByteToBcd2>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	785b      	ldrb	r3, [r3, #1]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 f906 	bl	80071dc <RTC_ByteToBcd2>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006fd4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	789b      	ldrb	r3, [r3, #2]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f8fe 	bl	80071dc <RTC_ByteToBcd2>
 8006fe0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006fe2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006fec:	4313      	orrs	r3, r2
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	e00e      	b.n	8007010 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	78db      	ldrb	r3, [r3, #3]
 8006ff6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	785b      	ldrb	r3, [r3, #1]
 8006ffc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006ffe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007004:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800700c:	4313      	orrs	r3, r2
 800700e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007010:	4b16      	ldr	r3, [pc, #88]	@ (800706c <HAL_RTC_SetDate+0x108>)
 8007012:	22ca      	movs	r2, #202	@ 0xca
 8007014:	625a      	str	r2, [r3, #36]	@ 0x24
 8007016:	4b15      	ldr	r3, [pc, #84]	@ (800706c <HAL_RTC_SetDate+0x108>)
 8007018:	2253      	movs	r2, #83	@ 0x53
 800701a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 f863 	bl	80070e8 <RTC_EnterInitMode>
 8007022:	4603      	mov	r3, r0
 8007024:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007026:	7cfb      	ldrb	r3, [r7, #19]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10b      	bne.n	8007044 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800702c:	4a0f      	ldr	r2, [pc, #60]	@ (800706c <HAL_RTC_SetDate+0x108>)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007034:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007038:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f890 	bl	8007160 <RTC_ExitInitMode>
 8007040:	4603      	mov	r3, r0
 8007042:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007044:	4b09      	ldr	r3, [pc, #36]	@ (800706c <HAL_RTC_SetDate+0x108>)
 8007046:	22ff      	movs	r2, #255	@ 0xff
 8007048:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800704a:	7cfb      	ldrb	r3, [r7, #19]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d103      	bne.n	8007058 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8007060:	7cfb      	ldrb	r3, [r7, #19]
}
 8007062:	4618      	mov	r0, r3
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	bd90      	pop	{r4, r7, pc}
 800706a:	bf00      	nop
 800706c:	46007800 	.word	0x46007800

08007070 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A secure secure callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the secure secure callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800708c:	4b15      	ldr	r3, [pc, #84]	@ (80070e4 <HAL_RTC_WaitForSynchro+0x60>)
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	4a14      	ldr	r2, [pc, #80]	@ (80070e4 <HAL_RTC_WaitForSynchro+0x60>)
 8007092:	f023 0320 	bic.w	r3, r3, #32
 8007096:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007098:	f7fb f938 	bl	800230c <HAL_GetTick>
 800709c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800709e:	e013      	b.n	80070c8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80070a0:	f7fb f934 	bl	800230c <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070ae:	d90b      	bls.n	80070c8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80070b0:	4b0c      	ldr	r3, [pc, #48]	@ (80070e4 <HAL_RTC_WaitForSynchro+0x60>)
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10c      	bne.n	80070d6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2203      	movs	r2, #3
 80070c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e008      	b.n	80070da <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80070c8:	4b06      	ldr	r3, [pc, #24]	@ (80070e4 <HAL_RTC_WaitForSynchro+0x60>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0e5      	beq.n	80070a0 <HAL_RTC_WaitForSynchro+0x1c>
 80070d4:	e000      	b.n	80070d8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 80070d6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	46007800 	.word	0x46007800

080070e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80070f4:	4b19      	ldr	r3, [pc, #100]	@ (800715c <RTC_EnterInitMode+0x74>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d128      	bne.n	8007152 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007100:	4b16      	ldr	r3, [pc, #88]	@ (800715c <RTC_EnterInitMode+0x74>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	4a15      	ldr	r2, [pc, #84]	@ (800715c <RTC_EnterInitMode+0x74>)
 8007106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800710a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800710c:	f7fb f8fe 	bl	800230c <HAL_GetTick>
 8007110:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007112:	e013      	b.n	800713c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007114:	f7fb f8fa 	bl	800230c <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007122:	d90b      	bls.n	800713c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007124:	4b0d      	ldr	r3, [pc, #52]	@ (800715c <RTC_EnterInitMode+0x74>)
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10f      	bne.n	8007150 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2203      	movs	r2, #3
 8007138:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800713c:	4b07      	ldr	r3, [pc, #28]	@ (800715c <RTC_EnterInitMode+0x74>)
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	d104      	bne.n	8007152 <RTC_EnterInitMode+0x6a>
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	2b03      	cmp	r3, #3
 800714c:	d1e2      	bne.n	8007114 <RTC_EnterInitMode+0x2c>
 800714e:	e000      	b.n	8007152 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8007150:	bf00      	nop
        }
      }
    }
  }

  return status;
 8007152:	7bfb      	ldrb	r3, [r7, #15]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	46007800 	.word	0x46007800

08007160 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800716c:	4b1a      	ldr	r3, [pc, #104]	@ (80071d8 <RTC_ExitInitMode+0x78>)
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	4a19      	ldr	r2, [pc, #100]	@ (80071d8 <RTC_ExitInitMode+0x78>)
 8007172:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007176:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007178:	4b17      	ldr	r3, [pc, #92]	@ (80071d8 <RTC_ExitInitMode+0x78>)
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10c      	bne.n	800719e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff ff7d 	bl	8007084 <HAL_RTC_WaitForSynchro>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d01e      	beq.n	80071ce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2203      	movs	r2, #3
 8007194:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	73fb      	strb	r3, [r7, #15]
 800719c:	e017      	b.n	80071ce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800719e:	4b0e      	ldr	r3, [pc, #56]	@ (80071d8 <RTC_ExitInitMode+0x78>)
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	4a0d      	ldr	r2, [pc, #52]	@ (80071d8 <RTC_ExitInitMode+0x78>)
 80071a4:	f023 0320 	bic.w	r3, r3, #32
 80071a8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7ff ff6a 	bl	8007084 <HAL_RTC_WaitForSynchro>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2203      	movs	r2, #3
 80071ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071c2:	4b05      	ldr	r3, [pc, #20]	@ (80071d8 <RTC_ExitInitMode+0x78>)
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	4a04      	ldr	r2, [pc, #16]	@ (80071d8 <RTC_ExitInitMode+0x78>)
 80071c8:	f043 0320 	orr.w	r3, r3, #32
 80071cc:	6193      	str	r3, [r2, #24]
  }
  return status;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	46007800 	.word	0x46007800

080071dc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80071ea:	79fb      	ldrb	r3, [r7, #7]
 80071ec:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80071ee:	e005      	b.n	80071fc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80071f6:	7afb      	ldrb	r3, [r7, #11]
 80071f8:	3b0a      	subs	r3, #10
 80071fa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80071fc:	7afb      	ldrb	r3, [r7, #11]
 80071fe:	2b09      	cmp	r3, #9
 8007200:	d8f6      	bhi.n	80071f0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	b2db      	uxtb	r3, r3
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	b2da      	uxtb	r2, r3
 800720a:	7afb      	ldrb	r3, [r7, #11]
 800720c:	4313      	orrs	r3, r2
 800720e:	b2db      	uxtb	r3, r3
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_RTCEx_SSRUEventCallback>:
  * @brief  SSR underflow callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_SSRUEventCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_RTCEx_Tamper4EventCallback>:
  * @brief  Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper4EventCallback(RTC_HandleTypeDef *hrtc)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper4EventCallback could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_RTCEx_Tamper5EventCallback>:
  * @brief  Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper5EventCallback could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_RTCEx_Tamper6EventCallback>:
  * @brief  Tamper 6 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper6EventCallback(RTC_HandleTypeDef *hrtc)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper6EventCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_RTCEx_Tamper7EventCallback>:
  * @brief  Tamper 7 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper7EventCallback(RTC_HandleTypeDef *hrtc)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper7EventCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_RTCEx_Tamper8EventCallback>:
  * @brief  Tamper 8 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper8EventCallback(RTC_HandleTypeDef *hrtc)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper8EventCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_RTCEx_InternalTamper1EventCallback>:
  * @brief  Internal Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper1EventCallback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_RTCEx_InternalTamper2EventCallback>:
  * @brief  Internal Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper2EventCallback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_RTCEx_InternalTamper3EventCallback>:
  * @brief  Internal Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper3EventCallback could be implemented in the user file
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_RTCEx_InternalTamper5EventCallback>:
  * @brief  Internal Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper5EventCallback could be implemented in the user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_RTCEx_InternalTamper6EventCallback>:
  * @brief  Internal Tamper 6 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper6EventCallback(RTC_HandleTypeDef *hrtc)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper6EventCallback could be implemented in the user file
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_RTCEx_InternalTamper7EventCallback>:
  * @brief  Internal Tamper 7 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper7EventCallback(RTC_HandleTypeDef *hrtc)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper7EventCallback could be implemented in the user file
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_RTCEx_InternalTamper8EventCallback>:
  * @brief  Internal Tamper 8 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper8EventCallback(RTC_HandleTypeDef *hrtc)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper8EventCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_RTCEx_InternalTamper9EventCallback>:
  * @brief  Internal Tamper 9 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper9EventCallback(RTC_HandleTypeDef *hrtc)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper9EventCallback could be implemented in the user file
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_RTCEx_InternalTamper11EventCallback>:
  * @brief  Internal Tamper 11 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper11EventCallback(RTC_HandleTypeDef *hrtc)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper11EventCallback could be implemented in the user file
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_RTCEx_InternalTamper12EventCallback>:
  * @brief  Internal Tamper 12 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper12EventCallback(RTC_HandleTypeDef *hrtc)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper12EventCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_RTCEx_InternalTamper13EventCallback>:
  * @brief  Internal Tamper 13 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper13EventCallback(RTC_HandleTypeDef *hrtc)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper13EventCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	4910      	ldr	r1, [pc, #64]	@ (800743c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	431a      	orrs	r2, r3
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	490c      	ldr	r1, [pc, #48]	@ (8007440 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8007410:	4313      	orrs	r3, r2
 8007412:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8007414:	4b0a      	ldr	r3, [pc, #40]	@ (8007440 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	6919      	ldr	r1, [r3, #16]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	041b      	lsls	r3, r3, #16
 8007426:	430b      	orrs	r3, r1
 8007428:	4905      	ldr	r1, [pc, #20]	@ (8007440 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800742a:	4313      	orrs	r3, r2
 800742c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	46007800 	.word	0x46007800
 8007440:	46007c00 	.word	0x46007c00

08007444 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e14a      	b.n	80076ec <HAL_SPI_Init+0x2a8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a64      	ldr	r2, [pc, #400]	@ (80075ec <HAL_SPI_Init+0x1a8>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d004      	beq.n	800746a <HAL_SPI_Init+0x26>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a62      	ldr	r2, [pc, #392]	@ (80075f0 <HAL_SPI_Init+0x1ac>)
 8007466:	4293      	cmp	r3, r2
 8007468:	e000      	b.n	800746c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800746a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a5d      	ldr	r2, [pc, #372]	@ (80075ec <HAL_SPI_Init+0x1a8>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d004      	beq.n	8007486 <HAL_SPI_Init+0x42>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a5b      	ldr	r2, [pc, #364]	@ (80075f0 <HAL_SPI_Init+0x1ac>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d105      	bne.n	8007492 <HAL_SPI_Init+0x4e>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	2b0f      	cmp	r3, #15
 800748c:	d901      	bls.n	8007492 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e12c      	b.n	80076ec <HAL_SPI_Init+0x2a8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fc24 	bl	8007ce0 <SPI_GetPacketSize>
 8007498:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a53      	ldr	r2, [pc, #332]	@ (80075ec <HAL_SPI_Init+0x1a8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <HAL_SPI_Init+0x6a>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a51      	ldr	r2, [pc, #324]	@ (80075f0 <HAL_SPI_Init+0x1ac>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d102      	bne.n	80074b4 <HAL_SPI_Init+0x70>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	d816      	bhi.n	80074e2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80074b8:	4a4e      	ldr	r2, [pc, #312]	@ (80075f4 <HAL_SPI_Init+0x1b0>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00e      	beq.n	80074dc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a4d      	ldr	r2, [pc, #308]	@ (80075f8 <HAL_SPI_Init+0x1b4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d009      	beq.n	80074dc <HAL_SPI_Init+0x98>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a4b      	ldr	r2, [pc, #300]	@ (80075fc <HAL_SPI_Init+0x1b8>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d004      	beq.n	80074dc <HAL_SPI_Init+0x98>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a4a      	ldr	r2, [pc, #296]	@ (8007600 <HAL_SPI_Init+0x1bc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d104      	bne.n	80074e6 <HAL_SPI_Init+0xa2>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b10      	cmp	r3, #16
 80074e0:	d901      	bls.n	80074e6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e102      	b.n	80076ec <HAL_SPI_Init+0x2a8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d135      	bne.n	800755e <HAL_SPI_Init+0x11a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a41      	ldr	r2, [pc, #260]	@ (8007604 <HAL_SPI_Init+0x1c0>)
 80074fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a40      	ldr	r2, [pc, #256]	@ (8007608 <HAL_SPI_Init+0x1c4>)
 8007506:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a3f      	ldr	r2, [pc, #252]	@ (800760c <HAL_SPI_Init+0x1c8>)
 800750e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a3e      	ldr	r2, [pc, #248]	@ (8007610 <HAL_SPI_Init+0x1cc>)
 8007516:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a3d      	ldr	r2, [pc, #244]	@ (8007614 <HAL_SPI_Init+0x1d0>)
 800751e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a3c      	ldr	r2, [pc, #240]	@ (8007618 <HAL_SPI_Init+0x1d4>)
 8007526:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a3b      	ldr	r2, [pc, #236]	@ (800761c <HAL_SPI_Init+0x1d8>)
 800752e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a3a      	ldr	r2, [pc, #232]	@ (8007620 <HAL_SPI_Init+0x1dc>)
 8007536:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    hspi->SuspendCallback      = HAL_SPI_SuspendCallback;      /* Legacy weak SuspendCallback      */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a39      	ldr	r2, [pc, #228]	@ (8007624 <HAL_SPI_Init+0x1e0>)
 800753e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

    if (hspi->MspInitCallback == NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007548:	2b00      	cmp	r3, #0
 800754a:	d103      	bne.n	8007554 <HAL_SPI_Init+0x110>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a36      	ldr	r2, [pc, #216]	@ (8007628 <HAL_SPI_Init+0x1e4>)
 8007550:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2202      	movs	r2, #2
 8007562:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0201 	bic.w	r2, r2, #1
 8007574:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007580:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800758a:	d119      	bne.n	80075c0 <HAL_SPI_Init+0x17c>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007594:	d103      	bne.n	800759e <HAL_SPI_Init+0x15a>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800759a:	2b00      	cmp	r3, #0
 800759c:	d008      	beq.n	80075b0 <HAL_SPI_Init+0x16c>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10c      	bne.n	80075c0 <HAL_SPI_Init+0x17c>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80075aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075ae:	d107      	bne.n	80075c0 <HAL_SPI_Init+0x17c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075be:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d02f      	beq.n	800762c <HAL_SPI_Init+0x1e8>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	2b06      	cmp	r3, #6
 80075d2:	d92b      	bls.n	800762c <HAL_SPI_Init+0x1e8>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	e027      	b.n	800763c <HAL_SPI_Init+0x1f8>
 80075ec:	46002000 	.word	0x46002000
 80075f0:	56002000 	.word	0x56002000
 80075f4:	40013000 	.word	0x40013000
 80075f8:	50013000 	.word	0x50013000
 80075fc:	40003800 	.word	0x40003800
 8007600:	50003800 	.word	0x50003800
 8007604:	08007ab5 	.word	0x08007ab5
 8007608:	08007ac9 	.word	0x08007ac9
 800760c:	08007add 	.word	0x08007add
 8007610:	08007af1 	.word	0x08007af1
 8007614:	08007b05 	.word	0x08007b05
 8007618:	08007b19 	.word	0x08007b19
 800761c:	08007b2d 	.word	0x08007b2d
 8007620:	08007b41 	.word	0x08007b41
 8007624:	08007b55 	.word	0x08007b55
 8007628:	08001279 	.word	0x08001279
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800763a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	69da      	ldr	r2, [r3, #28]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007644:	431a      	orrs	r2, r3
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800764e:	ea42 0103 	orr.w	r1, r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766c:	431a      	orrs	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	431a      	orrs	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800769c:	431a      	orrs	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a8:	ea42 0103 	orr.w	r1, r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <HAL_SPI_Init+0x296>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08a      	sub	sp, #40	@ 0x28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800770c:	6a3a      	ldr	r2, [r7, #32]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	4013      	ands	r3, r2
 8007712:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800771c:	2300      	movs	r3, #0
 800771e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007726:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3330      	adds	r3, #48	@ 0x30
 800772e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007736:	2b00      	cmp	r3, #0
 8007738:	d012      	beq.n	8007760 <HAL_SPI_IRQHandler+0x6c>
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00d      	beq.n	8007760 <HAL_SPI_IRQHandler+0x6c>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007752:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	4798      	blx	r3
#else
    HAL_SPI_SuspendCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800775e:	e1a4      	b.n	8007aaa <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d113      	bne.n	8007792 <HAL_SPI_IRQHandler+0x9e>
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	f003 0320 	and.w	r3, r3, #32
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10e      	bne.n	8007792 <HAL_SPI_IRQHandler+0x9e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <HAL_SPI_IRQHandler+0x9e>
  {
    hspi->TxISR(hspi);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	4798      	blx	r3
    handled = 1UL;
 800778e:	2301      	movs	r3, #1
 8007790:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10f      	bne.n	80077bc <HAL_SPI_IRQHandler+0xc8>
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <HAL_SPI_IRQHandler+0xc8>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d105      	bne.n	80077bc <HAL_SPI_IRQHandler+0xc8>
  {
    hspi->RxISR(hspi);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	4798      	blx	r3
    handled = 1UL;
 80077b8:	2301      	movs	r3, #1
 80077ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f003 0320 	and.w	r3, r3, #32
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10f      	bne.n	80077e6 <HAL_SPI_IRQHandler+0xf2>
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00a      	beq.n	80077e6 <HAL_SPI_IRQHandler+0xf2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <HAL_SPI_IRQHandler+0xf2>
  {
    hspi->TxISR(hspi);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
    handled = 1UL;
 80077e2:	2301      	movs	r3, #1
 80077e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 80077e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f040 8159 	bne.w	8007aa0 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8093 	beq.w	8007920 <HAL_SPI_IRQHandler+0x22c>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	699a      	ldr	r2, [r3, #24]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f042 0208 	orr.w	r2, r2, #8
 8007808:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	699a      	ldr	r2, [r3, #24]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0210 	orr.w	r2, r2, #16
 8007818:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	699a      	ldr	r2, [r3, #24]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007828:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0208 	bic.w	r2, r2, #8
 8007838:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d13d      	bne.n	80078c4 <HAL_SPI_IRQHandler+0x1d0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007848:	e036      	b.n	80078b8 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	2b0f      	cmp	r3, #15
 8007850:	d90b      	bls.n	800786a <HAL_SPI_IRQHandler+0x176>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800785a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800785c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007862:	1d1a      	adds	r2, r3, #4
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007868:	e01d      	b.n	80078a6 <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	2b07      	cmp	r3, #7
 8007870:	d90b      	bls.n	800788a <HAL_SPI_IRQHandler+0x196>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	8812      	ldrh	r2, [r2, #0]
 800787a:	b292      	uxth	r2, r2
 800787c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007882:	1c9a      	adds	r2, r3, #2
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007888:	e00d      	b.n	80078a6 <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007896:	7812      	ldrb	r2, [r2, #0]
 8007898:	b2d2      	uxtb	r2, r2
 800789a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80078be:	b29b      	uxth	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1c2      	bne.n	800784a <HAL_SPI_IRQHandler+0x156>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f96b 	bl	8007ba0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <HAL_SPI_IRQHandler+0x1f4>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80078e6:	e0e0      	b.n	8007aaa <HAL_SPI_IRQHandler+0x3b6>
    }

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80078e8:	7cfb      	ldrb	r3, [r7, #19]
 80078ea:	2b05      	cmp	r3, #5
 80078ec:	d105      	bne.n	80078fa <HAL_SPI_IRQHandler+0x206>
    {
      hspi->TxRxCpltCallback(hspi);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	4798      	blx	r3
    else
    {
      /* End of the appropriate call */
    }

    return;
 80078f8:	e0d4      	b.n	8007aa4 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80078fa:	7cfb      	ldrb	r3, [r7, #19]
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d105      	bne.n	800790c <HAL_SPI_IRQHandler+0x218>
      hspi->RxCpltCallback(hspi);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
    return;
 800790a:	e0cb      	b.n	8007aa4 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800790c:	7cfb      	ldrb	r3, [r7, #19]
 800790e:	2b03      	cmp	r3, #3
 8007910:	f040 80c8 	bne.w	8007aa4 <HAL_SPI_IRQHandler+0x3b0>
      hspi->TxCpltCallback(hspi);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
    return;
 800791e:	e0c1      	b.n	8007aa4 <HAL_SPI_IRQHandler+0x3b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 80bf 	beq.w	8007aaa <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00f      	beq.n	8007956 <HAL_SPI_IRQHandler+0x262>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800793c:	f043 0204 	orr.w	r2, r3, #4
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	699a      	ldr	r2, [r3, #24]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007954:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00f      	beq.n	8007980 <HAL_SPI_IRQHandler+0x28c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007966:	f043 0201 	orr.w	r2, r3, #1
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800797e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00f      	beq.n	80079aa <HAL_SPI_IRQHandler+0x2b6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007990:	f043 0208 	orr.w	r2, r3, #8
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	699a      	ldr	r2, [r3, #24]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079a8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	f003 0320 	and.w	r3, r3, #32
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00f      	beq.n	80079d4 <HAL_SPI_IRQHandler+0x2e0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	699a      	ldr	r2, [r3, #24]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0220 	orr.w	r2, r2, #32
 80079d2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d064      	beq.n	8007aa8 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0201 	bic.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6812      	ldr	r2, [r2, #0]
 80079f8:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 80079fc:	f023 0303 	bic.w	r3, r3, #3
 8007a00:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007a08:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007a0c:	d13e      	bne.n	8007a8c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007a1c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d015      	beq.n	8007a54 <HAL_SPI_IRQHandler+0x360>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a2e:	4a20      	ldr	r2, [pc, #128]	@ (8007ab0 <HAL_SPI_IRQHandler+0x3bc>)
 8007a30:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fa fed7 	bl	80027ec <HAL_DMA_Abort_IT>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d007      	beq.n	8007a54 <HAL_SPI_IRQHandler+0x360>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d024      	beq.n	8007aa8 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a64:	4a12      	ldr	r2, [pc, #72]	@ (8007ab0 <HAL_SPI_IRQHandler+0x3bc>)
 8007a66:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fa febc 	bl	80027ec <HAL_DMA_Abort_IT>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d016      	beq.n	8007aa8 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007a8a:	e00d      	b.n	8007aa8 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        hspi->ErrorCallback(hspi);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	4798      	blx	r3
    return;
 8007a9e:	e003      	b.n	8007aa8 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8007aa0:	bf00      	nop
 8007aa2:	e002      	b.n	8007aaa <HAL_SPI_IRQHandler+0x3b6>
    return;
 8007aa4:	bf00      	nop
 8007aa6:	e000      	b.n	8007aaa <HAL_SPI_IRQHandler+0x3b6>
    return;
 8007aa8:	bf00      	nop
  }
}
 8007aaa:	3728      	adds	r7, #40	@ 0x28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	08007b69 	.word	0x08007b69

08007ab4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b74:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b98:	bf00      	nop
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0208 	orr.w	r2, r2, #8
 8007bbe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0210 	orr.w	r2, r2, #16
 8007bce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0201 	bic.w	r2, r2, #1
 8007bde:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007c02:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d014      	beq.n	8007c3a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f003 0320 	and.w	r3, r3, #32
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00f      	beq.n	8007c3a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c20:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	699a      	ldr	r2, [r3, #24]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0220 	orr.w	r2, r2, #32
 8007c38:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d014      	beq.n	8007c70 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00f      	beq.n	8007c70 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c56:	f043 0204 	orr.w	r2, r3, #4
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699a      	ldr	r2, [r3, #24]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c6e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00f      	beq.n	8007c9a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c80:	f043 0201 	orr.w	r2, r3, #1
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699a      	ldr	r2, [r3, #24]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c98:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00f      	beq.n	8007cc4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007caa:	f043 0208 	orr.w	r2, r3, #8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	699a      	ldr	r2, [r3, #24]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007cc2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8007cd4:	bf00      	nop
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cec:	095b      	lsrs	r3, r3, #5
 8007cee:	3301      	adds	r3, #1
 8007cf0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	3307      	adds	r3, #7
 8007cfe:	08db      	lsrs	r3, r3, #3
 8007d00:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	fb02 f303 	mul.w	r3, r2, r3
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d12e      	bne.n	8007d8a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8007d36:	2302      	movs	r3, #2
 8007d38:	e028      	b.n	8007d8c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 0201 	bic.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8007d66:	ea42 0103 	orr.w	r1, r2, r3
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	e000      	b.n	8007d8c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
  }
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e054      	b.n	8007e54 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d111      	bne.n	8007dda <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f001 fab4 	bl	800932c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d102      	bne.n	8007dd2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a23      	ldr	r2, [pc, #140]	@ (8007e5c <HAL_TIM_Base_Init+0xc4>)
 8007dd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2202      	movs	r2, #2
 8007dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3304      	adds	r3, #4
 8007dea:	4619      	mov	r1, r3
 8007dec:	4610      	mov	r0, r2
 8007dee:	f000 fd25 	bl	800883c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	08001c31 	.word	0x08001c31

08007e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d001      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e072      	b.n	8007f5e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0201 	orr.w	r2, r2, #1
 8007e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a35      	ldr	r2, [pc, #212]	@ (8007f6c <HAL_TIM_Base_Start_IT+0x10c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d040      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0xbc>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a34      	ldr	r2, [pc, #208]	@ (8007f70 <HAL_TIM_Base_Start_IT+0x110>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d03b      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0xbc>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eac:	d036      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0xbc>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007eb6:	d031      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0xbc>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8007f74 <HAL_TIM_Base_Start_IT+0x114>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d02c      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0xbc>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8007f78 <HAL_TIM_Base_Start_IT+0x118>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d027      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0xbc>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8007f7c <HAL_TIM_Base_Start_IT+0x11c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d022      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0xbc>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a29      	ldr	r2, [pc, #164]	@ (8007f80 <HAL_TIM_Base_Start_IT+0x120>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d01d      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0xbc>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a27      	ldr	r2, [pc, #156]	@ (8007f84 <HAL_TIM_Base_Start_IT+0x124>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d018      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0xbc>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a26      	ldr	r2, [pc, #152]	@ (8007f88 <HAL_TIM_Base_Start_IT+0x128>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d013      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0xbc>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a24      	ldr	r2, [pc, #144]	@ (8007f8c <HAL_TIM_Base_Start_IT+0x12c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00e      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0xbc>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a23      	ldr	r2, [pc, #140]	@ (8007f90 <HAL_TIM_Base_Start_IT+0x130>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d009      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0xbc>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a21      	ldr	r2, [pc, #132]	@ (8007f94 <HAL_TIM_Base_Start_IT+0x134>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d004      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0xbc>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a20      	ldr	r2, [pc, #128]	@ (8007f98 <HAL_TIM_Base_Start_IT+0x138>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d115      	bne.n	8007f48 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	4b1e      	ldr	r3, [pc, #120]	@ (8007f9c <HAL_TIM_Base_Start_IT+0x13c>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2b06      	cmp	r3, #6
 8007f2c:	d015      	beq.n	8007f5a <HAL_TIM_Base_Start_IT+0xfa>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f34:	d011      	beq.n	8007f5a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f042 0201 	orr.w	r2, r2, #1
 8007f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f46:	e008      	b.n	8007f5a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f042 0201 	orr.w	r2, r2, #1
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	e000      	b.n	8007f5c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	40012c00 	.word	0x40012c00
 8007f70:	50012c00 	.word	0x50012c00
 8007f74:	40000400 	.word	0x40000400
 8007f78:	50000400 	.word	0x50000400
 8007f7c:	40000800 	.word	0x40000800
 8007f80:	50000800 	.word	0x50000800
 8007f84:	40000c00 	.word	0x40000c00
 8007f88:	50000c00 	.word	0x50000c00
 8007f8c:	40013400 	.word	0x40013400
 8007f90:	50013400 	.word	0x50013400
 8007f94:	40014000 	.word	0x40014000
 8007f98:	50014000 	.word	0x50014000
 8007f9c:	00010007 	.word	0x00010007

08007fa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e054      	b.n	800805c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d111      	bne.n	8007fe2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f001 f9b0 	bl	800932c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a23      	ldr	r2, [pc, #140]	@ (8008064 <HAL_TIM_PWM_Init+0xc4>)
 8007fd8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	f000 fc21 	bl	800883c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	08001bb1 	.word	0x08001bb1

08008068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d026      	beq.n	80080d8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d021      	beq.n	80080d8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0202 	mvn.w	r2, #2
 800809c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d005      	beq.n	80080be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	4798      	blx	r3
 80080bc:	e009      	b.n	80080d2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f003 0304 	and.w	r3, r3, #4
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d026      	beq.n	8008130 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d021      	beq.n	8008130 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f06f 0204 	mvn.w	r2, #4
 80080f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2202      	movs	r2, #2
 80080fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008106:	2b00      	cmp	r3, #0
 8008108:	d005      	beq.n	8008116 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
 8008114:	e009      	b.n	800812a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f003 0308 	and.w	r3, r3, #8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d026      	beq.n	8008188 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f003 0308 	and.w	r3, r3, #8
 8008140:	2b00      	cmp	r3, #0
 8008142:	d021      	beq.n	8008188 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f06f 0208 	mvn.w	r2, #8
 800814c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2204      	movs	r2, #4
 8008152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
 800816c:	e009      	b.n	8008182 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f003 0310 	and.w	r3, r3, #16
 800818e:	2b00      	cmp	r3, #0
 8008190:	d026      	beq.n	80081e0 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b00      	cmp	r3, #0
 800819a:	d021      	beq.n	80081e0 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0210 	mvn.w	r2, #16
 80081a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2208      	movs	r2, #8
 80081aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	4798      	blx	r3
 80081c4:	e009      	b.n	80081da <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00e      	beq.n	8008208 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d009      	beq.n	8008208 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f06f 0201 	mvn.w	r2, #1
 80081fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800820e:	2b00      	cmp	r3, #0
 8008210:	d104      	bne.n	800821c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00e      	beq.n	800823a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008222:	2b00      	cmp	r3, #0
 8008224:	d009      	beq.n	800823a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800822e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00e      	beq.n	8008262 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800824a:	2b00      	cmp	r3, #0
 800824c:	d009      	beq.n	8008262 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00e      	beq.n	800828a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008272:	2b00      	cmp	r3, #0
 8008274:	d009      	beq.n	800828a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800827e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	f003 0320 	and.w	r3, r3, #32
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00e      	beq.n	80082b2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b00      	cmp	r3, #0
 800829c:	d009      	beq.n	80082b2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f06f 0220 	mvn.w	r2, #32
 80082a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00e      	beq.n	80082da <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d009      	beq.n	80082da <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80082ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00e      	beq.n	8008302 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d009      	beq.n	8008302 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80082f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00e      	beq.n	800832a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d009      	beq.n	800832a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800831e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00e      	beq.n	8008352 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d009      	beq.n	8008352 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008372:	2b01      	cmp	r3, #1
 8008374:	d101      	bne.n	800837a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008376:	2302      	movs	r3, #2
 8008378:	e0ff      	b.n	800857a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b14      	cmp	r3, #20
 8008386:	f200 80f0 	bhi.w	800856a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800838a:	a201      	add	r2, pc, #4	@ (adr r2, 8008390 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800838c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008390:	080083e5 	.word	0x080083e5
 8008394:	0800856b 	.word	0x0800856b
 8008398:	0800856b 	.word	0x0800856b
 800839c:	0800856b 	.word	0x0800856b
 80083a0:	08008425 	.word	0x08008425
 80083a4:	0800856b 	.word	0x0800856b
 80083a8:	0800856b 	.word	0x0800856b
 80083ac:	0800856b 	.word	0x0800856b
 80083b0:	08008467 	.word	0x08008467
 80083b4:	0800856b 	.word	0x0800856b
 80083b8:	0800856b 	.word	0x0800856b
 80083bc:	0800856b 	.word	0x0800856b
 80083c0:	080084a7 	.word	0x080084a7
 80083c4:	0800856b 	.word	0x0800856b
 80083c8:	0800856b 	.word	0x0800856b
 80083cc:	0800856b 	.word	0x0800856b
 80083d0:	080084e9 	.word	0x080084e9
 80083d4:	0800856b 	.word	0x0800856b
 80083d8:	0800856b 	.word	0x0800856b
 80083dc:	0800856b 	.word	0x0800856b
 80083e0:	08008529 	.word	0x08008529
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68b9      	ldr	r1, [r7, #8]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fb2c 	bl	8008a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0208 	orr.w	r2, r2, #8
 80083fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699a      	ldr	r2, [r3, #24]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0204 	bic.w	r2, r2, #4
 800840e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6999      	ldr	r1, [r3, #24]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	691a      	ldr	r2, [r3, #16]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	619a      	str	r2, [r3, #24]
      break;
 8008422:	e0a5      	b.n	8008570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68b9      	ldr	r1, [r7, #8]
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fbce 	bl	8008bcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	699a      	ldr	r2, [r3, #24]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800843e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	699a      	ldr	r2, [r3, #24]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800844e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6999      	ldr	r1, [r3, #24]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	021a      	lsls	r2, r3, #8
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	619a      	str	r2, [r3, #24]
      break;
 8008464:	e084      	b.n	8008570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68b9      	ldr	r1, [r7, #8]
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fc5d 	bl	8008d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f042 0208 	orr.w	r2, r2, #8
 8008480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69da      	ldr	r2, [r3, #28]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0204 	bic.w	r2, r2, #4
 8008490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69d9      	ldr	r1, [r3, #28]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	691a      	ldr	r2, [r3, #16]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	61da      	str	r2, [r3, #28]
      break;
 80084a4:	e064      	b.n	8008570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 fceb 	bl	8008e88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	69da      	ldr	r2, [r3, #28]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69da      	ldr	r2, [r3, #28]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	69d9      	ldr	r1, [r3, #28]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	021a      	lsls	r2, r3, #8
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	61da      	str	r2, [r3, #28]
      break;
 80084e6:	e043      	b.n	8008570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fd7a 	bl	8008fe8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0208 	orr.w	r2, r2, #8
 8008502:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0204 	bic.w	r2, r2, #4
 8008512:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	691a      	ldr	r2, [r3, #16]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	430a      	orrs	r2, r1
 8008524:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008526:	e023      	b.n	8008570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68b9      	ldr	r1, [r7, #8]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fddc 	bl	80090ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008542:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008552:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	021a      	lsls	r2, r3, #8
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008568:	e002      	b.n	8008570 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	75fb      	strb	r3, [r7, #23]
      break;
 800856e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008578:	7dfb      	ldrb	r3, [r7, #23]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop

08008584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008598:	2b01      	cmp	r3, #1
 800859a:	d101      	bne.n	80085a0 <HAL_TIM_ConfigClockSource+0x1c>
 800859c:	2302      	movs	r3, #2
 800859e:	e0e6      	b.n	800876e <HAL_TIM_ConfigClockSource+0x1ea>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80085be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80085c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a67      	ldr	r2, [pc, #412]	@ (8008778 <HAL_TIM_ConfigClockSource+0x1f4>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	f000 80b1 	beq.w	8008742 <HAL_TIM_ConfigClockSource+0x1be>
 80085e0:	4a65      	ldr	r2, [pc, #404]	@ (8008778 <HAL_TIM_ConfigClockSource+0x1f4>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	f200 80b6 	bhi.w	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 80085e8:	4a64      	ldr	r2, [pc, #400]	@ (800877c <HAL_TIM_ConfigClockSource+0x1f8>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	f000 80a9 	beq.w	8008742 <HAL_TIM_ConfigClockSource+0x1be>
 80085f0:	4a62      	ldr	r2, [pc, #392]	@ (800877c <HAL_TIM_ConfigClockSource+0x1f8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	f200 80ae 	bhi.w	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 80085f8:	4a61      	ldr	r2, [pc, #388]	@ (8008780 <HAL_TIM_ConfigClockSource+0x1fc>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	f000 80a1 	beq.w	8008742 <HAL_TIM_ConfigClockSource+0x1be>
 8008600:	4a5f      	ldr	r2, [pc, #380]	@ (8008780 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008602:	4293      	cmp	r3, r2
 8008604:	f200 80a6 	bhi.w	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 8008608:	4a5e      	ldr	r2, [pc, #376]	@ (8008784 <HAL_TIM_ConfigClockSource+0x200>)
 800860a:	4293      	cmp	r3, r2
 800860c:	f000 8099 	beq.w	8008742 <HAL_TIM_ConfigClockSource+0x1be>
 8008610:	4a5c      	ldr	r2, [pc, #368]	@ (8008784 <HAL_TIM_ConfigClockSource+0x200>)
 8008612:	4293      	cmp	r3, r2
 8008614:	f200 809e 	bhi.w	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 8008618:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800861c:	f000 8091 	beq.w	8008742 <HAL_TIM_ConfigClockSource+0x1be>
 8008620:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008624:	f200 8096 	bhi.w	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 8008628:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800862c:	f000 8089 	beq.w	8008742 <HAL_TIM_ConfigClockSource+0x1be>
 8008630:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008634:	f200 808e 	bhi.w	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 8008638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800863c:	d03e      	beq.n	80086bc <HAL_TIM_ConfigClockSource+0x138>
 800863e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008642:	f200 8087 	bhi.w	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 8008646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800864a:	f000 8086 	beq.w	800875a <HAL_TIM_ConfigClockSource+0x1d6>
 800864e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008652:	d87f      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 8008654:	2b70      	cmp	r3, #112	@ 0x70
 8008656:	d01a      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x10a>
 8008658:	2b70      	cmp	r3, #112	@ 0x70
 800865a:	d87b      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 800865c:	2b60      	cmp	r3, #96	@ 0x60
 800865e:	d050      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x17e>
 8008660:	2b60      	cmp	r3, #96	@ 0x60
 8008662:	d877      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 8008664:	2b50      	cmp	r3, #80	@ 0x50
 8008666:	d03c      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0x15e>
 8008668:	2b50      	cmp	r3, #80	@ 0x50
 800866a:	d873      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 800866c:	2b40      	cmp	r3, #64	@ 0x40
 800866e:	d058      	beq.n	8008722 <HAL_TIM_ConfigClockSource+0x19e>
 8008670:	2b40      	cmp	r3, #64	@ 0x40
 8008672:	d86f      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 8008674:	2b30      	cmp	r3, #48	@ 0x30
 8008676:	d064      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x1be>
 8008678:	2b30      	cmp	r3, #48	@ 0x30
 800867a:	d86b      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 800867c:	2b20      	cmp	r3, #32
 800867e:	d060      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x1be>
 8008680:	2b20      	cmp	r3, #32
 8008682:	d867      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
 8008684:	2b00      	cmp	r3, #0
 8008686:	d05c      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x1be>
 8008688:	2b10      	cmp	r3, #16
 800868a:	d05a      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x1be>
 800868c:	e062      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800869e:	f000 fe25 	bl	80092ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	609a      	str	r2, [r3, #8]
      break;
 80086ba:	e04f      	b.n	800875c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086cc:	f000 fe0e 	bl	80092ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	689a      	ldr	r2, [r3, #8]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086de:	609a      	str	r2, [r3, #8]
      break;
 80086e0:	e03c      	b.n	800875c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ee:	461a      	mov	r2, r3
 80086f0:	f000 fd80 	bl	80091f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2150      	movs	r1, #80	@ 0x50
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fdd9 	bl	80092b2 <TIM_ITRx_SetConfig>
      break;
 8008700:	e02c      	b.n	800875c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800870e:	461a      	mov	r2, r3
 8008710:	f000 fd9f 	bl	8009252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2160      	movs	r1, #96	@ 0x60
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fdc9 	bl	80092b2 <TIM_ITRx_SetConfig>
      break;
 8008720:	e01c      	b.n	800875c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800872e:	461a      	mov	r2, r3
 8008730:	f000 fd60 	bl	80091f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2140      	movs	r1, #64	@ 0x40
 800873a:	4618      	mov	r0, r3
 800873c:	f000 fdb9 	bl	80092b2 <TIM_ITRx_SetConfig>
      break;
 8008740:	e00c      	b.n	800875c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4619      	mov	r1, r3
 800874c:	4610      	mov	r0, r2
 800874e:	f000 fdb0 	bl	80092b2 <TIM_ITRx_SetConfig>
      break;
 8008752:	e003      	b.n	800875c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	73fb      	strb	r3, [r7, #15]
      break;
 8008758:	e000      	b.n	800875c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800875a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	00100070 	.word	0x00100070
 800877c:	00100040 	.word	0x00100040
 8008780:	00100030 	.word	0x00100030
 8008784:	00100020 	.word	0x00100020

08008788 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a6e      	ldr	r2, [pc, #440]	@ (8008a08 <TIM_Base_SetConfig+0x1cc>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d02b      	beq.n	80088ac <TIM_Base_SetConfig+0x70>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a6d      	ldr	r2, [pc, #436]	@ (8008a0c <TIM_Base_SetConfig+0x1d0>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d027      	beq.n	80088ac <TIM_Base_SetConfig+0x70>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008862:	d023      	beq.n	80088ac <TIM_Base_SetConfig+0x70>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800886a:	d01f      	beq.n	80088ac <TIM_Base_SetConfig+0x70>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a68      	ldr	r2, [pc, #416]	@ (8008a10 <TIM_Base_SetConfig+0x1d4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d01b      	beq.n	80088ac <TIM_Base_SetConfig+0x70>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a67      	ldr	r2, [pc, #412]	@ (8008a14 <TIM_Base_SetConfig+0x1d8>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d017      	beq.n	80088ac <TIM_Base_SetConfig+0x70>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a66      	ldr	r2, [pc, #408]	@ (8008a18 <TIM_Base_SetConfig+0x1dc>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d013      	beq.n	80088ac <TIM_Base_SetConfig+0x70>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a65      	ldr	r2, [pc, #404]	@ (8008a1c <TIM_Base_SetConfig+0x1e0>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d00f      	beq.n	80088ac <TIM_Base_SetConfig+0x70>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a64      	ldr	r2, [pc, #400]	@ (8008a20 <TIM_Base_SetConfig+0x1e4>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d00b      	beq.n	80088ac <TIM_Base_SetConfig+0x70>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a63      	ldr	r2, [pc, #396]	@ (8008a24 <TIM_Base_SetConfig+0x1e8>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d007      	beq.n	80088ac <TIM_Base_SetConfig+0x70>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a62      	ldr	r2, [pc, #392]	@ (8008a28 <TIM_Base_SetConfig+0x1ec>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d003      	beq.n	80088ac <TIM_Base_SetConfig+0x70>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a61      	ldr	r2, [pc, #388]	@ (8008a2c <TIM_Base_SetConfig+0x1f0>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d108      	bne.n	80088be <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a51      	ldr	r2, [pc, #324]	@ (8008a08 <TIM_Base_SetConfig+0x1cc>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d043      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a50      	ldr	r2, [pc, #320]	@ (8008a0c <TIM_Base_SetConfig+0x1d0>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d03f      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088d4:	d03b      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088dc:	d037      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a4b      	ldr	r2, [pc, #300]	@ (8008a10 <TIM_Base_SetConfig+0x1d4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d033      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a4a      	ldr	r2, [pc, #296]	@ (8008a14 <TIM_Base_SetConfig+0x1d8>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d02f      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a49      	ldr	r2, [pc, #292]	@ (8008a18 <TIM_Base_SetConfig+0x1dc>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d02b      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a48      	ldr	r2, [pc, #288]	@ (8008a1c <TIM_Base_SetConfig+0x1e0>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d027      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a47      	ldr	r2, [pc, #284]	@ (8008a20 <TIM_Base_SetConfig+0x1e4>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d023      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a46      	ldr	r2, [pc, #280]	@ (8008a24 <TIM_Base_SetConfig+0x1e8>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d01f      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a45      	ldr	r2, [pc, #276]	@ (8008a28 <TIM_Base_SetConfig+0x1ec>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d01b      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a44      	ldr	r2, [pc, #272]	@ (8008a2c <TIM_Base_SetConfig+0x1f0>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d017      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a43      	ldr	r2, [pc, #268]	@ (8008a30 <TIM_Base_SetConfig+0x1f4>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d013      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a42      	ldr	r2, [pc, #264]	@ (8008a34 <TIM_Base_SetConfig+0x1f8>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d00f      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a41      	ldr	r2, [pc, #260]	@ (8008a38 <TIM_Base_SetConfig+0x1fc>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00b      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a40      	ldr	r2, [pc, #256]	@ (8008a3c <TIM_Base_SetConfig+0x200>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d007      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a3f      	ldr	r2, [pc, #252]	@ (8008a40 <TIM_Base_SetConfig+0x204>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d003      	beq.n	800894e <TIM_Base_SetConfig+0x112>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a3e      	ldr	r2, [pc, #248]	@ (8008a44 <TIM_Base_SetConfig+0x208>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d108      	bne.n	8008960 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4313      	orrs	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a20      	ldr	r2, [pc, #128]	@ (8008a08 <TIM_Base_SetConfig+0x1cc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d023      	beq.n	80089d4 <TIM_Base_SetConfig+0x198>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a1f      	ldr	r2, [pc, #124]	@ (8008a0c <TIM_Base_SetConfig+0x1d0>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d01f      	beq.n	80089d4 <TIM_Base_SetConfig+0x198>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a24      	ldr	r2, [pc, #144]	@ (8008a28 <TIM_Base_SetConfig+0x1ec>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d01b      	beq.n	80089d4 <TIM_Base_SetConfig+0x198>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a23      	ldr	r2, [pc, #140]	@ (8008a2c <TIM_Base_SetConfig+0x1f0>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d017      	beq.n	80089d4 <TIM_Base_SetConfig+0x198>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a22      	ldr	r2, [pc, #136]	@ (8008a30 <TIM_Base_SetConfig+0x1f4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d013      	beq.n	80089d4 <TIM_Base_SetConfig+0x198>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a21      	ldr	r2, [pc, #132]	@ (8008a34 <TIM_Base_SetConfig+0x1f8>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d00f      	beq.n	80089d4 <TIM_Base_SetConfig+0x198>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a20      	ldr	r2, [pc, #128]	@ (8008a38 <TIM_Base_SetConfig+0x1fc>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d00b      	beq.n	80089d4 <TIM_Base_SetConfig+0x198>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a1f      	ldr	r2, [pc, #124]	@ (8008a3c <TIM_Base_SetConfig+0x200>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d007      	beq.n	80089d4 <TIM_Base_SetConfig+0x198>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a1e      	ldr	r2, [pc, #120]	@ (8008a40 <TIM_Base_SetConfig+0x204>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d003      	beq.n	80089d4 <TIM_Base_SetConfig+0x198>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a1d      	ldr	r2, [pc, #116]	@ (8008a44 <TIM_Base_SetConfig+0x208>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d103      	bne.n	80089dc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	691a      	ldr	r2, [r3, #16]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d105      	bne.n	80089fa <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	f023 0201 	bic.w	r2, r3, #1
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	611a      	str	r2, [r3, #16]
  }
}
 80089fa:	bf00      	nop
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	40012c00 	.word	0x40012c00
 8008a0c:	50012c00 	.word	0x50012c00
 8008a10:	40000400 	.word	0x40000400
 8008a14:	50000400 	.word	0x50000400
 8008a18:	40000800 	.word	0x40000800
 8008a1c:	50000800 	.word	0x50000800
 8008a20:	40000c00 	.word	0x40000c00
 8008a24:	50000c00 	.word	0x50000c00
 8008a28:	40013400 	.word	0x40013400
 8008a2c:	50013400 	.word	0x50013400
 8008a30:	40014000 	.word	0x40014000
 8008a34:	50014000 	.word	0x50014000
 8008a38:	40014400 	.word	0x40014400
 8008a3c:	50014400 	.word	0x50014400
 8008a40:	40014800 	.word	0x40014800
 8008a44:	50014800 	.word	0x50014800

08008a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	f023 0201 	bic.w	r2, r3, #1
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f023 0303 	bic.w	r3, r3, #3
 8008a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f023 0302 	bic.w	r3, r3, #2
 8008a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a40      	ldr	r2, [pc, #256]	@ (8008ba4 <TIM_OC1_SetConfig+0x15c>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d023      	beq.n	8008af0 <TIM_OC1_SetConfig+0xa8>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a3f      	ldr	r2, [pc, #252]	@ (8008ba8 <TIM_OC1_SetConfig+0x160>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d01f      	beq.n	8008af0 <TIM_OC1_SetConfig+0xa8>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a3e      	ldr	r2, [pc, #248]	@ (8008bac <TIM_OC1_SetConfig+0x164>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d01b      	beq.n	8008af0 <TIM_OC1_SetConfig+0xa8>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a3d      	ldr	r2, [pc, #244]	@ (8008bb0 <TIM_OC1_SetConfig+0x168>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d017      	beq.n	8008af0 <TIM_OC1_SetConfig+0xa8>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a3c      	ldr	r2, [pc, #240]	@ (8008bb4 <TIM_OC1_SetConfig+0x16c>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d013      	beq.n	8008af0 <TIM_OC1_SetConfig+0xa8>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a3b      	ldr	r2, [pc, #236]	@ (8008bb8 <TIM_OC1_SetConfig+0x170>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d00f      	beq.n	8008af0 <TIM_OC1_SetConfig+0xa8>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a3a      	ldr	r2, [pc, #232]	@ (8008bbc <TIM_OC1_SetConfig+0x174>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d00b      	beq.n	8008af0 <TIM_OC1_SetConfig+0xa8>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a39      	ldr	r2, [pc, #228]	@ (8008bc0 <TIM_OC1_SetConfig+0x178>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d007      	beq.n	8008af0 <TIM_OC1_SetConfig+0xa8>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a38      	ldr	r2, [pc, #224]	@ (8008bc4 <TIM_OC1_SetConfig+0x17c>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d003      	beq.n	8008af0 <TIM_OC1_SetConfig+0xa8>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a37      	ldr	r2, [pc, #220]	@ (8008bc8 <TIM_OC1_SetConfig+0x180>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d10c      	bne.n	8008b0a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f023 0308 	bic.w	r3, r3, #8
 8008af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f023 0304 	bic.w	r3, r3, #4
 8008b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a25      	ldr	r2, [pc, #148]	@ (8008ba4 <TIM_OC1_SetConfig+0x15c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d023      	beq.n	8008b5a <TIM_OC1_SetConfig+0x112>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a24      	ldr	r2, [pc, #144]	@ (8008ba8 <TIM_OC1_SetConfig+0x160>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d01f      	beq.n	8008b5a <TIM_OC1_SetConfig+0x112>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a23      	ldr	r2, [pc, #140]	@ (8008bac <TIM_OC1_SetConfig+0x164>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d01b      	beq.n	8008b5a <TIM_OC1_SetConfig+0x112>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a22      	ldr	r2, [pc, #136]	@ (8008bb0 <TIM_OC1_SetConfig+0x168>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d017      	beq.n	8008b5a <TIM_OC1_SetConfig+0x112>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a21      	ldr	r2, [pc, #132]	@ (8008bb4 <TIM_OC1_SetConfig+0x16c>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d013      	beq.n	8008b5a <TIM_OC1_SetConfig+0x112>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a20      	ldr	r2, [pc, #128]	@ (8008bb8 <TIM_OC1_SetConfig+0x170>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00f      	beq.n	8008b5a <TIM_OC1_SetConfig+0x112>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8008bbc <TIM_OC1_SetConfig+0x174>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d00b      	beq.n	8008b5a <TIM_OC1_SetConfig+0x112>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a1e      	ldr	r2, [pc, #120]	@ (8008bc0 <TIM_OC1_SetConfig+0x178>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d007      	beq.n	8008b5a <TIM_OC1_SetConfig+0x112>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8008bc4 <TIM_OC1_SetConfig+0x17c>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d003      	beq.n	8008b5a <TIM_OC1_SetConfig+0x112>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a1c      	ldr	r2, [pc, #112]	@ (8008bc8 <TIM_OC1_SetConfig+0x180>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d111      	bne.n	8008b7e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	621a      	str	r2, [r3, #32]
}
 8008b98:	bf00      	nop
 8008b9a:	371c      	adds	r7, #28
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	40012c00 	.word	0x40012c00
 8008ba8:	50012c00 	.word	0x50012c00
 8008bac:	40013400 	.word	0x40013400
 8008bb0:	50013400 	.word	0x50013400
 8008bb4:	40014000 	.word	0x40014000
 8008bb8:	50014000 	.word	0x50014000
 8008bbc:	40014400 	.word	0x40014400
 8008bc0:	50014400 	.word	0x50014400
 8008bc4:	40014800 	.word	0x40014800
 8008bc8:	50014800 	.word	0x50014800

08008bcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	f023 0210 	bic.w	r2, r3, #16
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	021b      	lsls	r3, r3, #8
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f023 0320 	bic.w	r3, r3, #32
 8008c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	011b      	lsls	r3, r3, #4
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a36      	ldr	r2, [pc, #216]	@ (8008d04 <TIM_OC2_SetConfig+0x138>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d00b      	beq.n	8008c48 <TIM_OC2_SetConfig+0x7c>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a35      	ldr	r2, [pc, #212]	@ (8008d08 <TIM_OC2_SetConfig+0x13c>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d007      	beq.n	8008c48 <TIM_OC2_SetConfig+0x7c>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a34      	ldr	r2, [pc, #208]	@ (8008d0c <TIM_OC2_SetConfig+0x140>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d003      	beq.n	8008c48 <TIM_OC2_SetConfig+0x7c>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a33      	ldr	r2, [pc, #204]	@ (8008d10 <TIM_OC2_SetConfig+0x144>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d10d      	bne.n	8008c64 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	011b      	lsls	r3, r3, #4
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a27      	ldr	r2, [pc, #156]	@ (8008d04 <TIM_OC2_SetConfig+0x138>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d023      	beq.n	8008cb4 <TIM_OC2_SetConfig+0xe8>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a26      	ldr	r2, [pc, #152]	@ (8008d08 <TIM_OC2_SetConfig+0x13c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d01f      	beq.n	8008cb4 <TIM_OC2_SetConfig+0xe8>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a25      	ldr	r2, [pc, #148]	@ (8008d0c <TIM_OC2_SetConfig+0x140>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d01b      	beq.n	8008cb4 <TIM_OC2_SetConfig+0xe8>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a24      	ldr	r2, [pc, #144]	@ (8008d10 <TIM_OC2_SetConfig+0x144>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d017      	beq.n	8008cb4 <TIM_OC2_SetConfig+0xe8>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a23      	ldr	r2, [pc, #140]	@ (8008d14 <TIM_OC2_SetConfig+0x148>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d013      	beq.n	8008cb4 <TIM_OC2_SetConfig+0xe8>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a22      	ldr	r2, [pc, #136]	@ (8008d18 <TIM_OC2_SetConfig+0x14c>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d00f      	beq.n	8008cb4 <TIM_OC2_SetConfig+0xe8>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a21      	ldr	r2, [pc, #132]	@ (8008d1c <TIM_OC2_SetConfig+0x150>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d00b      	beq.n	8008cb4 <TIM_OC2_SetConfig+0xe8>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a20      	ldr	r2, [pc, #128]	@ (8008d20 <TIM_OC2_SetConfig+0x154>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d007      	beq.n	8008cb4 <TIM_OC2_SetConfig+0xe8>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8008d24 <TIM_OC2_SetConfig+0x158>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d003      	beq.n	8008cb4 <TIM_OC2_SetConfig+0xe8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a1e      	ldr	r2, [pc, #120]	@ (8008d28 <TIM_OC2_SetConfig+0x15c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d113      	bne.n	8008cdc <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008cba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	621a      	str	r2, [r3, #32]
}
 8008cf6:	bf00      	nop
 8008cf8:	371c      	adds	r7, #28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	40012c00 	.word	0x40012c00
 8008d08:	50012c00 	.word	0x50012c00
 8008d0c:	40013400 	.word	0x40013400
 8008d10:	50013400 	.word	0x50013400
 8008d14:	40014000 	.word	0x40014000
 8008d18:	50014000 	.word	0x50014000
 8008d1c:	40014400 	.word	0x40014400
 8008d20:	50014400 	.word	0x50014400
 8008d24:	40014800 	.word	0x40014800
 8008d28:	50014800 	.word	0x50014800

08008d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f023 0303 	bic.w	r3, r3, #3
 8008d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	021b      	lsls	r3, r3, #8
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a35      	ldr	r2, [pc, #212]	@ (8008e60 <TIM_OC3_SetConfig+0x134>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d00b      	beq.n	8008da6 <TIM_OC3_SetConfig+0x7a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a34      	ldr	r2, [pc, #208]	@ (8008e64 <TIM_OC3_SetConfig+0x138>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d007      	beq.n	8008da6 <TIM_OC3_SetConfig+0x7a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a33      	ldr	r2, [pc, #204]	@ (8008e68 <TIM_OC3_SetConfig+0x13c>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d003      	beq.n	8008da6 <TIM_OC3_SetConfig+0x7a>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a32      	ldr	r2, [pc, #200]	@ (8008e6c <TIM_OC3_SetConfig+0x140>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d10d      	bne.n	8008dc2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	021b      	lsls	r3, r3, #8
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a26      	ldr	r2, [pc, #152]	@ (8008e60 <TIM_OC3_SetConfig+0x134>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d023      	beq.n	8008e12 <TIM_OC3_SetConfig+0xe6>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a25      	ldr	r2, [pc, #148]	@ (8008e64 <TIM_OC3_SetConfig+0x138>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d01f      	beq.n	8008e12 <TIM_OC3_SetConfig+0xe6>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a24      	ldr	r2, [pc, #144]	@ (8008e68 <TIM_OC3_SetConfig+0x13c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d01b      	beq.n	8008e12 <TIM_OC3_SetConfig+0xe6>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a23      	ldr	r2, [pc, #140]	@ (8008e6c <TIM_OC3_SetConfig+0x140>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d017      	beq.n	8008e12 <TIM_OC3_SetConfig+0xe6>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a22      	ldr	r2, [pc, #136]	@ (8008e70 <TIM_OC3_SetConfig+0x144>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d013      	beq.n	8008e12 <TIM_OC3_SetConfig+0xe6>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a21      	ldr	r2, [pc, #132]	@ (8008e74 <TIM_OC3_SetConfig+0x148>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d00f      	beq.n	8008e12 <TIM_OC3_SetConfig+0xe6>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a20      	ldr	r2, [pc, #128]	@ (8008e78 <TIM_OC3_SetConfig+0x14c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00b      	beq.n	8008e12 <TIM_OC3_SetConfig+0xe6>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8008e7c <TIM_OC3_SetConfig+0x150>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d007      	beq.n	8008e12 <TIM_OC3_SetConfig+0xe6>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a1e      	ldr	r2, [pc, #120]	@ (8008e80 <TIM_OC3_SetConfig+0x154>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d003      	beq.n	8008e12 <TIM_OC3_SetConfig+0xe6>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8008e84 <TIM_OC3_SetConfig+0x158>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d113      	bne.n	8008e3a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	011b      	lsls	r3, r3, #4
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	621a      	str	r2, [r3, #32]
}
 8008e54:	bf00      	nop
 8008e56:	371c      	adds	r7, #28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	40012c00 	.word	0x40012c00
 8008e64:	50012c00 	.word	0x50012c00
 8008e68:	40013400 	.word	0x40013400
 8008e6c:	50013400 	.word	0x50013400
 8008e70:	40014000 	.word	0x40014000
 8008e74:	50014000 	.word	0x50014000
 8008e78:	40014400 	.word	0x40014400
 8008e7c:	50014400 	.word	0x50014400
 8008e80:	40014800 	.word	0x40014800
 8008e84:	50014800 	.word	0x50014800

08008e88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b087      	sub	sp, #28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ed6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	031b      	lsls	r3, r3, #12
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a36      	ldr	r2, [pc, #216]	@ (8008fc0 <TIM_OC4_SetConfig+0x138>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d00b      	beq.n	8008f04 <TIM_OC4_SetConfig+0x7c>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a35      	ldr	r2, [pc, #212]	@ (8008fc4 <TIM_OC4_SetConfig+0x13c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d007      	beq.n	8008f04 <TIM_OC4_SetConfig+0x7c>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a34      	ldr	r2, [pc, #208]	@ (8008fc8 <TIM_OC4_SetConfig+0x140>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d003      	beq.n	8008f04 <TIM_OC4_SetConfig+0x7c>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a33      	ldr	r2, [pc, #204]	@ (8008fcc <TIM_OC4_SetConfig+0x144>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d10d      	bne.n	8008f20 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	031b      	lsls	r3, r3, #12
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a27      	ldr	r2, [pc, #156]	@ (8008fc0 <TIM_OC4_SetConfig+0x138>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d023      	beq.n	8008f70 <TIM_OC4_SetConfig+0xe8>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a26      	ldr	r2, [pc, #152]	@ (8008fc4 <TIM_OC4_SetConfig+0x13c>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d01f      	beq.n	8008f70 <TIM_OC4_SetConfig+0xe8>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a25      	ldr	r2, [pc, #148]	@ (8008fc8 <TIM_OC4_SetConfig+0x140>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d01b      	beq.n	8008f70 <TIM_OC4_SetConfig+0xe8>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a24      	ldr	r2, [pc, #144]	@ (8008fcc <TIM_OC4_SetConfig+0x144>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d017      	beq.n	8008f70 <TIM_OC4_SetConfig+0xe8>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a23      	ldr	r2, [pc, #140]	@ (8008fd0 <TIM_OC4_SetConfig+0x148>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d013      	beq.n	8008f70 <TIM_OC4_SetConfig+0xe8>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a22      	ldr	r2, [pc, #136]	@ (8008fd4 <TIM_OC4_SetConfig+0x14c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d00f      	beq.n	8008f70 <TIM_OC4_SetConfig+0xe8>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a21      	ldr	r2, [pc, #132]	@ (8008fd8 <TIM_OC4_SetConfig+0x150>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d00b      	beq.n	8008f70 <TIM_OC4_SetConfig+0xe8>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a20      	ldr	r2, [pc, #128]	@ (8008fdc <TIM_OC4_SetConfig+0x154>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d007      	beq.n	8008f70 <TIM_OC4_SetConfig+0xe8>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a1f      	ldr	r2, [pc, #124]	@ (8008fe0 <TIM_OC4_SetConfig+0x158>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d003      	beq.n	8008f70 <TIM_OC4_SetConfig+0xe8>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8008fe4 <TIM_OC4_SetConfig+0x15c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d113      	bne.n	8008f98 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	019b      	lsls	r3, r3, #6
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	019b      	lsls	r3, r3, #6
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	621a      	str	r2, [r3, #32]
}
 8008fb2:	bf00      	nop
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	40012c00 	.word	0x40012c00
 8008fc4:	50012c00 	.word	0x50012c00
 8008fc8:	40013400 	.word	0x40013400
 8008fcc:	50013400 	.word	0x50013400
 8008fd0:	40014000 	.word	0x40014000
 8008fd4:	50014000 	.word	0x50014000
 8008fd8:	40014400 	.word	0x40014400
 8008fdc:	50014400 	.word	0x50014400
 8008fe0:	40014800 	.word	0x40014800
 8008fe4:	50014800 	.word	0x50014800

08008fe8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b087      	sub	sp, #28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800900e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800901a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800902c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	041b      	lsls	r3, r3, #16
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	4313      	orrs	r3, r2
 8009038:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a21      	ldr	r2, [pc, #132]	@ (80090c4 <TIM_OC5_SetConfig+0xdc>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d023      	beq.n	800908a <TIM_OC5_SetConfig+0xa2>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a20      	ldr	r2, [pc, #128]	@ (80090c8 <TIM_OC5_SetConfig+0xe0>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d01f      	beq.n	800908a <TIM_OC5_SetConfig+0xa2>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a1f      	ldr	r2, [pc, #124]	@ (80090cc <TIM_OC5_SetConfig+0xe4>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d01b      	beq.n	800908a <TIM_OC5_SetConfig+0xa2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a1e      	ldr	r2, [pc, #120]	@ (80090d0 <TIM_OC5_SetConfig+0xe8>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d017      	beq.n	800908a <TIM_OC5_SetConfig+0xa2>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a1d      	ldr	r2, [pc, #116]	@ (80090d4 <TIM_OC5_SetConfig+0xec>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d013      	beq.n	800908a <TIM_OC5_SetConfig+0xa2>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a1c      	ldr	r2, [pc, #112]	@ (80090d8 <TIM_OC5_SetConfig+0xf0>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00f      	beq.n	800908a <TIM_OC5_SetConfig+0xa2>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a1b      	ldr	r2, [pc, #108]	@ (80090dc <TIM_OC5_SetConfig+0xf4>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d00b      	beq.n	800908a <TIM_OC5_SetConfig+0xa2>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a1a      	ldr	r2, [pc, #104]	@ (80090e0 <TIM_OC5_SetConfig+0xf8>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d007      	beq.n	800908a <TIM_OC5_SetConfig+0xa2>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a19      	ldr	r2, [pc, #100]	@ (80090e4 <TIM_OC5_SetConfig+0xfc>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d003      	beq.n	800908a <TIM_OC5_SetConfig+0xa2>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a18      	ldr	r2, [pc, #96]	@ (80090e8 <TIM_OC5_SetConfig+0x100>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d109      	bne.n	800909e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009090:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	021b      	lsls	r3, r3, #8
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	4313      	orrs	r3, r2
 800909c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	621a      	str	r2, [r3, #32]
}
 80090b8:	bf00      	nop
 80090ba:	371c      	adds	r7, #28
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	40012c00 	.word	0x40012c00
 80090c8:	50012c00 	.word	0x50012c00
 80090cc:	40013400 	.word	0x40013400
 80090d0:	50013400 	.word	0x50013400
 80090d4:	40014000 	.word	0x40014000
 80090d8:	50014000 	.word	0x50014000
 80090dc:	40014400 	.word	0x40014400
 80090e0:	50014400 	.word	0x50014400
 80090e4:	40014800 	.word	0x40014800
 80090e8:	50014800 	.word	0x50014800

080090ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a1b      	ldr	r3, [r3, #32]
 8009100:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800911a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800911e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	021b      	lsls	r3, r3, #8
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	4313      	orrs	r3, r2
 800912a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	051b      	lsls	r3, r3, #20
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	4313      	orrs	r3, r2
 800913e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a22      	ldr	r2, [pc, #136]	@ (80091cc <TIM_OC6_SetConfig+0xe0>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d023      	beq.n	8009190 <TIM_OC6_SetConfig+0xa4>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a21      	ldr	r2, [pc, #132]	@ (80091d0 <TIM_OC6_SetConfig+0xe4>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d01f      	beq.n	8009190 <TIM_OC6_SetConfig+0xa4>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a20      	ldr	r2, [pc, #128]	@ (80091d4 <TIM_OC6_SetConfig+0xe8>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d01b      	beq.n	8009190 <TIM_OC6_SetConfig+0xa4>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a1f      	ldr	r2, [pc, #124]	@ (80091d8 <TIM_OC6_SetConfig+0xec>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d017      	beq.n	8009190 <TIM_OC6_SetConfig+0xa4>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a1e      	ldr	r2, [pc, #120]	@ (80091dc <TIM_OC6_SetConfig+0xf0>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d013      	beq.n	8009190 <TIM_OC6_SetConfig+0xa4>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a1d      	ldr	r2, [pc, #116]	@ (80091e0 <TIM_OC6_SetConfig+0xf4>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d00f      	beq.n	8009190 <TIM_OC6_SetConfig+0xa4>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a1c      	ldr	r2, [pc, #112]	@ (80091e4 <TIM_OC6_SetConfig+0xf8>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d00b      	beq.n	8009190 <TIM_OC6_SetConfig+0xa4>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a1b      	ldr	r2, [pc, #108]	@ (80091e8 <TIM_OC6_SetConfig+0xfc>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d007      	beq.n	8009190 <TIM_OC6_SetConfig+0xa4>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a1a      	ldr	r2, [pc, #104]	@ (80091ec <TIM_OC6_SetConfig+0x100>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d003      	beq.n	8009190 <TIM_OC6_SetConfig+0xa4>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a19      	ldr	r2, [pc, #100]	@ (80091f0 <TIM_OC6_SetConfig+0x104>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d109      	bne.n	80091a4 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009196:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	695b      	ldr	r3, [r3, #20]
 800919c:	029b      	lsls	r3, r3, #10
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	621a      	str	r2, [r3, #32]
}
 80091be:	bf00      	nop
 80091c0:	371c      	adds	r7, #28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	40012c00 	.word	0x40012c00
 80091d0:	50012c00 	.word	0x50012c00
 80091d4:	40013400 	.word	0x40013400
 80091d8:	50013400 	.word	0x50013400
 80091dc:	40014000 	.word	0x40014000
 80091e0:	50014000 	.word	0x50014000
 80091e4:	40014400 	.word	0x40014400
 80091e8:	50014400 	.word	0x50014400
 80091ec:	40014800 	.word	0x40014800
 80091f0:	50014800 	.word	0x50014800

080091f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6a1b      	ldr	r3, [r3, #32]
 8009204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	f023 0201 	bic.w	r2, r3, #1
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800921e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	011b      	lsls	r3, r3, #4
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	4313      	orrs	r3, r2
 8009228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f023 030a 	bic.w	r3, r3, #10
 8009230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	4313      	orrs	r3, r2
 8009238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	621a      	str	r2, [r3, #32]
}
 8009246:	bf00      	nop
 8009248:	371c      	adds	r7, #28
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009252:	b480      	push	{r7}
 8009254:	b087      	sub	sp, #28
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6a1b      	ldr	r3, [r3, #32]
 8009268:	f023 0210 	bic.w	r2, r3, #16
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800927c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	031b      	lsls	r3, r3, #12
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	4313      	orrs	r3, r2
 8009286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800928e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	011b      	lsls	r3, r3, #4
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	4313      	orrs	r3, r2
 8009298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	621a      	str	r2, [r3, #32]
}
 80092a6:	bf00      	nop
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b085      	sub	sp, #20
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80092c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	f043 0307 	orr.w	r3, r3, #7
 80092d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	609a      	str	r2, [r3, #8]
}
 80092e0:	bf00      	nop
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
 80092f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	021a      	lsls	r2, r3, #8
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	431a      	orrs	r2, r3
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	4313      	orrs	r3, r2
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	4313      	orrs	r3, r2
 8009318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	697a      	ldr	r2, [r7, #20]
 800931e:	609a      	str	r2, [r3, #8]
}
 8009320:	bf00      	nop
 8009322:	371c      	adds	r7, #28
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a26      	ldr	r2, [pc, #152]	@ (80093d0 <TIM_ResetCallback+0xa4>)
 8009338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a25      	ldr	r2, [pc, #148]	@ (80093d4 <TIM_ResetCallback+0xa8>)
 8009340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a24      	ldr	r2, [pc, #144]	@ (80093d8 <TIM_ResetCallback+0xac>)
 8009348:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a23      	ldr	r2, [pc, #140]	@ (80093dc <TIM_ResetCallback+0xb0>)
 8009350:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a22      	ldr	r2, [pc, #136]	@ (80093e0 <TIM_ResetCallback+0xb4>)
 8009358:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a21      	ldr	r2, [pc, #132]	@ (80093e4 <TIM_ResetCallback+0xb8>)
 8009360:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a20      	ldr	r2, [pc, #128]	@ (80093e8 <TIM_ResetCallback+0xbc>)
 8009368:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a1f      	ldr	r2, [pc, #124]	@ (80093ec <TIM_ResetCallback+0xc0>)
 8009370:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a1e      	ldr	r2, [pc, #120]	@ (80093f0 <TIM_ResetCallback+0xc4>)
 8009378:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a1d      	ldr	r2, [pc, #116]	@ (80093f4 <TIM_ResetCallback+0xc8>)
 8009380:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a1c      	ldr	r2, [pc, #112]	@ (80093f8 <TIM_ResetCallback+0xcc>)
 8009388:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a1b      	ldr	r2, [pc, #108]	@ (80093fc <TIM_ResetCallback+0xd0>)
 8009390:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a1a      	ldr	r2, [pc, #104]	@ (8009400 <TIM_ResetCallback+0xd4>)
 8009398:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a19      	ldr	r2, [pc, #100]	@ (8009404 <TIM_ResetCallback+0xd8>)
 80093a0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a18      	ldr	r2, [pc, #96]	@ (8009408 <TIM_ResetCallback+0xdc>)
 80093a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a17      	ldr	r2, [pc, #92]	@ (800940c <TIM_ResetCallback+0xe0>)
 80093b0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a16      	ldr	r2, [pc, #88]	@ (8009410 <TIM_ResetCallback+0xe4>)
 80093b8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a15      	ldr	r2, [pc, #84]	@ (8009414 <TIM_ResetCallback+0xe8>)
 80093c0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	08000e91 	.word	0x08000e91
 80093d4:	08008789 	.word	0x08008789
 80093d8:	08008801 	.word	0x08008801
 80093dc:	08008815 	.word	0x08008815
 80093e0:	080087b1 	.word	0x080087b1
 80093e4:	080087c5 	.word	0x080087c5
 80093e8:	0800879d 	.word	0x0800879d
 80093ec:	080087d9 	.word	0x080087d9
 80093f0:	080087ed 	.word	0x080087ed
 80093f4:	08008829 	.word	0x08008829
 80093f8:	08009775 	.word	0x08009775
 80093fc:	08009789 	.word	0x08009789
 8009400:	0800979d 	.word	0x0800979d
 8009404:	080097b1 	.word	0x080097b1
 8009408:	080097c5 	.word	0x080097c5
 800940c:	080097d9 	.word	0x080097d9
 8009410:	080097ed 	.word	0x080097ed
 8009414:	08009801 	.word	0x08009801

08009418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009428:	2b01      	cmp	r3, #1
 800942a:	d101      	bne.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800942c:	2302      	movs	r3, #2
 800942e:	e097      	b.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2202      	movs	r2, #2
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a45      	ldr	r2, [pc, #276]	@ (800956c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d00e      	beq.n	8009478 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a44      	ldr	r2, [pc, #272]	@ (8009570 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d009      	beq.n	8009478 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a42      	ldr	r2, [pc, #264]	@ (8009574 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d004      	beq.n	8009478 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a41      	ldr	r2, [pc, #260]	@ (8009578 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d108      	bne.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800947e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009494:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	4313      	orrs	r3, r2
 800949e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a2f      	ldr	r2, [pc, #188]	@ (800956c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d040      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a2e      	ldr	r2, [pc, #184]	@ (8009570 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d03b      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094c4:	d036      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094ce:	d031      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a29      	ldr	r2, [pc, #164]	@ (800957c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d02c      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a28      	ldr	r2, [pc, #160]	@ (8009580 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d027      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a26      	ldr	r2, [pc, #152]	@ (8009584 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d022      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a25      	ldr	r2, [pc, #148]	@ (8009588 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d01d      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a23      	ldr	r2, [pc, #140]	@ (800958c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d018      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a22      	ldr	r2, [pc, #136]	@ (8009590 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d013      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a18      	ldr	r2, [pc, #96]	@ (8009574 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d00e      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a17      	ldr	r2, [pc, #92]	@ (8009578 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d009      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a1b      	ldr	r2, [pc, #108]	@ (8009594 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d004      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a1a      	ldr	r2, [pc, #104]	@ (8009598 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d10c      	bne.n	800954e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800953a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	4313      	orrs	r3, r2
 8009544:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	40012c00 	.word	0x40012c00
 8009570:	50012c00 	.word	0x50012c00
 8009574:	40013400 	.word	0x40013400
 8009578:	50013400 	.word	0x50013400
 800957c:	40000400 	.word	0x40000400
 8009580:	50000400 	.word	0x50000400
 8009584:	40000800 	.word	0x40000800
 8009588:	50000800 	.word	0x50000800
 800958c:	40000c00 	.word	0x40000c00
 8009590:	50000c00 	.word	0x50000c00
 8009594:	40014000 	.word	0x40014000
 8009598:	50014000 	.word	0x50014000

0800959c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d101      	bne.n	80095b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80095b4:	2302      	movs	r3, #2
 80095b6:	e0c3      	b.n	8009740 <HAL_TIMEx_ConfigBreakDeadTime+0x1a4>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	4313      	orrs	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	4313      	orrs	r3, r2
 8009604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	695b      	ldr	r3, [r3, #20]
 8009610:	4313      	orrs	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800961e:	4313      	orrs	r3, r2
 8009620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	041b      	lsls	r3, r3, #16
 800962e:	4313      	orrs	r3, r2
 8009630:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(htim->Instance))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a45      	ldr	r2, [pc, #276]	@ (800974c <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d02c      	beq.n	8009696 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a43      	ldr	r2, [pc, #268]	@ (8009750 <HAL_TIMEx_ConfigBreakDeadTime+0x1b4>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d027      	beq.n	8009696 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a42      	ldr	r2, [pc, #264]	@ (8009754 <HAL_TIMEx_ConfigBreakDeadTime+0x1b8>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d022      	beq.n	8009696 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a40      	ldr	r2, [pc, #256]	@ (8009758 <HAL_TIMEx_ConfigBreakDeadTime+0x1bc>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d01d      	beq.n	8009696 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a3f      	ldr	r2, [pc, #252]	@ (800975c <HAL_TIMEx_ConfigBreakDeadTime+0x1c0>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d018      	beq.n	8009696 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a3d      	ldr	r2, [pc, #244]	@ (8009760 <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d013      	beq.n	8009696 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a3c      	ldr	r2, [pc, #240]	@ (8009764 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d00e      	beq.n	8009696 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a3a      	ldr	r2, [pc, #232]	@ (8009768 <HAL_TIMEx_ConfigBreakDeadTime+0x1cc>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d009      	beq.n	8009696 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a39      	ldr	r2, [pc, #228]	@ (800976c <HAL_TIMEx_ConfigBreakDeadTime+0x1d0>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d004      	beq.n	8009696 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a37      	ldr	r2, [pc, #220]	@ (8009770 <HAL_TIMEx_ConfigBreakDeadTime+0x1d4>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d106      	bne.n	80096a4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a28      	ldr	r2, [pc, #160]	@ (800974c <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00e      	beq.n	80096cc <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a27      	ldr	r2, [pc, #156]	@ (8009750 <HAL_TIMEx_ConfigBreakDeadTime+0x1b4>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d009      	beq.n	80096cc <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a25      	ldr	r2, [pc, #148]	@ (8009754 <HAL_TIMEx_ConfigBreakDeadTime+0x1b8>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d004      	beq.n	80096cc <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a24      	ldr	r2, [pc, #144]	@ (8009758 <HAL_TIMEx_ConfigBreakDeadTime+0x1bc>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d130      	bne.n	800972e <HAL_TIMEx_ConfigBreakDeadTime+0x192>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d6:	051b      	lsls	r3, r3, #20
 80096d8:	4313      	orrs	r3, r2
 80096da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f4:	4313      	orrs	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a13      	ldr	r2, [pc, #76]	@ (800974c <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d00e      	beq.n	8009720 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a12      	ldr	r2, [pc, #72]	@ (8009750 <HAL_TIMEx_ConfigBreakDeadTime+0x1b4>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d009      	beq.n	8009720 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a10      	ldr	r2, [pc, #64]	@ (8009754 <HAL_TIMEx_ConfigBreakDeadTime+0x1b8>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d004      	beq.n	8009720 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a0f      	ldr	r2, [pc, #60]	@ (8009758 <HAL_TIMEx_ConfigBreakDeadTime+0x1bc>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d106      	bne.n	800972e <HAL_TIMEx_ConfigBreakDeadTime+0x192>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	40012c00 	.word	0x40012c00
 8009750:	50012c00 	.word	0x50012c00
 8009754:	40013400 	.word	0x40013400
 8009758:	50013400 	.word	0x50013400
 800975c:	40014000 	.word	0x40014000
 8009760:	50014000 	.word	0x50014000
 8009764:	40014400 	.word	0x40014400
 8009768:	50014400 	.word	0x50014400
 800976c:	40014800 	.word	0x40014800
 8009770:	50014800 	.word	0x50014800

08009774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009814:	b480      	push	{r7}
 8009816:	b08b      	sub	sp, #44	@ 0x2c
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	fa93 f3a3 	rbit	r3, r3
 800982e:	613b      	str	r3, [r7, #16]
  return result;
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800983a:	2320      	movs	r3, #32
 800983c:	e003      	b.n	8009846 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	fab3 f383 	clz	r3, r3
 8009844:	b2db      	uxtb	r3, r3
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	2103      	movs	r1, #3
 800984a:	fa01 f303 	lsl.w	r3, r1, r3
 800984e:	43db      	mvns	r3, r3
 8009850:	401a      	ands	r2, r3
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	fa93 f3a3 	rbit	r3, r3
 800985c:	61fb      	str	r3, [r7, #28]
  return result;
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009864:	2b00      	cmp	r3, #0
 8009866:	d101      	bne.n	800986c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009868:	2320      	movs	r3, #32
 800986a:	e003      	b.n	8009874 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800986c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986e:	fab3 f383 	clz	r3, r3
 8009872:	b2db      	uxtb	r3, r3
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	6879      	ldr	r1, [r7, #4]
 8009878:	fa01 f303 	lsl.w	r3, r1, r3
 800987c:	431a      	orrs	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 8009882:	bf00      	nop
 8009884:	372c      	adds	r7, #44	@ 0x2c
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800988e:	b480      	push	{r7}
 8009890:	b085      	sub	sp, #20
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	43db      	mvns	r3, r3
 80098a2:	401a      	ands	r2, r3
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	fb01 f303 	mul.w	r3, r1, r3
 80098ac:	431a      	orrs	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	605a      	str	r2, [r3, #4]
}
 80098b2:	bf00      	nop
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80098be:	b480      	push	{r7}
 80098c0:	b08b      	sub	sp, #44	@ 0x2c
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	60f8      	str	r0, [r7, #12]
 80098c6:	60b9      	str	r1, [r7, #8]
 80098c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	689a      	ldr	r2, [r3, #8]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	fa93 f3a3 	rbit	r3, r3
 80098d8:	613b      	str	r3, [r7, #16]
  return result;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80098e4:	2320      	movs	r3, #32
 80098e6:	e003      	b.n	80098f0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	fab3 f383 	clz	r3, r3
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	2103      	movs	r1, #3
 80098f4:	fa01 f303 	lsl.w	r3, r1, r3
 80098f8:	43db      	mvns	r3, r3
 80098fa:	401a      	ands	r2, r3
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	fa93 f3a3 	rbit	r3, r3
 8009906:	61fb      	str	r3, [r7, #28]
  return result;
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800990c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009912:	2320      	movs	r3, #32
 8009914:	e003      	b.n	800991e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009918:	fab3 f383 	clz	r3, r3
 800991c:	b2db      	uxtb	r3, r3
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	6879      	ldr	r1, [r7, #4]
 8009922:	fa01 f303 	lsl.w	r3, r1, r3
 8009926:	431a      	orrs	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 800992c:	bf00      	nop
 800992e:	372c      	adds	r7, #44	@ 0x2c
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009938:	b480      	push	{r7}
 800993a:	b08b      	sub	sp, #44	@ 0x2c
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	68da      	ldr	r2, [r3, #12]
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	fa93 f3a3 	rbit	r3, r3
 8009952:	613b      	str	r3, [r7, #16]
  return result;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d101      	bne.n	8009962 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800995e:	2320      	movs	r3, #32
 8009960:	e003      	b.n	800996a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	fab3 f383 	clz	r3, r3
 8009968:	b2db      	uxtb	r3, r3
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	2103      	movs	r1, #3
 800996e:	fa01 f303 	lsl.w	r3, r1, r3
 8009972:	43db      	mvns	r3, r3
 8009974:	401a      	ands	r2, r3
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	fa93 f3a3 	rbit	r3, r3
 8009980:	61fb      	str	r3, [r7, #28]
  return result;
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800998c:	2320      	movs	r3, #32
 800998e:	e003      	b.n	8009998 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009992:	fab3 f383 	clz	r3, r3
 8009996:	b2db      	uxtb	r3, r3
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	6879      	ldr	r1, [r7, #4]
 800999c:	fa01 f303 	lsl.w	r3, r1, r3
 80099a0:	431a      	orrs	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 80099a6:	bf00      	nop
 80099a8:	372c      	adds	r7, #44	@ 0x2c
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b08b      	sub	sp, #44	@ 0x2c
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6a1a      	ldr	r2, [r3, #32]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	fa93 f3a3 	rbit	r3, r3
 80099cc:	613b      	str	r3, [r7, #16]
  return result;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80099d8:	2320      	movs	r3, #32
 80099da:	e003      	b.n	80099e4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	fab3 f383 	clz	r3, r3
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	210f      	movs	r1, #15
 80099e8:	fa01 f303 	lsl.w	r3, r1, r3
 80099ec:	43db      	mvns	r3, r3
 80099ee:	401a      	ands	r2, r3
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	fa93 f3a3 	rbit	r3, r3
 80099fa:	61fb      	str	r3, [r7, #28]
  return result;
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009a06:	2320      	movs	r3, #32
 8009a08:	e003      	b.n	8009a12 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0c:	fab3 f383 	clz	r3, r3
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	fa01 f303 	lsl.w	r3, r1, r3
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 8009a20:	bf00      	nop
 8009a22:	372c      	adds	r7, #44	@ 0x2c
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b08b      	sub	sp, #44	@ 0x2c
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	0a1b      	lsrs	r3, r3, #8
 8009a40:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	fa93 f3a3 	rbit	r3, r3
 8009a48:	613b      	str	r3, [r7, #16]
  return result;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009a54:	2320      	movs	r3, #32
 8009a56:	e003      	b.n	8009a60 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	fab3 f383 	clz	r3, r3
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	210f      	movs	r1, #15
 8009a64:	fa01 f303 	lsl.w	r3, r1, r3
 8009a68:	43db      	mvns	r3, r3
 8009a6a:	401a      	ands	r2, r3
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	fa93 f3a3 	rbit	r3, r3
 8009a78:	61fb      	str	r3, [r7, #28]
  return result;
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d101      	bne.n	8009a88 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009a84:	2320      	movs	r3, #32
 8009a86:	e003      	b.n	8009a90 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8a:	fab3 f383 	clz	r3, r3
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	fa01 f303 	lsl.w	r3, r1, r3
 8009a98:	431a      	orrs	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 8009a9e:	bf00      	nop
 8009aa0:	372c      	adds	r7, #44	@ 0x2c
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b08a      	sub	sp, #40	@ 0x28
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	fa93 f3a3 	rbit	r3, r3
 8009ac0:	617b      	str	r3, [r7, #20]
  return result;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d101      	bne.n	8009ad0 <LL_GPIO_Init+0x26>
    return 32U;
 8009acc:	2320      	movs	r3, #32
 8009ace:	e003      	b.n	8009ad8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	fab3 f383 	clz	r3, r3
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009ada:	e058      	b.n	8009b8e <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae8:	4013      	ands	r3, r2
 8009aea:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8009aec:	6a3b      	ldr	r3, [r7, #32]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d04a      	beq.n	8009b88 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d003      	beq.n	8009b02 <LL_GPIO_Init+0x58>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d10e      	bne.n	8009b20 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	461a      	mov	r2, r3
 8009b08:	6a39      	ldr	r1, [r7, #32]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff fed7 	bl	80098be <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	6819      	ldr	r1, [r3, #0]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff feb7 	bl	800988e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	461a      	mov	r2, r3
 8009b26:	6a39      	ldr	r1, [r7, #32]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7ff ff05 	bl	8009938 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d121      	bne.n	8009b7a <LL_GPIO_Init+0xd0>
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	fa93 f3a3 	rbit	r3, r3
 8009b40:	60bb      	str	r3, [r7, #8]
  return result;
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d101      	bne.n	8009b50 <LL_GPIO_Init+0xa6>
    return 32U;
 8009b4c:	2320      	movs	r3, #32
 8009b4e:	e003      	b.n	8009b58 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	fab3 f383 	clz	r3, r3
 8009b56:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8009b58:	2b07      	cmp	r3, #7
 8009b5a:	d807      	bhi.n	8009b6c <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	461a      	mov	r2, r3
 8009b62:	6a39      	ldr	r1, [r7, #32]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff ff24 	bl	80099b2 <LL_GPIO_SetAFPin_0_7>
 8009b6a:	e006      	b.n	8009b7a <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	461a      	mov	r2, r3
 8009b72:	6a39      	ldr	r1, [r7, #32]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff ff59 	bl	8009a2c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	6a39      	ldr	r1, [r7, #32]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff fe46 	bl	8009814 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b94:	fa22 f303 	lsr.w	r3, r2, r3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d19f      	bne.n	8009adc <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3728      	adds	r7, #40	@ 0x28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8009bac:	4b07      	ldr	r3, [pc, #28]	@ (8009bcc <LL_RCC_HSI_IsReady+0x24>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bb8:	d101      	bne.n	8009bbe <LL_RCC_HSI_IsReady+0x16>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e000      	b.n	8009bc0 <LL_RCC_HSI_IsReady+0x18>
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	46020c00 	.word	0x46020c00

08009bd0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8009bd4:	4b07      	ldr	r3, [pc, #28]	@ (8009bf4 <LL_RCC_LSE_IsReady+0x24>)
 8009bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bda:	f003 0302 	and.w	r3, r3, #2
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d101      	bne.n	8009be6 <LL_RCC_LSE_IsReady+0x16>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e000      	b.n	8009be8 <LL_RCC_LSE_IsReady+0x18>
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	46020c00 	.word	0x46020c00

08009bf8 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll ICSCR1         MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == RCC_ICSCR1_MSIRGSEL) ? 1UL : 0UL);
 8009bfc:	4b07      	ldr	r3, [pc, #28]	@ (8009c1c <LL_RCC_MSI_IsEnabledRangeSelect+0x24>)
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c08:	d101      	bne.n	8009c0e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e000      	b.n	8009c10 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	46020c00 	.word	0x46020c00

08009c20 <LL_RCC_MSIS_GetRange>:
  *         @arg @ref LL_RCC_MSISRANGE_13
  *         @arg @ref LL_RCC_MSISRANGE_14
  *         @arg @ref LL_RCC_MSISRANGE_15
  */
__STATIC_INLINE uint32_t LL_RCC_MSIS_GetRange(void)
{
 8009c20:	b480      	push	{r7}
 8009c22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSISRANGE));
 8009c24:	4b04      	ldr	r3, [pc, #16]	@ (8009c38 <LL_RCC_MSIS_GetRange+0x18>)
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	46020c00 	.word	0x46020c00

08009c3c <LL_RCC_MSIS_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISSRANGE_6
  *         @arg @ref LL_RCC_MSISSRANGE_7
  *         @arg @ref LL_RCC_MSISSRANGE_8
  */
__STATIC_INLINE uint32_t LL_RCC_MSIS_GetRangeAfterStandby(void)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISSRANGE));
 8009c40:	4b04      	ldr	r3, [pc, #16]	@ (8009c54 <LL_RCC_MSIS_GetRangeAfterStandby+0x18>)
 8009c42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c46:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	46020c00 	.word	0x46020c00

08009c58 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8009c5c:	4b04      	ldr	r3, [pc, #16]	@ (8009c70 <LL_RCC_GetSysClkSource+0x18>)
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	f003 030c 	and.w	r3, r3, #12
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	46020c00 	.word	0x46020c00

08009c74 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8009c74:	b480      	push	{r7}
 8009c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
 8009c78:	4b04      	ldr	r3, [pc, #16]	@ (8009c8c <LL_RCC_GetAHBPrescaler+0x18>)
 8009c7a:	6a1b      	ldr	r3, [r3, #32]
 8009c7c:	f003 030f 	and.w	r3, r3, #15
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	46020c00 	.word	0x46020c00

08009c90 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009c90:	b480      	push	{r7}
 8009c92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
 8009c94:	4b04      	ldr	r3, [pc, #16]	@ (8009ca8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	46020c00 	.word	0x46020c00

08009cac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8009cac:	b480      	push	{r7}
 8009cae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
 8009cb0:	4b04      	ldr	r3, [pc, #16]	@ (8009cc4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
 8009cb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	46020c00 	.word	0x46020c00

08009cc8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE (*)
  *
  *         (*) Availability depends on devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  __IO const uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0xE0U + (USARTx >> 24U));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	0e1a      	lsrs	r2, r3, #24
 8009cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8009d0c <LL_RCC_GetUSARTClockSource+0x44>)
 8009cd6:	4413      	add	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]
  return (uint32_t)((READ_BIT(*reg, 3UL << ((USARTx & 0x001F0000U) >> 16U)) >> \
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	0c1b      	lsrs	r3, r3, #16
 8009ce2:	f003 031f 	and.w	r3, r3, #31
 8009ce6:	2103      	movs	r1, #3
 8009ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cec:	401a      	ands	r2, r3
                     ((USARTx & 0x001F0000U) >> 16U)) | (USARTx & 0xFFFF0000U));
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	0c1b      	lsrs	r3, r3, #16
 8009cf2:	f003 031f 	and.w	r3, r3, #31
  return (uint32_t)((READ_BIT(*reg, 3UL << ((USARTx & 0x001F0000U) >> 16U)) >> \
 8009cf6:	40da      	lsrs	r2, r3
                     ((USARTx & 0x001F0000U) >> 16U)) | (USARTx & 0xFFFF0000U));
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	0c1b      	lsrs	r3, r3, #16
 8009cfc:	041b      	lsls	r3, r3, #16
  return (uint32_t)((READ_BIT(*reg, 3UL << ((USARTx & 0x001F0000U) >> 16U)) >> \
 8009cfe:	4313      	orrs	r3, r2
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	46020ce0 	.word	0x46020ce0

08009d10 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, UARTx) | (UARTx << 16U));
 8009d18:	4b06      	ldr	r3, [pc, #24]	@ (8009d34 <LL_RCC_GetUARTClockSource+0x24>)
 8009d1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	401a      	ands	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	041b      	lsls	r3, r3, #16
 8009d26:	4313      	orrs	r3, r2
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	46020c00 	.word	0x46020c00

08009d38 <LL_RCC_PLL1_GetMainSource>:
  *         @arg @ref LL_RCC_PLL1SOURCE_MSIS
  *         @arg @ref LL_RCC_PLL1SOURCE_HSI
  *         @arg @ref LL_RCC_PLL1SOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetMainSource(void)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1SRC));
 8009d3c:	4b04      	ldr	r3, [pc, #16]	@ (8009d50 <LL_RCC_PLL1_GetMainSource+0x18>)
 8009d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d40:	f003 0303 	and.w	r3, r3, #3
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	46020c00 	.word	0x46020c00

08009d54 <LL_RCC_PLL1_GetN>:
  * @brief  Get Main PLL1 multiplication factor for VCO
  * @rmtoll PLL1CFGR      PLL1N          LL_RCC_PLL1_GetN
  * @retval Between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 8009d54:	b480      	push	{r7}
 8009d56:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1N) >>  RCC_PLL1DIVR_PLL1N_Pos) + 1UL);
 8009d58:	4b04      	ldr	r3, [pc, #16]	@ (8009d6c <LL_RCC_PLL1_GetN+0x18>)
 8009d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d60:	3301      	adds	r3, #1
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr
 8009d6c:	46020c00 	.word	0x46020c00

08009d70 <LL_RCC_PLL1_GetR>:
  * @note Used for PLL1CLK (system clock)
  * @rmtoll PLL1DIVR      PLL1R          LL_RCC_PLL1_GetR
  * @retval Between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 8009d70:	b480      	push	{r7}
 8009d72:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1R) >>  RCC_PLL1DIVR_PLL1R_Pos) + 1UL);
 8009d74:	4b05      	ldr	r3, [pc, #20]	@ (8009d8c <LL_RCC_PLL1_GetR+0x1c>)
 8009d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d78:	0e1b      	lsrs	r3, r3, #24
 8009d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d7e:	3301      	adds	r3, #1
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	46020c00 	.word	0x46020c00

08009d90 <LL_RCC_PLL1_GetDivider>:
  * @brief  Get Division factor for the main PLL and other PLL
  * @rmtoll PLL1CFGR      PLL1M          LL_RCC_PLL1_GetDivider
  * @retval Between 1 and 16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetDivider(void)
{
 8009d90:	b480      	push	{r7}
 8009d92:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1M) >>  RCC_PLL1CFGR_PLL1M_Pos) + 1UL);
 8009d94:	4b05      	ldr	r3, [pc, #20]	@ (8009dac <LL_RCC_PLL1_GetDivider+0x1c>)
 8009d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d98:	0a1b      	lsrs	r3, r3, #8
 8009d9a:	f003 030f 	and.w	r3, r3, #15
 8009d9e:	3301      	adds	r3, #1
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	46020c00 	.word	0x46020c00

08009db0 <LL_RCC_GetUSARTClockFreq>:
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  *
  * (*) : USART6 is available only for STM32U59xxx and STM32U5Axxx devices.
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009db8:	2300      	movs	r3, #0
 8009dba:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d135      	bne.n	8009e2e <LL_RCC_GetUSARTClockFreq+0x7e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7ff ff80 	bl	8009cc8 <LL_RCC_GetUSARTClockSource>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	f200 809f 	bhi.w	8009f0e <LL_RCC_GetUSARTClockFreq+0x15e>
 8009dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd8 <LL_RCC_GetUSARTClockFreq+0x28>)
 8009dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd6:	bf00      	nop
 8009dd8:	08009e17 	.word	0x08009e17
 8009ddc:	08009de9 	.word	0x08009de9
 8009de0:	08009df1 	.word	0x08009df1
 8009de4:	08009e03 	.word	0x08009e03
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8009de8:	f000 f944 	bl	800a074 <RCC_GetSystemClockFreq>
 8009dec:	60f8      	str	r0, [r7, #12]
        break;
 8009dee:	e09f      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8009df0:	f7ff feda 	bl	8009ba8 <LL_RCC_HSI_IsReady>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	f040 808b 	bne.w	8009f12 <LL_RCC_GetUSARTClockFreq+0x162>
        {
          usart_frequency = HSI_VALUE;
 8009dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8009f3c <LL_RCC_GetUSARTClockFreq+0x18c>)
 8009dfe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009e00:	e087      	b.n	8009f12 <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8009e02:	f7ff fee5 	bl	8009bd0 <LL_RCC_LSE_IsReady>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	f040 8084 	bne.w	8009f16 <LL_RCC_GetUSARTClockFreq+0x166>
        {
          usart_frequency = LSE_VALUE;
 8009e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e12:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009e14:	e07f      	b.n	8009f16 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009e16:	f000 f92d 	bl	800a074 <RCC_GetSystemClockFreq>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 f9c7 	bl	800a1b0 <RCC_GetHCLKClockFreq>
 8009e22:	4603      	mov	r3, r0
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 f9ed 	bl	800a204 <RCC_GetPCLK2ClockFreq>
 8009e2a:	60f8      	str	r0, [r7, #12]
        break;
 8009e2c:	e080      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>
        /* unreachable code */
        break;
    }
  }
#if defined (USART2)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a43      	ldr	r2, [pc, #268]	@ (8009f40 <LL_RCC_GetUSARTClockFreq+0x190>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d133      	bne.n	8009e9e <LL_RCC_GetUSARTClockFreq+0xee>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7ff ff46 	bl	8009cc8 <LL_RCC_GetUSARTClockSource>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d869      	bhi.n	8009f1a <LL_RCC_GetUSARTClockFreq+0x16a>
 8009e46:	a201      	add	r2, pc, #4	@ (adr r2, 8009e4c <LL_RCC_GetUSARTClockFreq+0x9c>)
 8009e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4c:	08009e87 	.word	0x08009e87
 8009e50:	08009e5d 	.word	0x08009e5d
 8009e54:	08009e65 	.word	0x08009e65
 8009e58:	08009e75 	.word	0x08009e75
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8009e5c:	f000 f90a 	bl	800a074 <RCC_GetSystemClockFreq>
 8009e60:	60f8      	str	r0, [r7, #12]
        break;
 8009e62:	e065      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8009e64:	f7ff fea0 	bl	8009ba8 <LL_RCC_HSI_IsReady>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d157      	bne.n	8009f1e <LL_RCC_GetUSARTClockFreq+0x16e>
        {
          usart_frequency = HSI_VALUE;
 8009e6e:	4b33      	ldr	r3, [pc, #204]	@ (8009f3c <LL_RCC_GetUSARTClockFreq+0x18c>)
 8009e70:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009e72:	e054      	b.n	8009f1e <LL_RCC_GetUSARTClockFreq+0x16e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8009e74:	f7ff feac 	bl	8009bd0 <LL_RCC_LSE_IsReady>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d151      	bne.n	8009f22 <LL_RCC_GetUSARTClockFreq+0x172>
        {
          usart_frequency = LSE_VALUE;
 8009e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e82:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009e84:	e04d      	b.n	8009f22 <LL_RCC_GetUSARTClockFreq+0x172>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009e86:	f000 f8f5 	bl	800a074 <RCC_GetSystemClockFreq>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 f98f 	bl	800a1b0 <RCC_GetHCLKClockFreq>
 8009e92:	4603      	mov	r3, r0
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 f99f 	bl	800a1d8 <RCC_GetPCLK1ClockFreq>
 8009e9a:	60f8      	str	r0, [r7, #12]
        break;
 8009e9c:	e048      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>
        /* unreachable code */
        break;
    }
  }
#endif /* USART2 */
  else if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a28      	ldr	r2, [pc, #160]	@ (8009f44 <LL_RCC_GetUSARTClockFreq+0x194>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d144      	bne.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff ff0e 	bl	8009cc8 <LL_RCC_GetUSARTClockSource>
 8009eac:	4603      	mov	r3, r0
 8009eae:	f5a3 2380 	sub.w	r3, r3, #262144	@ 0x40000
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d837      	bhi.n	8009f26 <LL_RCC_GetUSARTClockFreq+0x176>
 8009eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ebc <LL_RCC_GetUSARTClockFreq+0x10c>)
 8009eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebc:	08009ef7 	.word	0x08009ef7
 8009ec0:	08009ecd 	.word	0x08009ecd
 8009ec4:	08009ed5 	.word	0x08009ed5
 8009ec8:	08009ee5 	.word	0x08009ee5
    {
      case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8009ecc:	f000 f8d2 	bl	800a074 <RCC_GetSystemClockFreq>
 8009ed0:	60f8      	str	r0, [r7, #12]
        break;
 8009ed2:	e02d      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>

      case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8009ed4:	f7ff fe68 	bl	8009ba8 <LL_RCC_HSI_IsReady>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d125      	bne.n	8009f2a <LL_RCC_GetUSARTClockFreq+0x17a>
        {
          usart_frequency = HSI_VALUE;
 8009ede:	4b17      	ldr	r3, [pc, #92]	@ (8009f3c <LL_RCC_GetUSARTClockFreq+0x18c>)
 8009ee0:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009ee2:	e022      	b.n	8009f2a <LL_RCC_GetUSARTClockFreq+0x17a>

      case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8009ee4:	f7ff fe74 	bl	8009bd0 <LL_RCC_LSE_IsReady>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d11f      	bne.n	8009f2e <LL_RCC_GetUSARTClockFreq+0x17e>
        {
          usart_frequency = LSE_VALUE;
 8009eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ef2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009ef4:	e01b      	b.n	8009f2e <LL_RCC_GetUSARTClockFreq+0x17e>

      case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009ef6:	f000 f8bd 	bl	800a074 <RCC_GetSystemClockFreq>
 8009efa:	4603      	mov	r3, r0
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 f957 	bl	800a1b0 <RCC_GetHCLKClockFreq>
 8009f02:	4603      	mov	r3, r0
 8009f04:	4618      	mov	r0, r3
 8009f06:	f000 f967 	bl	800a1d8 <RCC_GetPCLK1ClockFreq>
 8009f0a:	60f8      	str	r0, [r7, #12]
        break;
 8009f0c:	e010      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8009f0e:	bf00      	nop
 8009f10:	e00e      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8009f12:	bf00      	nop
 8009f14:	e00c      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8009f16:	bf00      	nop
 8009f18:	e00a      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8009f1a:	bf00      	nop
 8009f1c:	e008      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8009f1e:	bf00      	nop
 8009f20:	e006      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8009f22:	bf00      	nop
 8009f24:	e004      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>

      default:
        /* unreachable code */
        break;
 8009f26:	bf00      	nop
 8009f28:	e002      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8009f2a:	bf00      	nop
 8009f2c:	e000      	b.n	8009f30 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8009f2e:	bf00      	nop
  else
  {
    /* nothing to do */
  }

  return usart_frequency;
 8009f30:	68fb      	ldr	r3, [r7, #12]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	00f42400 	.word	0x00f42400
 8009f40:	00020003 	.word	0x00020003
 8009f44:	00040003 	.word	0x00040003

08009f48 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009f50:	2300      	movs	r3, #0
 8009f52:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f58:	d136      	bne.n	8009fc8 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7ff fed8 	bl	8009d10 <LL_RCC_GetUARTClockSource>
 8009f60:	4603      	mov	r3, r0
 8009f62:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8009f66:	d01a      	beq.n	8009f9e <LL_RCC_GetUARTClockFreq+0x56>
 8009f68:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8009f6c:	d867      	bhi.n	800a03e <LL_RCC_GetUARTClockFreq+0xf6>
 8009f6e:	4a3c      	ldr	r2, [pc, #240]	@ (800a060 <LL_RCC_GetUARTClockFreq+0x118>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d00c      	beq.n	8009f8e <LL_RCC_GetUARTClockFreq+0x46>
 8009f74:	4a3a      	ldr	r2, [pc, #232]	@ (800a060 <LL_RCC_GetUARTClockFreq+0x118>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d861      	bhi.n	800a03e <LL_RCC_GetUARTClockFreq+0xf6>
 8009f7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009f7e:	d017      	beq.n	8009fb0 <LL_RCC_GetUARTClockFreq+0x68>
 8009f80:	4a38      	ldr	r2, [pc, #224]	@ (800a064 <LL_RCC_GetUARTClockFreq+0x11c>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d15b      	bne.n	800a03e <LL_RCC_GetUARTClockFreq+0xf6>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK:  /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8009f86:	f000 f875 	bl	800a074 <RCC_GetSystemClockFreq>
 8009f8a:	60f8      	str	r0, [r7, #12]
        break;
 8009f8c:	e062      	b.n	800a054 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART4_CLKSOURCE_HSI:     /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8009f8e:	f7ff fe0b 	bl	8009ba8 <LL_RCC_HSI_IsReady>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d154      	bne.n	800a042 <LL_RCC_GetUARTClockFreq+0xfa>
        {
          uart_frequency = HSI_VALUE;
 8009f98:	4b33      	ldr	r3, [pc, #204]	@ (800a068 <LL_RCC_GetUARTClockFreq+0x120>)
 8009f9a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009f9c:	e051      	b.n	800a042 <LL_RCC_GetUARTClockFreq+0xfa>

      case LL_RCC_UART4_CLKSOURCE_LSE:     /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8009f9e:	f7ff fe17 	bl	8009bd0 <LL_RCC_LSE_IsReady>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d14e      	bne.n	800a046 <LL_RCC_GetUARTClockFreq+0xfe>
        {
          uart_frequency = LSE_VALUE;
 8009fa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fac:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009fae:	e04a      	b.n	800a046 <LL_RCC_GetUARTClockFreq+0xfe>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:   /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009fb0:	f000 f860 	bl	800a074 <RCC_GetSystemClockFreq>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 f8fa 	bl	800a1b0 <RCC_GetHCLKClockFreq>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 f90a 	bl	800a1d8 <RCC_GetPCLK1ClockFreq>
 8009fc4:	60f8      	str	r0, [r7, #12]
        break;
 8009fc6:	e045      	b.n	800a054 <LL_RCC_GetUARTClockFreq+0x10c>
      default:
        /* unreachable code */
        break;
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fce:	d141      	bne.n	800a054 <LL_RCC_GetUARTClockFreq+0x10c>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff fe9d 	bl	8009d10 <LL_RCC_GetUARTClockSource>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8009fdc:	d01a      	beq.n	800a014 <LL_RCC_GetUARTClockFreq+0xcc>
 8009fde:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8009fe2:	d832      	bhi.n	800a04a <LL_RCC_GetUARTClockFreq+0x102>
 8009fe4:	4a21      	ldr	r2, [pc, #132]	@ (800a06c <LL_RCC_GetUARTClockFreq+0x124>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d00c      	beq.n	800a004 <LL_RCC_GetUARTClockFreq+0xbc>
 8009fea:	4a20      	ldr	r2, [pc, #128]	@ (800a06c <LL_RCC_GetUARTClockFreq+0x124>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d82c      	bhi.n	800a04a <LL_RCC_GetUARTClockFreq+0x102>
 8009ff0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ff4:	d017      	beq.n	800a026 <LL_RCC_GetUARTClockFreq+0xde>
 8009ff6:	4a1e      	ldr	r2, [pc, #120]	@ (800a070 <LL_RCC_GetUARTClockFreq+0x128>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d126      	bne.n	800a04a <LL_RCC_GetUARTClockFreq+0x102>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8009ffc:	f000 f83a 	bl	800a074 <RCC_GetSystemClockFreq>
 800a000:	60f8      	str	r0, [r7, #12]
        break;
 800a002:	e027      	b.n	800a054 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a004:	f7ff fdd0 	bl	8009ba8 <LL_RCC_HSI_IsReady>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d11f      	bne.n	800a04e <LL_RCC_GetUARTClockFreq+0x106>
        {
          uart_frequency = HSI_VALUE;
 800a00e:	4b16      	ldr	r3, [pc, #88]	@ (800a068 <LL_RCC_GetUARTClockFreq+0x120>)
 800a010:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a012:	e01c      	b.n	800a04e <LL_RCC_GetUARTClockFreq+0x106>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a014:	f7ff fddc 	bl	8009bd0 <LL_RCC_LSE_IsReady>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d119      	bne.n	800a052 <LL_RCC_GetUARTClockFreq+0x10a>
        {
          uart_frequency = LSE_VALUE;
 800a01e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a022:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a024:	e015      	b.n	800a052 <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a026:	f000 f825 	bl	800a074 <RCC_GetSystemClockFreq>
 800a02a:	4603      	mov	r3, r0
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 f8bf 	bl	800a1b0 <RCC_GetHCLKClockFreq>
 800a032:	4603      	mov	r3, r0
 800a034:	4618      	mov	r0, r3
 800a036:	f000 f8cf 	bl	800a1d8 <RCC_GetPCLK1ClockFreq>
 800a03a:	60f8      	str	r0, [r7, #12]
        break;
 800a03c:	e00a      	b.n	800a054 <LL_RCC_GetUARTClockFreq+0x10c>
        break;
 800a03e:	bf00      	nop
 800a040:	e008      	b.n	800a054 <LL_RCC_GetUARTClockFreq+0x10c>
        break;
 800a042:	bf00      	nop
 800a044:	e006      	b.n	800a054 <LL_RCC_GetUARTClockFreq+0x10c>
        break;
 800a046:	bf00      	nop
 800a048:	e004      	b.n	800a054 <LL_RCC_GetUARTClockFreq+0x10c>

      default:
        /* unreachable code */
        break;
 800a04a:	bf00      	nop
 800a04c:	e002      	b.n	800a054 <LL_RCC_GetUARTClockFreq+0x10c>
        break;
 800a04e:	bf00      	nop
 800a050:	e000      	b.n	800a054 <LL_RCC_GetUARTClockFreq+0x10c>
        break;
 800a052:	bf00      	nop
  else
  {
    /* nothing to do */
  }

  return uart_frequency;
 800a054:	68fb      	ldr	r3, [r7, #12]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	00c00080 	.word	0x00c00080
 800a064:	00c00040 	.word	0x00c00040
 800a068:	00f42400 	.word	0x00f42400
 800a06c:	03000200 	.word	0x03000200
 800a070:	03000100 	.word	0x03000100

0800a074 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a07a:	f7ff fded 	bl	8009c58 <LL_RCC_GetSysClkSource>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b0c      	cmp	r3, #12
 800a082:	d859      	bhi.n	800a138 <RCC_GetSystemClockFreq+0xc4>
 800a084:	a201      	add	r2, pc, #4	@ (adr r2, 800a08c <RCC_GetSystemClockFreq+0x18>)
 800a086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08a:	bf00      	nop
 800a08c:	0800a0c1 	.word	0x0800a0c1
 800a090:	0800a139 	.word	0x0800a139
 800a094:	0800a139 	.word	0x0800a139
 800a098:	0800a139 	.word	0x0800a139
 800a09c:	0800a125 	.word	0x0800a125
 800a0a0:	0800a139 	.word	0x0800a139
 800a0a4:	0800a139 	.word	0x0800a139
 800a0a8:	0800a139 	.word	0x0800a139
 800a0ac:	0800a12b 	.word	0x0800a12b
 800a0b0:	0800a139 	.word	0x0800a139
 800a0b4:	0800a139 	.word	0x0800a139
 800a0b8:	0800a139 	.word	0x0800a139
 800a0bc:	0800a131 	.word	0x0800a131
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSIS:   /* MSIS used as system clock source */
      frequency = __LL_RCC_CALC_MSIS_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800a0c0:	f7ff fd9a 	bl	8009bf8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d115      	bne.n	800a0f6 <RCC_GetSystemClockFreq+0x82>
 800a0ca:	f7ff fd95 	bl	8009bf8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d106      	bne.n	800a0e2 <RCC_GetSystemClockFreq+0x6e>
 800a0d4:	f7ff fda4 	bl	8009c20 <LL_RCC_MSIS_GetRange>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	0f1b      	lsrs	r3, r3, #28
 800a0dc:	f003 030f 	and.w	r3, r3, #15
 800a0e0:	e005      	b.n	800a0ee <RCC_GetSystemClockFreq+0x7a>
 800a0e2:	f7ff fdab 	bl	8009c3c <LL_RCC_MSIS_GetRangeAfterStandby>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	0f1b      	lsrs	r3, r3, #28
 800a0ea:	f003 030f 	and.w	r3, r3, #15
 800a0ee:	4a2e      	ldr	r2, [pc, #184]	@ (800a1a8 <RCC_GetSystemClockFreq+0x134>)
 800a0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0f4:	e014      	b.n	800a120 <RCC_GetSystemClockFreq+0xac>
 800a0f6:	f7ff fd7f 	bl	8009bf8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d106      	bne.n	800a10e <RCC_GetSystemClockFreq+0x9a>
 800a100:	f7ff fd8e 	bl	8009c20 <LL_RCC_MSIS_GetRange>
 800a104:	4603      	mov	r3, r0
 800a106:	0b1b      	lsrs	r3, r3, #12
 800a108:	f003 030f 	and.w	r3, r3, #15
 800a10c:	e005      	b.n	800a11a <RCC_GetSystemClockFreq+0xa6>
 800a10e:	f7ff fd95 	bl	8009c3c <LL_RCC_MSIS_GetRangeAfterStandby>
 800a112:	4603      	mov	r3, r0
 800a114:	0b1b      	lsrs	r3, r3, #12
 800a116:	f003 030f 	and.w	r3, r3, #15
 800a11a:	4a23      	ldr	r2, [pc, #140]	@ (800a1a8 <RCC_GetSystemClockFreq+0x134>)
 800a11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a120:	607b      	str	r3, [r7, #4]
                                          ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                           LL_RCC_MSIS_GetRange() :
                                           LL_RCC_MSIS_GetRangeAfterStandby()));
      break;
 800a122:	e03b      	b.n	800a19c <RCC_GetSystemClockFreq+0x128>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:   /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800a124:	4b21      	ldr	r3, [pc, #132]	@ (800a1ac <RCC_GetSystemClockFreq+0x138>)
 800a126:	607b      	str	r3, [r7, #4]
      break;
 800a128:	e038      	b.n	800a19c <RCC_GetSystemClockFreq+0x128>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:   /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a12a:	4b20      	ldr	r3, [pc, #128]	@ (800a1ac <RCC_GetSystemClockFreq+0x138>)
 800a12c:	607b      	str	r3, [r7, #4]
      break;
 800a12e:	e035      	b.n	800a19c <RCC_GetSystemClockFreq+0x128>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:  /* PLL1 used as system clock  source */
      frequency = RCC_PLL1_GetFreqDomain_SYS();
 800a130:	f000 f87c 	bl	800a22c <RCC_PLL1_GetFreqDomain_SYS>
 800a134:	6078      	str	r0, [r7, #4]
      break;
 800a136:	e031      	b.n	800a19c <RCC_GetSystemClockFreq+0x128>

    default:
      frequency = __LL_RCC_CALC_MSIS_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800a138:	f7ff fd5e 	bl	8009bf8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d115      	bne.n	800a16e <RCC_GetSystemClockFreq+0xfa>
 800a142:	f7ff fd59 	bl	8009bf8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a146:	4603      	mov	r3, r0
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d106      	bne.n	800a15a <RCC_GetSystemClockFreq+0xe6>
 800a14c:	f7ff fd68 	bl	8009c20 <LL_RCC_MSIS_GetRange>
 800a150:	4603      	mov	r3, r0
 800a152:	0f1b      	lsrs	r3, r3, #28
 800a154:	f003 030f 	and.w	r3, r3, #15
 800a158:	e005      	b.n	800a166 <RCC_GetSystemClockFreq+0xf2>
 800a15a:	f7ff fd6f 	bl	8009c3c <LL_RCC_MSIS_GetRangeAfterStandby>
 800a15e:	4603      	mov	r3, r0
 800a160:	0f1b      	lsrs	r3, r3, #28
 800a162:	f003 030f 	and.w	r3, r3, #15
 800a166:	4a10      	ldr	r2, [pc, #64]	@ (800a1a8 <RCC_GetSystemClockFreq+0x134>)
 800a168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a16c:	e014      	b.n	800a198 <RCC_GetSystemClockFreq+0x124>
 800a16e:	f7ff fd43 	bl	8009bf8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a172:	4603      	mov	r3, r0
 800a174:	2b01      	cmp	r3, #1
 800a176:	d106      	bne.n	800a186 <RCC_GetSystemClockFreq+0x112>
 800a178:	f7ff fd52 	bl	8009c20 <LL_RCC_MSIS_GetRange>
 800a17c:	4603      	mov	r3, r0
 800a17e:	0b1b      	lsrs	r3, r3, #12
 800a180:	f003 030f 	and.w	r3, r3, #15
 800a184:	e005      	b.n	800a192 <RCC_GetSystemClockFreq+0x11e>
 800a186:	f7ff fd59 	bl	8009c3c <LL_RCC_MSIS_GetRangeAfterStandby>
 800a18a:	4603      	mov	r3, r0
 800a18c:	0b1b      	lsrs	r3, r3, #12
 800a18e:	f003 030f 	and.w	r3, r3, #15
 800a192:	4a05      	ldr	r2, [pc, #20]	@ (800a1a8 <RCC_GetSystemClockFreq+0x134>)
 800a194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a198:	607b      	str	r3, [r7, #4]
                                          ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                           LL_RCC_MSIS_GetRange() :
                                           LL_RCC_MSIS_GetRangeAfterStandby()));
      break;
 800a19a:	bf00      	nop
  }

  return frequency;
 800a19c:	687b      	ldr	r3, [r7, #4]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	0800d420 	.word	0x0800d420
 800a1ac:	00f42400 	.word	0x00f42400

0800a1b0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a1b8:	f7ff fd5c 	bl	8009c74 <LL_RCC_GetAHBPrescaler>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	f003 030f 	and.w	r3, r3, #15
 800a1c2:	4a04      	ldr	r2, [pc, #16]	@ (800a1d4 <RCC_GetHCLKClockFreq+0x24>)
 800a1c4:	5cd3      	ldrb	r3, [r2, r3]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	40d3      	lsrs	r3, r2
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	0800d408 	.word	0x0800d408

0800a1d8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a1e0:	f7ff fd56 	bl	8009c90 <LL_RCC_GetAPB1Prescaler>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	091b      	lsrs	r3, r3, #4
 800a1e8:	f003 0307 	and.w	r3, r3, #7
 800a1ec:	4a04      	ldr	r2, [pc, #16]	@ (800a200 <RCC_GetPCLK1ClockFreq+0x28>)
 800a1ee:	5cd3      	ldrb	r3, [r2, r3]
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	40d3      	lsrs	r3, r2
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	0800d418 	.word	0x0800d418

0800a204 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800a20c:	f7ff fd4e 	bl	8009cac <LL_RCC_GetAPB2Prescaler>
 800a210:	4603      	mov	r3, r0
 800a212:	0a1b      	lsrs	r3, r3, #8
 800a214:	4a04      	ldr	r2, [pc, #16]	@ (800a228 <RCC_GetPCLK2ClockFreq+0x24>)
 800a216:	5cd3      	ldrb	r3, [r2, r3]
 800a218:	461a      	mov	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	40d3      	lsrs	r3, r2
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	0800d418 	.word	0x0800d418

0800a22c <RCC_PLL1_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL1 clock frequency used for system domain
  * @retval PLL1 clock frequency (in Hz)
  */
static uint32_t RCC_PLL1_GetFreqDomain_SYS(void)
{
 800a22c:	b590      	push	{r4, r7, lr}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL1_GetMainSource();
 800a232:	f7ff fd81 	bl	8009d38 <LL_RCC_PLL1_GetMainSource>
 800a236:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d03e      	beq.n	800a2bc <RCC_PLL1_GetFreqDomain_SYS+0x90>
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2b03      	cmp	r3, #3
 800a242:	d83e      	bhi.n	800a2c2 <RCC_PLL1_GetFreqDomain_SYS+0x96>
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d003      	beq.n	800a252 <RCC_PLL1_GetFreqDomain_SYS+0x26>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d032      	beq.n	800a2b6 <RCC_PLL1_GetFreqDomain_SYS+0x8a>
 800a250:	e037      	b.n	800a2c2 <RCC_PLL1_GetFreqDomain_SYS+0x96>
  {
    case LL_RCC_PLL1SOURCE_MSIS:  /* MSIS used as PLL1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSIS_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800a252:	f7ff fcd1 	bl	8009bf8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a256:	4603      	mov	r3, r0
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d115      	bne.n	800a288 <RCC_PLL1_GetFreqDomain_SYS+0x5c>
 800a25c:	f7ff fccc 	bl	8009bf8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a260:	4603      	mov	r3, r0
 800a262:	2b01      	cmp	r3, #1
 800a264:	d106      	bne.n	800a274 <RCC_PLL1_GetFreqDomain_SYS+0x48>
 800a266:	f7ff fcdb 	bl	8009c20 <LL_RCC_MSIS_GetRange>
 800a26a:	4603      	mov	r3, r0
 800a26c:	0f1b      	lsrs	r3, r3, #28
 800a26e:	f003 030f 	and.w	r3, r3, #15
 800a272:	e005      	b.n	800a280 <RCC_PLL1_GetFreqDomain_SYS+0x54>
 800a274:	f7ff fce2 	bl	8009c3c <LL_RCC_MSIS_GetRangeAfterStandby>
 800a278:	4603      	mov	r3, r0
 800a27a:	0f1b      	lsrs	r3, r3, #28
 800a27c:	f003 030f 	and.w	r3, r3, #15
 800a280:	4a33      	ldr	r2, [pc, #204]	@ (800a350 <RCC_PLL1_GetFreqDomain_SYS+0x124>)
 800a282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a286:	e014      	b.n	800a2b2 <RCC_PLL1_GetFreqDomain_SYS+0x86>
 800a288:	f7ff fcb6 	bl	8009bf8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d106      	bne.n	800a2a0 <RCC_PLL1_GetFreqDomain_SYS+0x74>
 800a292:	f7ff fcc5 	bl	8009c20 <LL_RCC_MSIS_GetRange>
 800a296:	4603      	mov	r3, r0
 800a298:	0b1b      	lsrs	r3, r3, #12
 800a29a:	f003 030f 	and.w	r3, r3, #15
 800a29e:	e005      	b.n	800a2ac <RCC_PLL1_GetFreqDomain_SYS+0x80>
 800a2a0:	f7ff fccc 	bl	8009c3c <LL_RCC_MSIS_GetRangeAfterStandby>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	0b1b      	lsrs	r3, r3, #12
 800a2a8:	f003 030f 	and.w	r3, r3, #15
 800a2ac:	4a28      	ldr	r2, [pc, #160]	@ (800a350 <RCC_PLL1_GetFreqDomain_SYS+0x124>)
 800a2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2b2:	607b      	str	r3, [r7, #4]
                                             ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                              LL_RCC_MSIS_GetRange() :
                                              LL_RCC_MSIS_GetRangeAfterStandby()));
      break;
 800a2b4:	e037      	b.n	800a326 <RCC_PLL1_GetFreqDomain_SYS+0xfa>

    case LL_RCC_PLL1SOURCE_HSI:  /* HSI used as PLL1 clock source */
      pllinputfreq = HSI_VALUE;
 800a2b6:	4b27      	ldr	r3, [pc, #156]	@ (800a354 <RCC_PLL1_GetFreqDomain_SYS+0x128>)
 800a2b8:	607b      	str	r3, [r7, #4]
      break;
 800a2ba:	e034      	b.n	800a326 <RCC_PLL1_GetFreqDomain_SYS+0xfa>

    case LL_RCC_PLL1SOURCE_HSE:  /* HSE used as PLL1 clock source */
      pllinputfreq = HSE_VALUE;
 800a2bc:	4b25      	ldr	r3, [pc, #148]	@ (800a354 <RCC_PLL1_GetFreqDomain_SYS+0x128>)
 800a2be:	607b      	str	r3, [r7, #4]
      break;
 800a2c0:	e031      	b.n	800a326 <RCC_PLL1_GetFreqDomain_SYS+0xfa>

    default:
      pllinputfreq = __LL_RCC_CALC_MSIS_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800a2c2:	f7ff fc99 	bl	8009bf8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d115      	bne.n	800a2f8 <RCC_PLL1_GetFreqDomain_SYS+0xcc>
 800a2cc:	f7ff fc94 	bl	8009bf8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d106      	bne.n	800a2e4 <RCC_PLL1_GetFreqDomain_SYS+0xb8>
 800a2d6:	f7ff fca3 	bl	8009c20 <LL_RCC_MSIS_GetRange>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	0f1b      	lsrs	r3, r3, #28
 800a2de:	f003 030f 	and.w	r3, r3, #15
 800a2e2:	e005      	b.n	800a2f0 <RCC_PLL1_GetFreqDomain_SYS+0xc4>
 800a2e4:	f7ff fcaa 	bl	8009c3c <LL_RCC_MSIS_GetRangeAfterStandby>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	0f1b      	lsrs	r3, r3, #28
 800a2ec:	f003 030f 	and.w	r3, r3, #15
 800a2f0:	4a17      	ldr	r2, [pc, #92]	@ (800a350 <RCC_PLL1_GetFreqDomain_SYS+0x124>)
 800a2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2f6:	e014      	b.n	800a322 <RCC_PLL1_GetFreqDomain_SYS+0xf6>
 800a2f8:	f7ff fc7e 	bl	8009bf8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d106      	bne.n	800a310 <RCC_PLL1_GetFreqDomain_SYS+0xe4>
 800a302:	f7ff fc8d 	bl	8009c20 <LL_RCC_MSIS_GetRange>
 800a306:	4603      	mov	r3, r0
 800a308:	0b1b      	lsrs	r3, r3, #12
 800a30a:	f003 030f 	and.w	r3, r3, #15
 800a30e:	e005      	b.n	800a31c <RCC_PLL1_GetFreqDomain_SYS+0xf0>
 800a310:	f7ff fc94 	bl	8009c3c <LL_RCC_MSIS_GetRangeAfterStandby>
 800a314:	4603      	mov	r3, r0
 800a316:	0b1b      	lsrs	r3, r3, #12
 800a318:	f003 030f 	and.w	r3, r3, #15
 800a31c:	4a0c      	ldr	r2, [pc, #48]	@ (800a350 <RCC_PLL1_GetFreqDomain_SYS+0x124>)
 800a31e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a322:	607b      	str	r3, [r7, #4]
                                             ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                              LL_RCC_MSIS_GetRange() :
                                              LL_RCC_MSIS_GetRangeAfterStandby()));
      break;
 800a324:	bf00      	nop
  }
  return __LL_RCC_CALC_PLL1CLK_FREQ(pllinputfreq, LL_RCC_PLL1_GetDivider(),
 800a326:	f7ff fd33 	bl	8009d90 <LL_RCC_PLL1_GetDivider>
 800a32a:	4602      	mov	r2, r0
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	fbb3 f4f2 	udiv	r4, r3, r2
 800a332:	f7ff fd0f 	bl	8009d54 <LL_RCC_PLL1_GetN>
 800a336:	4603      	mov	r3, r0
 800a338:	fb03 f404 	mul.w	r4, r3, r4
 800a33c:	f7ff fd18 	bl	8009d70 <LL_RCC_PLL1_GetR>
 800a340:	4603      	mov	r3, r0
 800a342:	fbb4 f3f3 	udiv	r3, r4, r3
                                    LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetR());
}
 800a346:	4618      	mov	r0, r3
 800a348:	370c      	adds	r7, #12
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd90      	pop	{r4, r7, pc}
 800a34e:	bf00      	nop
 800a350:	0800d420 	.word	0x0800d420
 800a354:	00f42400 	.word	0x00f42400

0800a358 <LL_USART_IsEnabled>:
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d101      	bne.n	800a370 <LL_USART_IsEnabled+0x18>
 800a36c:	2301      	movs	r3, #1
 800a36e:	e000      	b.n	800a372 <LL_USART_IsEnabled+0x1a>
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <LL_USART_SetPrescaler>:
{
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a38c:	f023 030f 	bic.w	r3, r3, #15
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	b292      	uxth	r2, r2
 800a394:	431a      	orrs	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a39a:	bf00      	nop
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <LL_USART_SetStopBitsLength>:
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	431a      	orrs	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	605a      	str	r2, [r3, #4]
}
 800a3c0:	bf00      	nop
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <LL_USART_SetHWFlowCtrl>:
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	609a      	str	r2, [r3, #8]
}
 800a3e6:	bf00      	nop
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
	...

0800a3f4 <LL_USART_SetBaudRate>:
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
 800a400:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b0b      	cmp	r3, #11
 800a406:	d83c      	bhi.n	800a482 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d039      	beq.n	800a482 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a414:	d122      	bne.n	800a45c <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	461a      	mov	r2, r3
 800a41c:	4b1c      	ldr	r3, [pc, #112]	@ (800a490 <LL_USART_SetBaudRate+0x9c>)
 800a41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	fbb2 f3f3 	udiv	r3, r2, r3
 800a428:	005a      	lsls	r2, r3, #1
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	085b      	lsrs	r3, r3, #1
 800a42e:	441a      	add	r2, r3
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	fbb2 f3f3 	udiv	r3, r2, r3
 800a436:	b29b      	uxth	r3, r3
 800a438:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800a440:	4013      	ands	r3, r2
 800a442:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	085b      	lsrs	r3, r3, #1
 800a448:	b29b      	uxth	r3, r3
 800a44a:	f003 0307 	and.w	r3, r3, #7
 800a44e:	693a      	ldr	r2, [r7, #16]
 800a450:	4313      	orrs	r3, r2
 800a452:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	60da      	str	r2, [r3, #12]
}
 800a45a:	e012      	b.n	800a482 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	461a      	mov	r2, r3
 800a462:	4b0b      	ldr	r3, [pc, #44]	@ (800a490 <LL_USART_SetBaudRate+0x9c>)
 800a464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	085b      	lsrs	r3, r3, #1
 800a472:	441a      	add	r2, r3
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	fbb2 f3f3 	udiv	r3, r2, r3
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	461a      	mov	r2, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	60da      	str	r2, [r3, #12]
}
 800a482:	bf00      	nop
 800a484:	371c      	adds	r7, #28
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	0800d4e0 	.word	0x0800d4e0

0800a494 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b086      	sub	sp, #24
 800a498:	af02      	add	r7, sp, #8
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7ff ff56 	bl	800a358 <LL_USART_IsEnabled>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d165      	bne.n	800a57e <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	4b34      	ldr	r3, [pc, #208]	@ (800a588 <LL_USART_Init+0xf4>)
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	6891      	ldr	r1, [r2, #8]
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	6912      	ldr	r2, [r2, #16]
 800a4c2:	4311      	orrs	r1, r2
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	6952      	ldr	r2, [r2, #20]
 800a4c8:	4311      	orrs	r1, r2
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	69d2      	ldr	r2, [r2, #28]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	431a      	orrs	r2, r3
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	4619      	mov	r1, r3
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7ff ff62 	bl	800a3a6 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7ff ff6f 	bl	800a3cc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a26      	ldr	r2, [pc, #152]	@ (800a58c <LL_USART_Init+0xf8>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d104      	bne.n	800a500 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800a4f6:	2003      	movs	r0, #3
 800a4f8:	f7ff fc5a 	bl	8009db0 <LL_RCC_GetUSARTClockFreq>
 800a4fc:	60b8      	str	r0, [r7, #8]
 800a4fe:	e023      	b.n	800a548 <LL_USART_Init+0xb4>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a23      	ldr	r2, [pc, #140]	@ (800a590 <LL_USART_Init+0xfc>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d104      	bne.n	800a512 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800a508:	4822      	ldr	r0, [pc, #136]	@ (800a594 <LL_USART_Init+0x100>)
 800a50a:	f7ff fc51 	bl	8009db0 <LL_RCC_GetUSARTClockFreq>
 800a50e:	60b8      	str	r0, [r7, #8]
 800a510:	e01a      	b.n	800a548 <LL_USART_Init+0xb4>
    }
#endif /* USART2 */
    else if (USARTx == USART3)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a20      	ldr	r2, [pc, #128]	@ (800a598 <LL_USART_Init+0x104>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d104      	bne.n	800a524 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800a51a:	4820      	ldr	r0, [pc, #128]	@ (800a59c <LL_USART_Init+0x108>)
 800a51c:	f7ff fc48 	bl	8009db0 <LL_RCC_GetUSARTClockFreq>
 800a520:	60b8      	str	r0, [r7, #8]
 800a522:	e011      	b.n	800a548 <LL_USART_Init+0xb4>
    }
    else if (USARTx == UART4)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a1e      	ldr	r2, [pc, #120]	@ (800a5a0 <LL_USART_Init+0x10c>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d104      	bne.n	800a536 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800a52c:	20c0      	movs	r0, #192	@ 0xc0
 800a52e:	f7ff fd0b 	bl	8009f48 <LL_RCC_GetUARTClockFreq>
 800a532:	60b8      	str	r0, [r7, #8]
 800a534:	e008      	b.n	800a548 <LL_USART_Init+0xb4>
    }
    else if (USARTx == UART5)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a1a      	ldr	r2, [pc, #104]	@ (800a5a4 <LL_USART_Init+0x110>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d104      	bne.n	800a548 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800a53e:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800a542:	f7ff fd01 	bl	8009f48 <LL_RCC_GetUARTClockFreq>
 800a546:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d011      	beq.n	800a572 <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00d      	beq.n	800a572 <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 800a556:	2300      	movs	r3, #0
 800a558:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	460b      	mov	r3, r1
 800a56a:	68b9      	ldr	r1, [r7, #8]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f7ff ff41 	bl	800a3f4 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff ff00 	bl	800a37e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	efff69f3 	.word	0xefff69f3
 800a58c:	40013800 	.word	0x40013800
 800a590:	40004400 	.word	0x40004400
 800a594:	00020003 	.word	0x00020003
 800a598:	40004800 	.word	0x40004800
 800a59c:	00040003 	.word	0x00040003
 800a5a0:	40004c00 	.word	0x40004c00
 800a5a4:	40005000 	.word	0x40005000

0800a5a8 <__NVIC_SetPriority>:
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	6039      	str	r1, [r7, #0]
 800a5b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	db0a      	blt.n	800a5d2 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	b2da      	uxtb	r2, r3
 800a5c0:	490c      	ldr	r1, [pc, #48]	@ (800a5f4 <__NVIC_SetPriority+0x4c>)
 800a5c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5c6:	0112      	lsls	r2, r2, #4
 800a5c8:	b2d2      	uxtb	r2, r2
 800a5ca:	440b      	add	r3, r1
 800a5cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a5d0:	e00a      	b.n	800a5e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	4908      	ldr	r1, [pc, #32]	@ (800a5f8 <__NVIC_SetPriority+0x50>)
 800a5d8:	79fb      	ldrb	r3, [r7, #7]
 800a5da:	f003 030f 	and.w	r3, r3, #15
 800a5de:	3b04      	subs	r3, #4
 800a5e0:	0112      	lsls	r2, r2, #4
 800a5e2:	b2d2      	uxtb	r2, r2
 800a5e4:	440b      	add	r3, r1
 800a5e6:	761a      	strb	r2, [r3, #24]
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	e000e100 	.word	0xe000e100
 800a5f8:	e000ed00 	.word	0xe000ed00

0800a5fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800a600:	4b05      	ldr	r3, [pc, #20]	@ (800a618 <SysTick_Handler+0x1c>)
 800a602:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a604:	f001 fd5c 	bl	800c0c0 <xTaskGetSchedulerState>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d001      	beq.n	800a612 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a60e:	f002 f907 	bl	800c820 <xPortSysTickHandler>
  }
}
 800a612:	bf00      	nop
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	e000e010 	.word	0xe000e010

0800a61c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800a620:	2100      	movs	r1, #0
 800a622:	f06f 0004 	mvn.w	r0, #4
 800a626:	f7ff ffbf 	bl	800a5a8 <__NVIC_SetPriority>
#endif
}
 800a62a:	bf00      	nop
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800a62e:	b580      	push	{r7, lr}
 800a630:	b086      	sub	sp, #24
 800a632:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800a634:	2300      	movs	r3, #0
 800a636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a638:	f3ef 8305 	mrs	r3, IPSR
 800a63c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a63e:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800a644:	2301      	movs	r3, #1
 800a646:	617b      	str	r3, [r7, #20]
 800a648:	e013      	b.n	800a672 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800a64a:	f001 fd39 	bl	800c0c0 <xTaskGetSchedulerState>
 800a64e:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d00d      	beq.n	800a672 <IRQ_Context+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a656:	f3ef 8310 	mrs	r3, PRIMASK
 800a65a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a65c:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d105      	bne.n	800a66e <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a662:	f3ef 8311 	mrs	r3, BASEPRI
 800a666:	607b      	str	r3, [r7, #4]
  return(result);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800a66e:	2301      	movs	r3, #1
 800a670:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800a672:	697b      	ldr	r3, [r7, #20]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3718      	adds	r7, #24
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800a682:	f7ff ffd4 	bl	800a62e <IRQ_Context>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d003      	beq.n	800a694 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800a68c:	f06f 0305 	mvn.w	r3, #5
 800a690:	607b      	str	r3, [r7, #4]
 800a692:	e012      	b.n	800a6ba <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800a694:	f001 fd14 	bl	800c0c0 <xTaskGetSchedulerState>
 800a698:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d109      	bne.n	800a6b4 <osKernelInitialize+0x38>
 800a6a0:	4b08      	ldr	r3, [pc, #32]	@ (800a6c4 <osKernelInitialize+0x48>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d105      	bne.n	800a6b4 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a6a8:	4b06      	ldr	r3, [pc, #24]	@ (800a6c4 <osKernelInitialize+0x48>)
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	607b      	str	r3, [r7, #4]
 800a6b2:	e002      	b.n	800a6ba <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800a6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b8:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800a6ba:	687b      	ldr	r3, [r7, #4]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	20000934 	.word	0x20000934

0800a6c8 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800a6ce:	f7ff ffae 	bl	800a62e <IRQ_Context>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d003      	beq.n	800a6e0 <osKernelStart+0x18>
    stat = osErrorISR;
 800a6d8:	f06f 0305 	mvn.w	r3, #5
 800a6dc:	607b      	str	r3, [r7, #4]
 800a6de:	e016      	b.n	800a70e <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800a6e0:	f001 fcee 	bl	800c0c0 <xTaskGetSchedulerState>
 800a6e4:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d10d      	bne.n	800a708 <osKernelStart+0x40>
 800a6ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a718 <osKernelStart+0x50>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d109      	bne.n	800a708 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a6f4:	f7ff ff92 	bl	800a61c <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800a6f8:	4b07      	ldr	r3, [pc, #28]	@ (800a718 <osKernelStart+0x50>)
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a6fe:	f000 ff4f 	bl	800b5a0 <vTaskStartScheduler>
      stat = osOK;
 800a702:	2300      	movs	r3, #0
 800a704:	607b      	str	r3, [r7, #4]
 800a706:	e002      	b.n	800a70e <osKernelStart+0x46>
    } else {
      stat = osError;
 800a708:	f04f 33ff 	mov.w	r3, #4294967295
 800a70c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800a70e:	687b      	ldr	r3, [r7, #4]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	20000934 	.word	0x20000934

0800a71c <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b08e      	sub	sp, #56	@ 0x38
 800a720:	af04      	add	r7, sp, #16
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a728:	2300      	movs	r3, #0
 800a72a:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800a72c:	f7ff ff7f 	bl	800a62e <IRQ_Context>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d17e      	bne.n	800a834 <osThreadNew+0x118>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d07b      	beq.n	800a834 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 800a73c:	2380      	movs	r3, #128	@ 0x80
 800a73e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a740:	2318      	movs	r3, #24
 800a742:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a744:	2300      	movs	r3, #0
 800a746:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a748:	f04f 33ff 	mov.w	r3, #4294967295
 800a74c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d045      	beq.n	800a7e0 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d002      	beq.n	800a762 <osThreadNew+0x46>
        name = attr->name;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d008      	beq.n	800a788 <osThreadNew+0x6c>
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	2b38      	cmp	r3, #56	@ 0x38
 800a77a:	d805      	bhi.n	800a788 <osThreadNew+0x6c>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800a788:	2300      	movs	r3, #0
 800a78a:	e054      	b.n	800a836 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d003      	beq.n	800a79c <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	089b      	lsrs	r3, r3, #2
 800a79a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00e      	beq.n	800a7c2 <osThreadNew+0xa6>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	2baf      	cmp	r3, #175	@ 0xaf
 800a7aa:	d90a      	bls.n	800a7c2 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d006      	beq.n	800a7c2 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	695b      	ldr	r3, [r3, #20]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	61bb      	str	r3, [r7, #24]
 800a7c0:	e010      	b.n	800a7e4 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10c      	bne.n	800a7e4 <osThreadNew+0xc8>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d108      	bne.n	800a7e4 <osThreadNew+0xc8>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d104      	bne.n	800a7e4 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	61bb      	str	r3, [r7, #24]
 800a7de:	e001      	b.n	800a7e4 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d110      	bne.n	800a80c <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7f2:	9202      	str	r2, [sp, #8]
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	6a3a      	ldr	r2, [r7, #32]
 800a7fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f000 fce3 	bl	800b1cc <xTaskCreateStatic>
 800a806:	4603      	mov	r3, r0
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	e013      	b.n	800a834 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d110      	bne.n	800a834 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	b29a      	uxth	r2, r3
 800a816:	f107 0314 	add.w	r3, r7, #20
 800a81a:	9301      	str	r3, [sp, #4]
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f000 fd1e 	bl	800b266 <xTaskCreate>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d001      	beq.n	800a834 <osThreadNew+0x118>
            hTask = NULL;
 800a830:	2300      	movs	r3, #0
 800a832:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800a834:	697b      	ldr	r3, [r7, #20]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3728      	adds	r7, #40	@ 0x28
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800a83e:	b580      	push	{r7, lr}
 800a840:	b084      	sub	sp, #16
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800a846:	f7ff fef2 	bl	800a62e <IRQ_Context>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d003      	beq.n	800a858 <osDelay+0x1a>
    stat = osErrorISR;
 800a850:	f06f 0305 	mvn.w	r3, #5
 800a854:	60fb      	str	r3, [r7, #12]
 800a856:	e007      	b.n	800a868 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800a858:	2300      	movs	r3, #0
 800a85a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d002      	beq.n	800a868 <osDelay+0x2a>
      vTaskDelay(ticks);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fe76 	bl	800b554 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800a868:	68fb      	ldr	r3, [r7, #12]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <osEventFlagsNew>:
  Create and Initialize an Event Flags object.

  Limitations:
  - Event flags are limited to 24 bits.
*/
osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800a872:	b580      	push	{r7, lr}
 800a874:	b084      	sub	sp, #16
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800a87a:	2300      	movs	r3, #0
 800a87c:	60fb      	str	r3, [r7, #12]

  if (IRQ_Context() == 0U) {
 800a87e:	f7ff fed6 	bl	800a62e <IRQ_Context>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d12d      	bne.n	800a8e4 <osEventFlagsNew+0x72>
    mem = -1;
 800a888:	f04f 33ff 	mov.w	r3, #4294967295
 800a88c:	60bb      	str	r3, [r7, #8]

    if (attr != NULL) {
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d015      	beq.n	800a8c0 <osEventFlagsNew+0x4e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d006      	beq.n	800a8aa <osEventFlagsNew+0x38>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	2b1f      	cmp	r3, #31
 800a8a2:	d902      	bls.n	800a8aa <osEventFlagsNew+0x38>
        /* The memory for control block is provided, use static object */
        mem = 1;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	60bb      	str	r3, [r7, #8]
 800a8a8:	e00c      	b.n	800a8c4 <osEventFlagsNew+0x52>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d108      	bne.n	800a8c4 <osEventFlagsNew+0x52>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d104      	bne.n	800a8c4 <osEventFlagsNew+0x52>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	60bb      	str	r3, [r7, #8]
 800a8be:	e001      	b.n	800a8c4 <osEventFlagsNew+0x52>
        }
      }
    }
    else {
      mem = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	60bb      	str	r3, [r7, #8]
    }

    if (mem == 1) {
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d106      	bne.n	800a8d8 <osEventFlagsNew+0x66>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 f8b4 	bl	800aa3c <xEventGroupCreateStatic>
 800a8d4:	60f8      	str	r0, [r7, #12]
 800a8d6:	e005      	b.n	800a8e4 <osEventFlagsNew+0x72>
      #endif
    }
    else {
      if (mem == 0) {
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d102      	bne.n	800a8e4 <osEventFlagsNew+0x72>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800a8de:	f000 f8d6 	bl	800aa8e <xEventGroupCreate>
 800a8e2:	60f8      	str	r0, [r7, #12]
      }
    }
  }

  /* Return event flags ID */
  return ((osEventFlagsId_t)hEventGroup);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b088      	sub	sp, #32
 800a8f2:	af02      	add	r7, sp, #8
 800a8f4:	60f8      	str	r0, [r7, #12]
 800a8f6:	60b9      	str	r1, [r7, #8]
 800a8f8:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800a8fe:	f7ff fe96 	bl	800a62e <IRQ_Context>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d15f      	bne.n	800a9c8 <osMessageQueueNew+0xda>
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d05c      	beq.n	800a9c8 <osMessageQueueNew+0xda>
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d059      	beq.n	800a9c8 <osMessageQueueNew+0xda>
    mem = -1;
 800a914:	f04f 33ff 	mov.w	r3, #4294967295
 800a918:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d029      	beq.n	800a974 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d012      	beq.n	800a94e <osMessageQueueNew+0x60>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	2b4f      	cmp	r3, #79	@ 0x4f
 800a92e:	d90e      	bls.n	800a94e <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00a      	beq.n	800a94e <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	695a      	ldr	r2, [r3, #20]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	68b9      	ldr	r1, [r7, #8]
 800a940:	fb01 f303 	mul.w	r3, r1, r3
 800a944:	429a      	cmp	r2, r3
 800a946:	d302      	bcc.n	800a94e <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 800a948:	2301      	movs	r3, #1
 800a94a:	613b      	str	r3, [r7, #16]
 800a94c:	e014      	b.n	800a978 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d110      	bne.n	800a978 <osMessageQueueNew+0x8a>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10c      	bne.n	800a978 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a962:	2b00      	cmp	r3, #0
 800a964:	d108      	bne.n	800a978 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	695b      	ldr	r3, [r3, #20]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d104      	bne.n	800a978 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	613b      	str	r3, [r7, #16]
 800a972:	e001      	b.n	800a978 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800a974:	2300      	movs	r3, #0
 800a976:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d10b      	bne.n	800a996 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	691a      	ldr	r2, [r3, #16]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	2100      	movs	r1, #0
 800a988:	9100      	str	r1, [sp, #0]
 800a98a:	68b9      	ldr	r1, [r7, #8]
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f000 f9a1 	bl	800acd4 <xQueueGenericCreateStatic>
 800a992:	6178      	str	r0, [r7, #20]
 800a994:	e008      	b.n	800a9a8 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d105      	bne.n	800a9a8 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a99c:	2200      	movs	r2, #0
 800a99e:	68b9      	ldr	r1, [r7, #8]
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 f9e0 	bl	800ad66 <xQueueGenericCreate>
 800a9a6:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00c      	beq.n	800a9c8 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d009      	beq.n	800a9c8 <osMessageQueueNew+0xda>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d005      	beq.n	800a9c8 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6978      	ldr	r0, [r7, #20]
 800a9c4:	f000 fb88 	bl	800b0d8 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 800a9c8:	697b      	ldr	r3, [r7, #20]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3718      	adds	r7, #24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	4a07      	ldr	r2, [pc, #28]	@ (800aa00 <vApplicationGetIdleTaskMemory+0x2c>)
 800a9e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	4a06      	ldr	r2, [pc, #24]	@ (800aa04 <vApplicationGetIdleTaskMemory+0x30>)
 800a9ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2280      	movs	r2, #128	@ 0x80
 800a9f0:	601a      	str	r2, [r3, #0]
}
 800a9f2:	bf00      	nop
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	20000938 	.word	0x20000938
 800aa04:	200009e8 	.word	0x200009e8

0800aa08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4a07      	ldr	r2, [pc, #28]	@ (800aa34 <vApplicationGetTimerTaskMemory+0x2c>)
 800aa18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	4a06      	ldr	r2, [pc, #24]	@ (800aa38 <vApplicationGetTimerTaskMemory+0x30>)
 800aa1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aa26:	601a      	str	r2, [r3, #0]
}
 800aa28:	bf00      	nop
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	20000be8 	.word	0x20000be8
 800aa38:	20000c98 	.word	0x20000c98

0800aa3c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_STATIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer )
    {
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits;

        /* A StaticEventGroup_t object must be provided. */
        configASSERT( pxEventGroupBuffer );
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d103      	bne.n	800aa52 <xEventGroupCreateStatic+0x16>
 800aa4a:	f001 fffd 	bl	800ca48 <ulSetInterruptMask>
 800aa4e:	bf00      	nop
 800aa50:	e7fd      	b.n	800aa4e <xEventGroupCreateStatic+0x12>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticEventGroup_t equals the size of the real
             * event group structure. */
            volatile size_t xSize = sizeof( StaticEventGroup_t );
 800aa52:	2320      	movs	r3, #32
 800aa54:	60bb      	str	r3, [r7, #8]
            configASSERT( xSize == sizeof( EventGroup_t ) );
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	2b20      	cmp	r3, #32
 800aa5a:	d003      	beq.n	800aa64 <xEventGroupCreateStatic+0x28>
 800aa5c:	f001 fff4 	bl	800ca48 <ulSetInterruptMask>
 800aa60:	bf00      	nop
 800aa62:	e7fd      	b.n	800aa60 <xEventGroupCreateStatic+0x24>
        } /*lint !e529 xSize is referenced if configASSERT() is defined. */
        #endif /* configASSERT_DEFINED */

        /* The user has provided a statically allocated event group - use it. */
        pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	60fb      	str	r3, [r7, #12]

        if( pxEventBits != NULL )
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00a      	beq.n	800aa84 <xEventGroupCreateStatic+0x48>
        {
            pxEventBits->uxEventBits = 0;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2200      	movs	r2, #0
 800aa72:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	3304      	adds	r3, #4
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 f822 	bl	800aac2 <vListInitialise>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Both static and dynamic allocation can be used, so note that
                 * this event group was created statically in case the event group
                 * is later deleted. */
                pxEventBits->ucStaticallyAllocated = pdTRUE;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2201      	movs	r2, #1
 800aa82:	771a      	strb	r2, [r3, #28]
             * pxEventGroupBuffer pointing to a pre-allocated (compile time
             * allocated) StaticEventGroup_t variable. */
            traceEVENT_GROUP_CREATE_FAILED();
        }

        return pxEventBits;
 800aa84:	68fb      	ldr	r3, [r7, #12]
    }
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800aa94:	2020      	movs	r0, #32
 800aa96:	f002 f837 	bl	800cb08 <pvPortMalloc>
 800aa9a:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <xEventGroupCreate+0x2a>
        {
            pxEventBits->uxEventBits = 0;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	3304      	adds	r3, #4
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 f808 	bl	800aac2 <vListInitialise>
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                /* Both static and dynamic allocation can be used, so note this
                 * event group was allocated statically in case the event group is
                 * later deleted. */
                pxEventBits->ucStaticallyAllocated = pdFALSE;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	771a      	strb	r2, [r3, #28]
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 800aab8:	687b      	ldr	r3, [r7, #4]
    }
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aac2:	b480      	push	{r7}
 800aac4:	b083      	sub	sp, #12
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f103 0208 	add.w	r2, r3, #8
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f04f 32ff 	mov.w	r2, #4294967295
 800aada:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f103 0208 	add.w	r2, r3, #8
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f103 0208 	add.w	r2, r3, #8
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab02:	b480      	push	{r7}
 800ab04:	b083      	sub	sp, #12
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab10:	bf00      	nop
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab32:	d103      	bne.n	800ab3c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	60fb      	str	r3, [r7, #12]
 800ab3a:	e00c      	b.n	800ab56 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	3308      	adds	r3, #8
 800ab40:	60fb      	str	r3, [r7, #12]
 800ab42:	e002      	b.n	800ab4a <vListInsert+0x2e>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	60fb      	str	r3, [r7, #12]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d2f6      	bcs.n	800ab44 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	685a      	ldr	r2, [r3, #4]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	601a      	str	r2, [r3, #0]
}
 800ab82:	bf00      	nop
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b085      	sub	sp, #20
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	6892      	ldr	r2, [r2, #8]
 800aba4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	6852      	ldr	r2, [r2, #4]
 800abae:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d103      	bne.n	800abc2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	689a      	ldr	r2, [r3, #8]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	1e5a      	subs	r2, r3, #1
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800abec:	2301      	movs	r3, #1
 800abee:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d103      	bne.n	800ac02 <xQueueGenericReset+0x20>
 800abfa:	f001 ff25 	bl	800ca48 <ulSetInterruptMask>
 800abfe:	bf00      	nop
 800ac00:	e7fd      	b.n	800abfe <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d057      	beq.n	800acb8 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d053      	beq.n	800acb8 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac18:	2100      	movs	r1, #0
 800ac1a:	fba3 2302 	umull	r2, r3, r3, r2
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d000      	beq.n	800ac24 <xQueueGenericReset+0x42>
 800ac22:	2101      	movs	r1, #1
 800ac24:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d146      	bne.n	800acb8 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 800ac2a:	f001 fdcd 	bl	800c7c8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac36:	68b9      	ldr	r1, [r7, #8]
 800ac38:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac3a:	fb01 f303 	mul.w	r3, r1, r3
 800ac3e:	441a      	add	r2, r3
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2200      	movs	r2, #0
 800ac48:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	68b9      	ldr	r1, [r7, #8]
 800ac5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac60:	fb01 f303 	mul.w	r3, r1, r3
 800ac64:	441a      	add	r2, r3
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	22ff      	movs	r2, #255	@ 0xff
 800ac6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	22ff      	movs	r2, #255	@ 0xff
 800ac76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d10e      	bne.n	800ac9e <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d014      	beq.n	800acb2 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	3310      	adds	r3, #16
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f001 f805 	bl	800bc9c <xTaskRemoveFromEventList>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00c      	beq.n	800acb2 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800ac98:	f001 fd84 	bl	800c7a4 <vPortYield>
 800ac9c:	e009      	b.n	800acb2 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	3310      	adds	r3, #16
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff ff0d 	bl	800aac2 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	3324      	adds	r3, #36	@ 0x24
 800acac:	4618      	mov	r0, r3
 800acae:	f7ff ff08 	bl	800aac2 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800acb2:	f001 fd9b 	bl	800c7ec <vPortExitCritical>
 800acb6:	e001      	b.n	800acbc <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800acb8:	2300      	movs	r3, #0
 800acba:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d103      	bne.n	800acca <xQueueGenericReset+0xe8>
 800acc2:	f001 fec1 	bl	800ca48 <ulSetInterruptMask>
 800acc6:	bf00      	nop
 800acc8:	e7fd      	b.n	800acc6 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800acca:	68fb      	ldr	r3, [r7, #12]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af02      	add	r7, sp, #8
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800ace2:	2300      	movs	r3, #0
 800ace4:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d103      	bne.n	800acf4 <xQueueGenericCreateStatic+0x20>
 800acec:	f001 feac 	bl	800ca48 <ulSetInterruptMask>
 800acf0:	bf00      	nop
 800acf2:	e7fd      	b.n	800acf0 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d029      	beq.n	800ad4e <xQueueGenericCreateStatic+0x7a>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d026      	beq.n	800ad4e <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d002      	beq.n	800ad0c <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d020      	beq.n	800ad4e <xQueueGenericCreateStatic+0x7a>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d102      	bne.n	800ad18 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d11a      	bne.n	800ad4e <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800ad18:	2350      	movs	r3, #80	@ 0x50
 800ad1a:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	2b50      	cmp	r3, #80	@ 0x50
 800ad20:	d003      	beq.n	800ad2a <xQueueGenericCreateStatic+0x56>
 800ad22:	f001 fe91 	bl	800ca48 <ulSetInterruptMask>
 800ad26:	bf00      	nop
 800ad28:	e7fd      	b.n	800ad26 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800ad2a:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad38:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	4613      	mov	r3, r2
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	68b9      	ldr	r1, [r7, #8]
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f000 f858 	bl	800adfc <prvInitialiseNewQueue>
 800ad4c:	e006      	b.n	800ad5c <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d103      	bne.n	800ad5c <xQueueGenericCreateStatic+0x88>
 800ad54:	f001 fe78 	bl	800ca48 <ulSetInterruptMask>
 800ad58:	bf00      	nop
 800ad5a:	e7fd      	b.n	800ad58 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800ad5c:	697b      	ldr	r3, [r7, #20]
    }
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3718      	adds	r7, #24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b08a      	sub	sp, #40	@ 0x28
 800ad6a:	af02      	add	r7, sp, #8
 800ad6c:	60f8      	str	r0, [r7, #12]
 800ad6e:	60b9      	str	r1, [r7, #8]
 800ad70:	4613      	mov	r3, r2
 800ad72:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800ad74:	2300      	movs	r3, #0
 800ad76:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d032      	beq.n	800ade4 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800ad7e:	2100      	movs	r1, #0
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	fba3 2302 	umull	r2, r3, r3, r2
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d000      	beq.n	800ad8e <xQueueGenericCreate+0x28>
 800ad8c:	2101      	movs	r1, #1
 800ad8e:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d127      	bne.n	800ade4 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800ad9c:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800ada0:	d820      	bhi.n	800ade4 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	fb02 f303 	mul.w	r3, r2, r3
 800adaa:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	3350      	adds	r3, #80	@ 0x50
 800adb0:	4618      	mov	r0, r3
 800adb2:	f001 fea9 	bl	800cb08 <pvPortMalloc>
 800adb6:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d019      	beq.n	800adf2 <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	3350      	adds	r3, #80	@ 0x50
 800adc6:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800add0:	79fa      	ldrb	r2, [r7, #7]
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	4613      	mov	r3, r2
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	68b9      	ldr	r1, [r7, #8]
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f000 f80d 	bl	800adfc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800ade2:	e006      	b.n	800adf2 <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d103      	bne.n	800adf2 <xQueueGenericCreate+0x8c>
 800adea:	f001 fe2d 	bl	800ca48 <ulSetInterruptMask>
 800adee:	bf00      	nop
 800adf0:	e7fd      	b.n	800adee <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800adf2:	69fb      	ldr	r3, [r7, #28]
    }
 800adf4:	4618      	mov	r0, r3
 800adf6:	3720      	adds	r7, #32
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
 800ae08:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d103      	bne.n	800ae18 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	69ba      	ldr	r2, [r7, #24]
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	e002      	b.n	800ae1e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	69b8      	ldr	r0, [r7, #24]
 800ae2e:	f7ff fed8 	bl	800abe2 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	78fa      	ldrb	r2, [r7, #3]
 800ae36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800ae3a:	bf00      	nop
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b08a      	sub	sp, #40	@ 0x28
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	60f8      	str	r0, [r7, #12]
 800ae4a:	60b9      	str	r1, [r7, #8]
 800ae4c:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d103      	bne.n	800ae64 <xQueueReceive+0x22>
 800ae5c:	f001 fdf4 	bl	800ca48 <ulSetInterruptMask>
 800ae60:	bf00      	nop
 800ae62:	e7fd      	b.n	800ae60 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d103      	bne.n	800ae72 <xQueueReceive+0x30>
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <xQueueReceive+0x34>
 800ae72:	2301      	movs	r3, #1
 800ae74:	e000      	b.n	800ae78 <xQueueReceive+0x36>
 800ae76:	2300      	movs	r3, #0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d103      	bne.n	800ae84 <xQueueReceive+0x42>
 800ae7c:	f001 fde4 	bl	800ca48 <ulSetInterruptMask>
 800ae80:	bf00      	nop
 800ae82:	e7fd      	b.n	800ae80 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae84:	f001 f91c 	bl	800c0c0 <xTaskGetSchedulerState>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d102      	bne.n	800ae94 <xQueueReceive+0x52>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d101      	bne.n	800ae98 <xQueueReceive+0x56>
 800ae94:	2301      	movs	r3, #1
 800ae96:	e000      	b.n	800ae9a <xQueueReceive+0x58>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d103      	bne.n	800aea6 <xQueueReceive+0x64>
 800ae9e:	f001 fdd3 	bl	800ca48 <ulSetInterruptMask>
 800aea2:	bf00      	nop
 800aea4:	e7fd      	b.n	800aea2 <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800aea6:	f001 fc8f 	bl	800c7c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aeaa:	6a3b      	ldr	r3, [r7, #32]
 800aeac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeae:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d019      	beq.n	800aeea <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aeb6:	68b9      	ldr	r1, [r7, #8]
 800aeb8:	6a38      	ldr	r0, [r7, #32]
 800aeba:	f000 f87e 	bl	800afba <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	1e5a      	subs	r2, r3, #1
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aec6:	6a3b      	ldr	r3, [r7, #32]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d009      	beq.n	800aee2 <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aece:	6a3b      	ldr	r3, [r7, #32]
 800aed0:	3310      	adds	r3, #16
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 fee2 	bl	800bc9c <xTaskRemoveFromEventList>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d001      	beq.n	800aee2 <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800aede:	f001 fc61 	bl	800c7a4 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800aee2:	f001 fc83 	bl	800c7ec <vPortExitCritical>
                return pdPASS;
 800aee6:	2301      	movs	r3, #1
 800aee8:	e063      	b.n	800afb2 <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d103      	bne.n	800aef8 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800aef0:	f001 fc7c 	bl	800c7ec <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800aef4:	2300      	movs	r3, #0
 800aef6:	e05c      	b.n	800afb2 <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800aef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d106      	bne.n	800af0c <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800aefe:	f107 0314 	add.w	r3, r7, #20
 800af02:	4618      	mov	r0, r3
 800af04:	f000 ff98 	bl	800be38 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800af08:	2301      	movs	r3, #1
 800af0a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800af0c:	f001 fc6e 	bl	800c7ec <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800af10:	f000 fbac 	bl	800b66c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800af14:	f001 fc58 	bl	800c7c8 <vPortEnterCritical>
 800af18:	6a3b      	ldr	r3, [r7, #32]
 800af1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af1e:	b25b      	sxtb	r3, r3
 800af20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af24:	d103      	bne.n	800af2e <xQueueReceive+0xec>
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af2e:	6a3b      	ldr	r3, [r7, #32]
 800af30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af34:	b25b      	sxtb	r3, r3
 800af36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3a:	d103      	bne.n	800af44 <xQueueReceive+0x102>
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af44:	f001 fc52 	bl	800c7ec <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af48:	1d3a      	adds	r2, r7, #4
 800af4a:	f107 0314 	add.w	r3, r7, #20
 800af4e:	4611      	mov	r1, r2
 800af50:	4618      	mov	r0, r3
 800af52:	f000 ff87 	bl	800be64 <xTaskCheckForTimeOut>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d11d      	bne.n	800af98 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af5c:	6a38      	ldr	r0, [r7, #32]
 800af5e:	f000 f8a4 	bl	800b0aa <prvIsQueueEmpty>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d011      	beq.n	800af8c <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af68:	6a3b      	ldr	r3, [r7, #32]
 800af6a:	3324      	adds	r3, #36	@ 0x24
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	4611      	mov	r1, r2
 800af70:	4618      	mov	r0, r3
 800af72:	f000 fe37 	bl	800bbe4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800af76:	6a38      	ldr	r0, [r7, #32]
 800af78:	f000 f845 	bl	800b006 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800af7c:	f000 fb84 	bl	800b688 <xTaskResumeAll>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d18f      	bne.n	800aea6 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 800af86:	f001 fc0d 	bl	800c7a4 <vPortYield>
 800af8a:	e78c      	b.n	800aea6 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800af8c:	6a38      	ldr	r0, [r7, #32]
 800af8e:	f000 f83a 	bl	800b006 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800af92:	f000 fb79 	bl	800b688 <xTaskResumeAll>
 800af96:	e786      	b.n	800aea6 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800af98:	6a38      	ldr	r0, [r7, #32]
 800af9a:	f000 f834 	bl	800b006 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800af9e:	f000 fb73 	bl	800b688 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afa2:	6a38      	ldr	r0, [r7, #32]
 800afa4:	f000 f881 	bl	800b0aa <prvIsQueueEmpty>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f43f af7b 	beq.w	800aea6 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800afb0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3728      	adds	r7, #40	@ 0x28
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d018      	beq.n	800affe <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	68da      	ldr	r2, [r3, #12]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd4:	441a      	add	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68da      	ldr	r2, [r3, #12]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d303      	bcc.n	800afee <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	68d9      	ldr	r1, [r3, #12]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff6:	461a      	mov	r2, r3
 800aff8:	6838      	ldr	r0, [r7, #0]
 800affa:	f001 ffc3 	bl	800cf84 <memcpy>
    }
}
 800affe:	bf00      	nop
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b084      	sub	sp, #16
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800b00e:	f001 fbdb 	bl	800c7c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b018:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800b01a:	e011      	b.n	800b040 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b020:	2b00      	cmp	r3, #0
 800b022:	d012      	beq.n	800b04a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3324      	adds	r3, #36	@ 0x24
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 fe37 	bl	800bc9c <xTaskRemoveFromEventList>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800b034:	f000 ff6e 	bl	800bf14 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800b038:	7bfb      	ldrb	r3, [r7, #15]
 800b03a:	3b01      	subs	r3, #1
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800b040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b044:	2b00      	cmp	r3, #0
 800b046:	dce9      	bgt.n	800b01c <prvUnlockQueue+0x16>
 800b048:	e000      	b.n	800b04c <prvUnlockQueue+0x46>
                    break;
 800b04a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	22ff      	movs	r2, #255	@ 0xff
 800b050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800b054:	f001 fbca 	bl	800c7ec <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800b058:	f001 fbb6 	bl	800c7c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b062:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800b064:	e011      	b.n	800b08a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d012      	beq.n	800b094 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	3310      	adds	r3, #16
 800b072:	4618      	mov	r0, r3
 800b074:	f000 fe12 	bl	800bc9c <xTaskRemoveFromEventList>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800b07e:	f000 ff49 	bl	800bf14 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800b082:	7bbb      	ldrb	r3, [r7, #14]
 800b084:	3b01      	subs	r3, #1
 800b086:	b2db      	uxtb	r3, r3
 800b088:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800b08a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	dce9      	bgt.n	800b066 <prvUnlockQueue+0x60>
 800b092:	e000      	b.n	800b096 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800b094:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	22ff      	movs	r2, #255	@ 0xff
 800b09a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800b09e:	f001 fba5 	bl	800c7ec <vPortExitCritical>
}
 800b0a2:	bf00      	nop
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b084      	sub	sp, #16
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800b0b2:	f001 fb89 	bl	800c7c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d102      	bne.n	800b0c4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	60fb      	str	r3, [r7, #12]
 800b0c2:	e001      	b.n	800b0c8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800b0c8:	f001 fb90 	bl	800c7ec <vPortExitCritical>

    return xReturn;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
	...

0800b0d8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d103      	bne.n	800b0f4 <vQueueAddToRegistry+0x1c>
 800b0ec:	f001 fcac 	bl	800ca48 <ulSetInterruptMask>
 800b0f0:	bf00      	nop
 800b0f2:	e7fd      	b.n	800b0f0 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d024      	beq.n	800b144 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60fb      	str	r3, [r7, #12]
 800b0fe:	e01e      	b.n	800b13e <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800b100:	4a17      	ldr	r2, [pc, #92]	@ (800b160 <vQueueAddToRegistry+0x88>)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	00db      	lsls	r3, r3, #3
 800b106:	4413      	add	r3, r2
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d105      	bne.n	800b11c <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	4a12      	ldr	r2, [pc, #72]	@ (800b160 <vQueueAddToRegistry+0x88>)
 800b116:	4413      	add	r3, r2
 800b118:	60bb      	str	r3, [r7, #8]
                    break;
 800b11a:	e013      	b.n	800b144 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10a      	bne.n	800b138 <vQueueAddToRegistry+0x60>
 800b122:	4a0f      	ldr	r2, [pc, #60]	@ (800b160 <vQueueAddToRegistry+0x88>)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d104      	bne.n	800b138 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	00db      	lsls	r3, r3, #3
 800b132:	4a0b      	ldr	r2, [pc, #44]	@ (800b160 <vQueueAddToRegistry+0x88>)
 800b134:	4413      	add	r3, r2
 800b136:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	3301      	adds	r3, #1
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b07      	cmp	r3, #7
 800b142:	d9dd      	bls.n	800b100 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d005      	beq.n	800b156 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800b156:	bf00      	nop
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	20001098 	.word	0x20001098

0800b164 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800b174:	f001 fb28 	bl	800c7c8 <vPortEnterCritical>
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b17e:	b25b      	sxtb	r3, r3
 800b180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b184:	d103      	bne.n	800b18e <vQueueWaitForMessageRestricted+0x2a>
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b194:	b25b      	sxtb	r3, r3
 800b196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b19a:	d103      	bne.n	800b1a4 <vQueueWaitForMessageRestricted+0x40>
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1a4:	f001 fb22 	bl	800c7ec <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d106      	bne.n	800b1be <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	3324      	adds	r3, #36	@ 0x24
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	68b9      	ldr	r1, [r7, #8]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 fd31 	bl	800bc20 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800b1be:	6978      	ldr	r0, [r7, #20]
 800b1c0:	f7ff ff21 	bl	800b006 <prvUnlockQueue>
    }
 800b1c4:	bf00      	nop
 800b1c6:	3718      	adds	r7, #24
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b08c      	sub	sp, #48	@ 0x30
 800b1d0:	af04      	add	r7, sp, #16
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800b1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d103      	bne.n	800b1e8 <xTaskCreateStatic+0x1c>
 800b1e0:	f001 fc32 	bl	800ca48 <ulSetInterruptMask>
 800b1e4:	bf00      	nop
 800b1e6:	e7fd      	b.n	800b1e4 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d103      	bne.n	800b1f6 <xTaskCreateStatic+0x2a>
 800b1ee:	f001 fc2b 	bl	800ca48 <ulSetInterruptMask>
 800b1f2:	bf00      	nop
 800b1f4:	e7fd      	b.n	800b1f2 <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800b1f6:	23b0      	movs	r3, #176	@ 0xb0
 800b1f8:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	2bb0      	cmp	r3, #176	@ 0xb0
 800b1fe:	d003      	beq.n	800b208 <xTaskCreateStatic+0x3c>
 800b200:	f001 fc22 	bl	800ca48 <ulSetInterruptMask>
 800b204:	bf00      	nop
 800b206:	e7fd      	b.n	800b204 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b208:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d023      	beq.n	800b258 <xTaskCreateStatic+0x8c>
 800b210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b212:	2b00      	cmp	r3, #0
 800b214:	d020      	beq.n	800b258 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b218:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800b21a:	22b0      	movs	r2, #176	@ 0xb0
 800b21c:	2100      	movs	r1, #0
 800b21e:	69f8      	ldr	r0, [r7, #28]
 800b220:	f001 fe2e 	bl	800ce80 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b228:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	2202      	movs	r2, #2
 800b22e:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b232:	2300      	movs	r3, #0
 800b234:	9303      	str	r3, [sp, #12]
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	9302      	str	r3, [sp, #8]
 800b23a:	f107 0318 	add.w	r3, r7, #24
 800b23e:	9301      	str	r3, [sp, #4]
 800b240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	68b9      	ldr	r1, [r7, #8]
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f000 f856 	bl	800b2fc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b250:	69f8      	ldr	r0, [r7, #28]
 800b252:	f000 f8ef 	bl	800b434 <prvAddNewTaskToReadyList>
 800b256:	e001      	b.n	800b25c <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800b258:	2300      	movs	r3, #0
 800b25a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800b25c:	69bb      	ldr	r3, [r7, #24]
    }
 800b25e:	4618      	mov	r0, r3
 800b260:	3720      	adds	r7, #32
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800b266:	b580      	push	{r7, lr}
 800b268:	b08c      	sub	sp, #48	@ 0x30
 800b26a:	af04      	add	r7, sp, #16
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	60b9      	str	r1, [r7, #8]
 800b270:	603b      	str	r3, [r7, #0]
 800b272:	4613      	mov	r3, r2
 800b274:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b276:	88fb      	ldrh	r3, [r7, #6]
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4618      	mov	r0, r3
 800b27c:	f001 fc44 	bl	800cb08 <pvPortMalloc>
 800b280:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d013      	beq.n	800b2b0 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b288:	20b0      	movs	r0, #176	@ 0xb0
 800b28a:	f001 fc3d 	bl	800cb08 <pvPortMalloc>
 800b28e:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d008      	beq.n	800b2a8 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800b296:	22b0      	movs	r2, #176	@ 0xb0
 800b298:	2100      	movs	r1, #0
 800b29a:	69f8      	ldr	r0, [r7, #28]
 800b29c:	f001 fdf0 	bl	800ce80 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	697a      	ldr	r2, [r7, #20]
 800b2a4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b2a6:	e005      	b.n	800b2b4 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800b2a8:	6978      	ldr	r0, [r7, #20]
 800b2aa:	f001 fcd9 	bl	800cc60 <vPortFree>
 800b2ae:	e001      	b.n	800b2b4 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d017      	beq.n	800b2ea <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b2c2:	88fa      	ldrh	r2, [r7, #6]
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	9303      	str	r3, [sp, #12]
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	9302      	str	r3, [sp, #8]
 800b2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ce:	9301      	str	r3, [sp, #4]
 800b2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	68b9      	ldr	r1, [r7, #8]
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f000 f80f 	bl	800b2fc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b2de:	69f8      	ldr	r0, [r7, #28]
 800b2e0:	f000 f8a8 	bl	800b434 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	61bb      	str	r3, [r7, #24]
 800b2e8:	e002      	b.n	800b2f0 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800b2f0:	69bb      	ldr	r3, [r7, #24]
    }
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3720      	adds	r7, #32
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
	...

0800b2fc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b086      	sub	sp, #24
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
 800b308:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	461a      	mov	r2, r3
 800b314:	21a5      	movs	r1, #165	@ 0xa5
 800b316:	f001 fdb3 	bl	800ce80 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b31c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b324:	3b01      	subs	r3, #1
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4413      	add	r3, r2
 800b32a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f023 0307 	bic.w	r3, r3, #7
 800b332:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f003 0307 	and.w	r3, r3, #7
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d003      	beq.n	800b346 <prvInitialiseNewTask+0x4a>
 800b33e:	f001 fb83 	bl	800ca48 <ulSetInterruptMask>
 800b342:	bf00      	nop
 800b344:	e7fd      	b.n	800b342 <prvInitialiseNewTask+0x46>

        #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
        {
            /* Also record the stack's high address, which may assist
             * debugging. */
            pxNewTCB->pxEndOfStack = pxTopOfStack;
 800b346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	645a      	str	r2, [r3, #68]	@ 0x44
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d01e      	beq.n	800b390 <prvInitialiseNewTask+0x94>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b352:	2300      	movs	r3, #0
 800b354:	617b      	str	r3, [r7, #20]
 800b356:	e012      	b.n	800b37e <prvInitialiseNewTask+0x82>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	4413      	add	r3, r2
 800b35e:	7819      	ldrb	r1, [r3, #0]
 800b360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	4413      	add	r3, r2
 800b366:	3334      	adds	r3, #52	@ 0x34
 800b368:	460a      	mov	r2, r1
 800b36a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	4413      	add	r3, r2
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d006      	beq.n	800b386 <prvInitialiseNewTask+0x8a>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	3301      	adds	r3, #1
 800b37c:	617b      	str	r3, [r7, #20]
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	2b0f      	cmp	r3, #15
 800b382:	d9e9      	bls.n	800b358 <prvInitialiseNewTask+0x5c>
 800b384:	e000      	b.n	800b388 <prvInitialiseNewTask+0x8c>
            {
                break;
 800b386:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38a:	2200      	movs	r2, #0
 800b38c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800b390:	6a3b      	ldr	r3, [r7, #32]
 800b392:	2b37      	cmp	r3, #55	@ 0x37
 800b394:	d903      	bls.n	800b39e <prvInitialiseNewTask+0xa2>
 800b396:	f001 fb57 	bl	800ca48 <ulSetInterruptMask>
 800b39a:	bf00      	nop
 800b39c:	e7fd      	b.n	800b39a <prvInitialiseNewTask+0x9e>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b39e:	6a3b      	ldr	r3, [r7, #32]
 800b3a0:	2b37      	cmp	r3, #55	@ 0x37
 800b3a2:	d901      	bls.n	800b3a8 <prvInitialiseNewTask+0xac>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b3a4:	2337      	movs	r3, #55	@ 0x37
 800b3a6:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800b3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3aa:	6a3a      	ldr	r2, [r7, #32]
 800b3ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800b3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b0:	6a3a      	ldr	r2, [r7, #32]
 800b3b2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b6:	3304      	adds	r3, #4
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7ff fba2 	bl	800ab02 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c0:	3318      	adds	r3, #24
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7ff fb9d 	bl	800ab02 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3cc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3dc:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 800b3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e0:	335c      	adds	r3, #92	@ 0x5c
 800b3e2:	224c      	movs	r2, #76	@ 0x4c
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f001 fd4a 	bl	800ce80 <memset>
 800b3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ee:	4a0e      	ldr	r2, [pc, #56]	@ (800b428 <prvInitialiseNewTask+0x12c>)
 800b3f0:	661a      	str	r2, [r3, #96]	@ 0x60
 800b3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f4:	4a0d      	ldr	r2, [pc, #52]	@ (800b42c <prvInitialiseNewTask+0x130>)
 800b3f6:	665a      	str	r2, [r3, #100]	@ 0x64
 800b3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fa:	4a0d      	ldr	r2, [pc, #52]	@ (800b430 <prvInitialiseNewTask+0x134>)
 800b3fc:	669a      	str	r2, [r3, #104]	@ 0x68
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800b3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b400:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	6938      	ldr	r0, [r7, #16]
 800b408:	f001 fa3c 	bl	800c884 <pxPortInitialiseStack>
 800b40c:	4602      	mov	r2, r0
 800b40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b410:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800b412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b41c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b41e:	bf00      	nop
 800b420:	3718      	adds	r7, #24
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	20009fe4 	.word	0x20009fe4
 800b42c:	2000a04c 	.word	0x2000a04c
 800b430:	2000a0b4 	.word	0x2000a0b4

0800b434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800b43c:	f001 f9c4 	bl	800c7c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800b440:	4b3e      	ldr	r3, [pc, #248]	@ (800b53c <prvAddNewTaskToReadyList+0x108>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3301      	adds	r3, #1
 800b446:	4a3d      	ldr	r2, [pc, #244]	@ (800b53c <prvAddNewTaskToReadyList+0x108>)
 800b448:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800b44a:	4b3d      	ldr	r3, [pc, #244]	@ (800b540 <prvAddNewTaskToReadyList+0x10c>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d109      	bne.n	800b466 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800b452:	4a3b      	ldr	r2, [pc, #236]	@ (800b540 <prvAddNewTaskToReadyList+0x10c>)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b458:	4b38      	ldr	r3, [pc, #224]	@ (800b53c <prvAddNewTaskToReadyList+0x108>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d110      	bne.n	800b482 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800b460:	f000 fd74 	bl	800bf4c <prvInitialiseTaskLists>
 800b464:	e00d      	b.n	800b482 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800b466:	4b37      	ldr	r3, [pc, #220]	@ (800b544 <prvAddNewTaskToReadyList+0x110>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d109      	bne.n	800b482 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b46e:	4b34      	ldr	r3, [pc, #208]	@ (800b540 <prvAddNewTaskToReadyList+0x10c>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b478:	429a      	cmp	r2, r3
 800b47a:	d802      	bhi.n	800b482 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800b47c:	4a30      	ldr	r2, [pc, #192]	@ (800b540 <prvAddNewTaskToReadyList+0x10c>)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800b482:	4b31      	ldr	r3, [pc, #196]	@ (800b548 <prvAddNewTaskToReadyList+0x114>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	3301      	adds	r3, #1
 800b488:	4a2f      	ldr	r2, [pc, #188]	@ (800b548 <prvAddNewTaskToReadyList+0x114>)
 800b48a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b48c:	4b2e      	ldr	r3, [pc, #184]	@ (800b548 <prvAddNewTaskToReadyList+0x114>)
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	649a      	str	r2, [r3, #72]	@ 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b498:	4b2c      	ldr	r3, [pc, #176]	@ (800b54c <prvAddNewTaskToReadyList+0x118>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d903      	bls.n	800b4a8 <prvAddNewTaskToReadyList+0x74>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a4:	4a29      	ldr	r2, [pc, #164]	@ (800b54c <prvAddNewTaskToReadyList+0x118>)
 800b4a6:	6013      	str	r3, [r2, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ac:	4928      	ldr	r1, [pc, #160]	@ (800b550 <prvAddNewTaskToReadyList+0x11c>)
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	4413      	add	r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	440b      	add	r3, r1
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	609a      	str	r2, [r3, #8]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	689a      	ldr	r2, [r3, #8]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	60da      	str	r2, [r3, #12]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	3204      	adds	r2, #4
 800b4d4:	605a      	str	r2, [r3, #4]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	1d1a      	adds	r2, r3, #4
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	609a      	str	r2, [r3, #8]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	4413      	add	r3, r2
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4a19      	ldr	r2, [pc, #100]	@ (800b550 <prvAddNewTaskToReadyList+0x11c>)
 800b4ec:	441a      	add	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	615a      	str	r2, [r3, #20]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f6:	4916      	ldr	r1, [pc, #88]	@ (800b550 <prvAddNewTaskToReadyList+0x11c>)
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4413      	add	r3, r2
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	440b      	add	r3, r1
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	1c59      	adds	r1, r3, #1
 800b506:	4812      	ldr	r0, [pc, #72]	@ (800b550 <prvAddNewTaskToReadyList+0x11c>)
 800b508:	4613      	mov	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4413      	add	r3, r2
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	4403      	add	r3, r0
 800b512:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800b514:	f001 f96a 	bl	800c7ec <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800b518:	4b0a      	ldr	r3, [pc, #40]	@ (800b544 <prvAddNewTaskToReadyList+0x110>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d008      	beq.n	800b532 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b520:	4b07      	ldr	r3, [pc, #28]	@ (800b540 <prvAddNewTaskToReadyList+0x10c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d201      	bcs.n	800b532 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800b52e:	f001 f939 	bl	800c7a4 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b532:	bf00      	nop
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	200015ac 	.word	0x200015ac
 800b540:	200010d8 	.word	0x200010d8
 800b544:	200015b8 	.word	0x200015b8
 800b548:	200015c8 	.word	0x200015c8
 800b54c:	200015b4 	.word	0x200015b4
 800b550:	200010dc 	.word	0x200010dc

0800b554 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800b55c:	2300      	movs	r3, #0
 800b55e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d010      	beq.n	800b588 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800b566:	4b0d      	ldr	r3, [pc, #52]	@ (800b59c <vTaskDelay+0x48>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <vTaskDelay+0x22>
 800b56e:	f001 fa6b 	bl	800ca48 <ulSetInterruptMask>
 800b572:	bf00      	nop
 800b574:	e7fd      	b.n	800b572 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800b576:	f000 f879 	bl	800b66c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b57a:	2100      	movs	r1, #0
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 fdbd 	bl	800c0fc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800b582:	f000 f881 	bl	800b688 <xTaskResumeAll>
 800b586:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d101      	bne.n	800b592 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800b58e:	f001 f909 	bl	800c7a4 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	200015d4 	.word	0x200015d4

0800b5a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b088      	sub	sp, #32
 800b5a4:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b5ae:	463a      	mov	r2, r7
 800b5b0:	1d39      	adds	r1, r7, #4
 800b5b2:	f107 0308 	add.w	r3, r7, #8
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7ff fa0c 	bl	800a9d4 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	9202      	str	r2, [sp, #8]
 800b5c4:	9301      	str	r3, [sp, #4]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	460a      	mov	r2, r1
 800b5ce:	491e      	ldr	r1, [pc, #120]	@ (800b648 <vTaskStartScheduler+0xa8>)
 800b5d0:	481e      	ldr	r0, [pc, #120]	@ (800b64c <vTaskStartScheduler+0xac>)
 800b5d2:	f7ff fdfb 	bl	800b1cc <xTaskCreateStatic>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	4a1d      	ldr	r2, [pc, #116]	@ (800b650 <vTaskStartScheduler+0xb0>)
 800b5da:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800b5dc:	4b1c      	ldr	r3, [pc, #112]	@ (800b650 <vTaskStartScheduler+0xb0>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	60fb      	str	r3, [r7, #12]
 800b5e8:	e001      	b.n	800b5ee <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d102      	bne.n	800b5fa <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800b5f4:	f000 fdf0 	bl	800c1d8 <xTimerCreateTimerTask>
 800b5f8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d115      	bne.n	800b62c <vTaskStartScheduler+0x8c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800b600:	f001 fa22 	bl	800ca48 <ulSetInterruptMask>

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800b604:	4b13      	ldr	r3, [pc, #76]	@ (800b654 <vTaskStartScheduler+0xb4>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	335c      	adds	r3, #92	@ 0x5c
 800b60a:	4a13      	ldr	r2, [pc, #76]	@ (800b658 <vTaskStartScheduler+0xb8>)
 800b60c:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800b60e:	4b13      	ldr	r3, [pc, #76]	@ (800b65c <vTaskStartScheduler+0xbc>)
 800b610:	f04f 32ff 	mov.w	r2, #4294967295
 800b614:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800b616:	4b12      	ldr	r3, [pc, #72]	@ (800b660 <vTaskStartScheduler+0xc0>)
 800b618:	2201      	movs	r2, #1
 800b61a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b61c:	4b11      	ldr	r3, [pc, #68]	@ (800b664 <vTaskStartScheduler+0xc4>)
 800b61e:	2200      	movs	r2, #0
 800b620:	601a      	str	r2, [r3, #0]
         * macro must be defined to configure the timer/counter used to generate
         * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b622:	f7f4 fe38 	bl	8000296 <configureTimerForRunTimeStats>

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800b626:	f001 f9b7 	bl	800c998 <xPortStartScheduler>
 800b62a:	e007      	b.n	800b63c <vTaskStartScheduler+0x9c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b632:	d103      	bne.n	800b63c <vTaskStartScheduler+0x9c>
 800b634:	f001 fa08 	bl	800ca48 <ulSetInterruptMask>
 800b638:	bf00      	nop
 800b63a:	e7fd      	b.n	800b638 <vTaskStartScheduler+0x98>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800b63c:	4b0a      	ldr	r3, [pc, #40]	@ (800b668 <vTaskStartScheduler+0xc8>)
 800b63e:	681b      	ldr	r3, [r3, #0]
}
 800b640:	bf00      	nop
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	0800d188 	.word	0x0800d188
 800b64c:	0800bf2d 	.word	0x0800bf2d
 800b650:	200015d0 	.word	0x200015d0
 800b654:	200010d8 	.word	0x200010d8
 800b658:	20000030 	.word	0x20000030
 800b65c:	200015cc 	.word	0x200015cc
 800b660:	200015b8 	.word	0x200015b8
 800b664:	200015b0 	.word	0x200015b0
 800b668:	20000028 	.word	0x20000028

0800b66c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b66c:	b480      	push	{r7}
 800b66e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800b670:	4b04      	ldr	r3, [pc, #16]	@ (800b684 <vTaskSuspendAll+0x18>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	3301      	adds	r3, #1
 800b676:	4a03      	ldr	r2, [pc, #12]	@ (800b684 <vTaskSuspendAll+0x18>)
 800b678:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800b67a:	bf00      	nop
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr
 800b684:	200015d4 	.word	0x200015d4

0800b688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800b68e:	2300      	movs	r3, #0
 800b690:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800b692:	2300      	movs	r3, #0
 800b694:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800b696:	4b6b      	ldr	r3, [pc, #428]	@ (800b844 <xTaskResumeAll+0x1bc>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d103      	bne.n	800b6a6 <xTaskResumeAll+0x1e>
 800b69e:	f001 f9d3 	bl	800ca48 <ulSetInterruptMask>
 800b6a2:	bf00      	nop
 800b6a4:	e7fd      	b.n	800b6a2 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800b6a6:	f001 f88f 	bl	800c7c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800b6aa:	4b66      	ldr	r3, [pc, #408]	@ (800b844 <xTaskResumeAll+0x1bc>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	4a64      	ldr	r2, [pc, #400]	@ (800b844 <xTaskResumeAll+0x1bc>)
 800b6b2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6b4:	4b63      	ldr	r3, [pc, #396]	@ (800b844 <xTaskResumeAll+0x1bc>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f040 80bb 	bne.w	800b834 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b6be:	4b62      	ldr	r3, [pc, #392]	@ (800b848 <xTaskResumeAll+0x1c0>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f000 80b6 	beq.w	800b834 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6c8:	e08b      	b.n	800b7e2 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ca:	4b60      	ldr	r3, [pc, #384]	@ (800b84c <xTaskResumeAll+0x1c4>)
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d6:	60bb      	str	r3, [r7, #8]
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	69db      	ldr	r3, [r3, #28]
 800b6dc:	697a      	ldr	r2, [r7, #20]
 800b6de:	6a12      	ldr	r2, [r2, #32]
 800b6e0:	609a      	str	r2, [r3, #8]
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	6a1b      	ldr	r3, [r3, #32]
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	69d2      	ldr	r2, [r2, #28]
 800b6ea:	605a      	str	r2, [r3, #4]
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	3318      	adds	r3, #24
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d103      	bne.n	800b700 <xTaskResumeAll+0x78>
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	6a1a      	ldr	r2, [r3, #32]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	605a      	str	r2, [r3, #4]
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	2200      	movs	r2, #0
 800b704:	629a      	str	r2, [r3, #40]	@ 0x28
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	1e5a      	subs	r2, r3, #1
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	695b      	ldr	r3, [r3, #20]
 800b714:	607b      	str	r3, [r7, #4]
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	68d2      	ldr	r2, [r2, #12]
 800b71e:	609a      	str	r2, [r3, #8]
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	697a      	ldr	r2, [r7, #20]
 800b726:	6892      	ldr	r2, [r2, #8]
 800b728:	605a      	str	r2, [r3, #4]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	3304      	adds	r3, #4
 800b732:	429a      	cmp	r2, r3
 800b734:	d103      	bne.n	800b73e <xTaskResumeAll+0xb6>
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	68da      	ldr	r2, [r3, #12]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	605a      	str	r2, [r3, #4]
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	2200      	movs	r2, #0
 800b742:	615a      	str	r2, [r3, #20]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	1e5a      	subs	r2, r3, #1
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b752:	4b3f      	ldr	r3, [pc, #252]	@ (800b850 <xTaskResumeAll+0x1c8>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	429a      	cmp	r2, r3
 800b758:	d903      	bls.n	800b762 <xTaskResumeAll+0xda>
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b75e:	4a3c      	ldr	r2, [pc, #240]	@ (800b850 <xTaskResumeAll+0x1c8>)
 800b760:	6013      	str	r3, [r2, #0]
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b766:	493b      	ldr	r1, [pc, #236]	@ (800b854 <xTaskResumeAll+0x1cc>)
 800b768:	4613      	mov	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4413      	add	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	440b      	add	r3, r1
 800b772:	3304      	adds	r3, #4
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	683a      	ldr	r2, [r7, #0]
 800b77c:	609a      	str	r2, [r3, #8]
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	689a      	ldr	r2, [r3, #8]
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	60da      	str	r2, [r3, #12]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	3204      	adds	r2, #4
 800b78e:	605a      	str	r2, [r3, #4]
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	1d1a      	adds	r2, r3, #4
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	609a      	str	r2, [r3, #8]
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b79c:	4613      	mov	r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4413      	add	r3, r2
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	4a2b      	ldr	r2, [pc, #172]	@ (800b854 <xTaskResumeAll+0x1cc>)
 800b7a6:	441a      	add	r2, r3
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	615a      	str	r2, [r3, #20]
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7b0:	4928      	ldr	r1, [pc, #160]	@ (800b854 <xTaskResumeAll+0x1cc>)
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	440b      	add	r3, r1
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	1c59      	adds	r1, r3, #1
 800b7c0:	4824      	ldr	r0, [pc, #144]	@ (800b854 <xTaskResumeAll+0x1cc>)
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	4413      	add	r3, r2
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	4403      	add	r3, r0
 800b7cc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7d2:	4b21      	ldr	r3, [pc, #132]	@ (800b858 <xTaskResumeAll+0x1d0>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d302      	bcc.n	800b7e2 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800b7dc:	4b1f      	ldr	r3, [pc, #124]	@ (800b85c <xTaskResumeAll+0x1d4>)
 800b7de:	2201      	movs	r2, #1
 800b7e0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7e2:	4b1a      	ldr	r3, [pc, #104]	@ (800b84c <xTaskResumeAll+0x1c4>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f47f af6f 	bne.w	800b6ca <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d001      	beq.n	800b7f6 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800b7f2:	f000 fc49 	bl	800c088 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b7f6:	4b1a      	ldr	r3, [pc, #104]	@ (800b860 <xTaskResumeAll+0x1d8>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d010      	beq.n	800b824 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800b802:	f000 f83f 	bl	800b884 <xTaskIncrementTick>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d002      	beq.n	800b812 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800b80c:	4b13      	ldr	r3, [pc, #76]	@ (800b85c <xTaskResumeAll+0x1d4>)
 800b80e:	2201      	movs	r2, #1
 800b810:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	3b01      	subs	r3, #1
 800b816:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1f1      	bne.n	800b802 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800b81e:	4b10      	ldr	r3, [pc, #64]	@ (800b860 <xTaskResumeAll+0x1d8>)
 800b820:	2200      	movs	r2, #0
 800b822:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800b824:	4b0d      	ldr	r3, [pc, #52]	@ (800b85c <xTaskResumeAll+0x1d4>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d003      	beq.n	800b834 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800b82c:	2301      	movs	r3, #1
 800b82e:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800b830:	f000 ffb8 	bl	800c7a4 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800b834:	f000 ffda 	bl	800c7ec <vPortExitCritical>

    return xAlreadyYielded;
 800b838:	693b      	ldr	r3, [r7, #16]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	200015d4 	.word	0x200015d4
 800b848:	200015ac 	.word	0x200015ac
 800b84c:	2000156c 	.word	0x2000156c
 800b850:	200015b4 	.word	0x200015b4
 800b854:	200010dc 	.word	0x200010dc
 800b858:	200010d8 	.word	0x200010d8
 800b85c:	200015c0 	.word	0x200015c0
 800b860:	200015bc 	.word	0x200015bc

0800b864 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800b86a:	4b05      	ldr	r3, [pc, #20]	@ (800b880 <xTaskGetTickCount+0x1c>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800b870:	687b      	ldr	r3, [r7, #4]
}
 800b872:	4618      	mov	r0, r3
 800b874:	370c      	adds	r7, #12
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	200015b0 	.word	0x200015b0

0800b884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b088      	sub	sp, #32
 800b888:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800b88a:	2300      	movs	r3, #0
 800b88c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b88e:	4b7a      	ldr	r3, [pc, #488]	@ (800ba78 <xTaskIncrementTick+0x1f4>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	f040 80e6 	bne.w	800ba64 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b898:	4b78      	ldr	r3, [pc, #480]	@ (800ba7c <xTaskIncrementTick+0x1f8>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3301      	adds	r3, #1
 800b89e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800b8a0:	4a76      	ldr	r2, [pc, #472]	@ (800ba7c <xTaskIncrementTick+0x1f8>)
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d119      	bne.n	800b8e0 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800b8ac:	4b74      	ldr	r3, [pc, #464]	@ (800ba80 <xTaskIncrementTick+0x1fc>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d003      	beq.n	800b8be <xTaskIncrementTick+0x3a>
 800b8b6:	f001 f8c7 	bl	800ca48 <ulSetInterruptMask>
 800b8ba:	bf00      	nop
 800b8bc:	e7fd      	b.n	800b8ba <xTaskIncrementTick+0x36>
 800b8be:	4b70      	ldr	r3, [pc, #448]	@ (800ba80 <xTaskIncrementTick+0x1fc>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	617b      	str	r3, [r7, #20]
 800b8c4:	4b6f      	ldr	r3, [pc, #444]	@ (800ba84 <xTaskIncrementTick+0x200>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a6d      	ldr	r2, [pc, #436]	@ (800ba80 <xTaskIncrementTick+0x1fc>)
 800b8ca:	6013      	str	r3, [r2, #0]
 800b8cc:	4a6d      	ldr	r2, [pc, #436]	@ (800ba84 <xTaskIncrementTick+0x200>)
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	6013      	str	r3, [r2, #0]
 800b8d2:	4b6d      	ldr	r3, [pc, #436]	@ (800ba88 <xTaskIncrementTick+0x204>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	4a6b      	ldr	r2, [pc, #428]	@ (800ba88 <xTaskIncrementTick+0x204>)
 800b8da:	6013      	str	r3, [r2, #0]
 800b8dc:	f000 fbd4 	bl	800c088 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800b8e0:	4b6a      	ldr	r3, [pc, #424]	@ (800ba8c <xTaskIncrementTick+0x208>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	69ba      	ldr	r2, [r7, #24]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	f0c0 80a7 	bcc.w	800ba3a <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8ec:	4b64      	ldr	r3, [pc, #400]	@ (800ba80 <xTaskIncrementTick+0x1fc>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d104      	bne.n	800b900 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8f6:	4b65      	ldr	r3, [pc, #404]	@ (800ba8c <xTaskIncrementTick+0x208>)
 800b8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8fc:	601a      	str	r2, [r3, #0]
                    break;
 800b8fe:	e09c      	b.n	800ba3a <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b900:	4b5f      	ldr	r3, [pc, #380]	@ (800ba80 <xTaskIncrementTick+0x1fc>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800b910:	69ba      	ldr	r2, [r7, #24]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	429a      	cmp	r2, r3
 800b916:	d203      	bcs.n	800b920 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800b918:	4a5c      	ldr	r2, [pc, #368]	@ (800ba8c <xTaskIncrementTick+0x208>)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800b91e:	e08c      	b.n	800ba3a <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	60bb      	str	r3, [r7, #8]
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	68d2      	ldr	r2, [r2, #12]
 800b92e:	609a      	str	r2, [r3, #8]
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	6892      	ldr	r2, [r2, #8]
 800b938:	605a      	str	r2, [r3, #4]
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	685a      	ldr	r2, [r3, #4]
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	3304      	adds	r3, #4
 800b942:	429a      	cmp	r2, r3
 800b944:	d103      	bne.n	800b94e <xTaskIncrementTick+0xca>
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	68da      	ldr	r2, [r3, #12]
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	605a      	str	r2, [r3, #4]
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	2200      	movs	r2, #0
 800b952:	615a      	str	r2, [r3, #20]
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	1e5a      	subs	r2, r3, #1
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b962:	2b00      	cmp	r3, #0
 800b964:	d01e      	beq.n	800b9a4 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b96a:	607b      	str	r3, [r7, #4]
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	69db      	ldr	r3, [r3, #28]
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	6a12      	ldr	r2, [r2, #32]
 800b974:	609a      	str	r2, [r3, #8]
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	69d2      	ldr	r2, [r2, #28]
 800b97e:	605a      	str	r2, [r3, #4]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	3318      	adds	r3, #24
 800b988:	429a      	cmp	r2, r3
 800b98a:	d103      	bne.n	800b994 <xTaskIncrementTick+0x110>
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	6a1a      	ldr	r2, [r3, #32]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	605a      	str	r2, [r3, #4]
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	2200      	movs	r2, #0
 800b998:	629a      	str	r2, [r3, #40]	@ 0x28
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	1e5a      	subs	r2, r3, #1
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9a8:	4b39      	ldr	r3, [pc, #228]	@ (800ba90 <xTaskIncrementTick+0x20c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d903      	bls.n	800b9b8 <xTaskIncrementTick+0x134>
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b4:	4a36      	ldr	r2, [pc, #216]	@ (800ba90 <xTaskIncrementTick+0x20c>)
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9bc:	4935      	ldr	r1, [pc, #212]	@ (800ba94 <xTaskIncrementTick+0x210>)
 800b9be:	4613      	mov	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4413      	add	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	440b      	add	r3, r1
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	603b      	str	r3, [r7, #0]
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	609a      	str	r2, [r3, #8]
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	60da      	str	r2, [r3, #12]
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	3204      	adds	r2, #4
 800b9e4:	605a      	str	r2, [r3, #4]
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	1d1a      	adds	r2, r3, #4
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	609a      	str	r2, [r3, #8]
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4a26      	ldr	r2, [pc, #152]	@ (800ba94 <xTaskIncrementTick+0x210>)
 800b9fc:	441a      	add	r2, r3
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	615a      	str	r2, [r3, #20]
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba06:	4923      	ldr	r1, [pc, #140]	@ (800ba94 <xTaskIncrementTick+0x210>)
 800ba08:	4613      	mov	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	4413      	add	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	440b      	add	r3, r1
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	1c59      	adds	r1, r3, #1
 800ba16:	481f      	ldr	r0, [pc, #124]	@ (800ba94 <xTaskIncrementTick+0x210>)
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4403      	add	r3, r0
 800ba22:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba28:	4b1b      	ldr	r3, [pc, #108]	@ (800ba98 <xTaskIncrementTick+0x214>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	f67f af5c 	bls.w	800b8ec <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800ba34:	2301      	movs	r3, #1
 800ba36:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba38:	e758      	b.n	800b8ec <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba3a:	4b17      	ldr	r3, [pc, #92]	@ (800ba98 <xTaskIncrementTick+0x214>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba40:	4914      	ldr	r1, [pc, #80]	@ (800ba94 <xTaskIncrementTick+0x210>)
 800ba42:	4613      	mov	r3, r2
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	4413      	add	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	440b      	add	r3, r1
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d901      	bls.n	800ba56 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800ba52:	2301      	movs	r3, #1
 800ba54:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800ba56:	4b11      	ldr	r3, [pc, #68]	@ (800ba9c <xTaskIncrementTick+0x218>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d007      	beq.n	800ba6e <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	61fb      	str	r3, [r7, #28]
 800ba62:	e004      	b.n	800ba6e <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800ba64:	4b0e      	ldr	r3, [pc, #56]	@ (800baa0 <xTaskIncrementTick+0x21c>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	4a0d      	ldr	r2, [pc, #52]	@ (800baa0 <xTaskIncrementTick+0x21c>)
 800ba6c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800ba6e:	69fb      	ldr	r3, [r7, #28]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3720      	adds	r7, #32
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	200015d4 	.word	0x200015d4
 800ba7c:	200015b0 	.word	0x200015b0
 800ba80:	20001564 	.word	0x20001564
 800ba84:	20001568 	.word	0x20001568
 800ba88:	200015c4 	.word	0x200015c4
 800ba8c:	200015cc 	.word	0x200015cc
 800ba90:	200015b4 	.word	0x200015b4
 800ba94:	200010dc 	.word	0x200010dc
 800ba98:	200010d8 	.word	0x200010d8
 800ba9c:	200015c0 	.word	0x200015c0
 800baa0:	200015bc 	.word	0x200015bc

0800baa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800baaa:	4b46      	ldr	r3, [pc, #280]	@ (800bbc4 <vTaskSwitchContext+0x120>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800bab2:	4b45      	ldr	r3, [pc, #276]	@ (800bbc8 <vTaskSwitchContext+0x124>)
 800bab4:	2201      	movs	r2, #1
 800bab6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800bab8:	e07f      	b.n	800bbba <vTaskSwitchContext+0x116>
        xYieldPending = pdFALSE;
 800baba:	4b43      	ldr	r3, [pc, #268]	@ (800bbc8 <vTaskSwitchContext+0x124>)
 800babc:	2200      	movs	r2, #0
 800babe:	601a      	str	r2, [r3, #0]
                ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bac0:	f7f4 fbf0 	bl	80002a4 <getRunTimeCounterValue>
 800bac4:	4603      	mov	r3, r0
 800bac6:	4a41      	ldr	r2, [pc, #260]	@ (800bbcc <vTaskSwitchContext+0x128>)
 800bac8:	6013      	str	r3, [r2, #0]
            if( ulTotalRunTime > ulTaskSwitchedInTime )
 800baca:	4b40      	ldr	r3, [pc, #256]	@ (800bbcc <vTaskSwitchContext+0x128>)
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	4b40      	ldr	r3, [pc, #256]	@ (800bbd0 <vTaskSwitchContext+0x12c>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d909      	bls.n	800baea <vTaskSwitchContext+0x46>
                pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800bad6:	4b3d      	ldr	r3, [pc, #244]	@ (800bbcc <vTaskSwitchContext+0x128>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	4b3d      	ldr	r3, [pc, #244]	@ (800bbd0 <vTaskSwitchContext+0x12c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	1ad1      	subs	r1, r2, r3
 800bae0:	4b3c      	ldr	r3, [pc, #240]	@ (800bbd4 <vTaskSwitchContext+0x130>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bae6:	440a      	add	r2, r1
 800bae8:	659a      	str	r2, [r3, #88]	@ 0x58
            ulTaskSwitchedInTime = ulTotalRunTime;
 800baea:	4b38      	ldr	r3, [pc, #224]	@ (800bbcc <vTaskSwitchContext+0x128>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a38      	ldr	r2, [pc, #224]	@ (800bbd0 <vTaskSwitchContext+0x12c>)
 800baf0:	6013      	str	r3, [r2, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 800baf2:	4b38      	ldr	r3, [pc, #224]	@ (800bbd4 <vTaskSwitchContext+0x130>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baf8:	60bb      	str	r3, [r7, #8]
 800bafa:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800bafe:	607b      	str	r3, [r7, #4]
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d111      	bne.n	800bb2e <vTaskSwitchContext+0x8a>
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	3304      	adds	r3, #4
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d10b      	bne.n	800bb2e <vTaskSwitchContext+0x8a>
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	3308      	adds	r3, #8
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d105      	bne.n	800bb2e <vTaskSwitchContext+0x8a>
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	330c      	adds	r3, #12
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d008      	beq.n	800bb40 <vTaskSwitchContext+0x9c>
 800bb2e:	4b29      	ldr	r3, [pc, #164]	@ (800bbd4 <vTaskSwitchContext+0x130>)
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	4b28      	ldr	r3, [pc, #160]	@ (800bbd4 <vTaskSwitchContext+0x130>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	3334      	adds	r3, #52	@ 0x34
 800bb38:	4619      	mov	r1, r3
 800bb3a:	4610      	mov	r0, r2
 800bb3c:	f7f4 fba0 	bl	8000280 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb40:	4b25      	ldr	r3, [pc, #148]	@ (800bbd8 <vTaskSwitchContext+0x134>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	60fb      	str	r3, [r7, #12]
 800bb46:	e009      	b.n	800bb5c <vTaskSwitchContext+0xb8>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d103      	bne.n	800bb56 <vTaskSwitchContext+0xb2>
 800bb4e:	f000 ff7b 	bl	800ca48 <ulSetInterruptMask>
 800bb52:	bf00      	nop
 800bb54:	e7fd      	b.n	800bb52 <vTaskSwitchContext+0xae>
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	60fb      	str	r3, [r7, #12]
 800bb5c:	491f      	ldr	r1, [pc, #124]	@ (800bbdc <vTaskSwitchContext+0x138>)
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	4613      	mov	r3, r2
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4413      	add	r3, r2
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	440b      	add	r3, r1
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d0eb      	beq.n	800bb48 <vTaskSwitchContext+0xa4>
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	4613      	mov	r3, r2
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	4413      	add	r3, r2
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	4a18      	ldr	r2, [pc, #96]	@ (800bbdc <vTaskSwitchContext+0x138>)
 800bb7c:	4413      	add	r3, r2
 800bb7e:	603b      	str	r3, [r7, #0]
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	605a      	str	r2, [r3, #4]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	685a      	ldr	r2, [r3, #4]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	3308      	adds	r3, #8
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d104      	bne.n	800bba0 <vTaskSwitchContext+0xfc>
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	605a      	str	r2, [r3, #4]
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	4a0b      	ldr	r2, [pc, #44]	@ (800bbd4 <vTaskSwitchContext+0x130>)
 800bba8:	6013      	str	r3, [r2, #0]
 800bbaa:	4a0b      	ldr	r2, [pc, #44]	@ (800bbd8 <vTaskSwitchContext+0x134>)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800bbb0:	4b08      	ldr	r3, [pc, #32]	@ (800bbd4 <vTaskSwitchContext+0x130>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	335c      	adds	r3, #92	@ 0x5c
 800bbb6:	4a0a      	ldr	r2, [pc, #40]	@ (800bbe0 <vTaskSwitchContext+0x13c>)
 800bbb8:	6013      	str	r3, [r2, #0]
}
 800bbba:	bf00      	nop
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	200015d4 	.word	0x200015d4
 800bbc8:	200015c0 	.word	0x200015c0
 800bbcc:	200015dc 	.word	0x200015dc
 800bbd0:	200015d8 	.word	0x200015d8
 800bbd4:	200010d8 	.word	0x200010d8
 800bbd8:	200015b4 	.word	0x200015b4
 800bbdc:	200010dc 	.word	0x200010dc
 800bbe0:	20000030 	.word	0x20000030

0800bbe4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d103      	bne.n	800bbfc <vTaskPlaceOnEventList+0x18>
 800bbf4:	f000 ff28 	bl	800ca48 <ulSetInterruptMask>
 800bbf8:	bf00      	nop
 800bbfa:	e7fd      	b.n	800bbf8 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbfc:	4b07      	ldr	r3, [pc, #28]	@ (800bc1c <vTaskPlaceOnEventList+0x38>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	3318      	adds	r3, #24
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7fe ff89 	bl	800ab1c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc0a:	2101      	movs	r1, #1
 800bc0c:	6838      	ldr	r0, [r7, #0]
 800bc0e:	f000 fa75 	bl	800c0fc <prvAddCurrentTaskToDelayedList>
}
 800bc12:	bf00      	nop
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	200010d8 	.word	0x200010d8

0800bc20 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d103      	bne.n	800bc3a <vTaskPlaceOnEventListRestricted+0x1a>
 800bc32:	f000 ff09 	bl	800ca48 <ulSetInterruptMask>
 800bc36:	bf00      	nop
 800bc38:	e7fd      	b.n	800bc36 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	617b      	str	r3, [r7, #20]
 800bc40:	4b15      	ldr	r3, [pc, #84]	@ (800bc98 <vTaskPlaceOnEventListRestricted+0x78>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	697a      	ldr	r2, [r7, #20]
 800bc46:	61da      	str	r2, [r3, #28]
 800bc48:	4b13      	ldr	r3, [pc, #76]	@ (800bc98 <vTaskPlaceOnEventListRestricted+0x78>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	6892      	ldr	r2, [r2, #8]
 800bc50:	621a      	str	r2, [r3, #32]
 800bc52:	4b11      	ldr	r3, [pc, #68]	@ (800bc98 <vTaskPlaceOnEventListRestricted+0x78>)
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	3218      	adds	r2, #24
 800bc5c:	605a      	str	r2, [r3, #4]
 800bc5e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc98 <vTaskPlaceOnEventListRestricted+0x78>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f103 0218 	add.w	r2, r3, #24
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	609a      	str	r2, [r3, #8]
 800bc6a:	4b0b      	ldr	r3, [pc, #44]	@ (800bc98 <vTaskPlaceOnEventListRestricted+0x78>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	629a      	str	r2, [r3, #40]	@ 0x28
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	1c5a      	adds	r2, r3, #1
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d002      	beq.n	800bc88 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800bc82:	f04f 33ff 	mov.w	r3, #4294967295
 800bc86:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bc88:	6879      	ldr	r1, [r7, #4]
 800bc8a:	68b8      	ldr	r0, [r7, #8]
 800bc8c:	f000 fa36 	bl	800c0fc <prvAddCurrentTaskToDelayedList>
    }
 800bc90:	bf00      	nop
 800bc92:	3718      	adds	r7, #24
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	200010d8 	.word	0x200010d8

0800bc9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b088      	sub	sp, #32
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d103      	bne.n	800bcba <xTaskRemoveFromEventList+0x1e>
 800bcb2:	f000 fec9 	bl	800ca48 <ulSetInterruptMask>
 800bcb6:	bf00      	nop
 800bcb8:	e7fd      	b.n	800bcb6 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcbe:	617b      	str	r3, [r7, #20]
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	69db      	ldr	r3, [r3, #28]
 800bcc4:	69ba      	ldr	r2, [r7, #24]
 800bcc6:	6a12      	ldr	r2, [r2, #32]
 800bcc8:	609a      	str	r2, [r3, #8]
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	6a1b      	ldr	r3, [r3, #32]
 800bcce:	69ba      	ldr	r2, [r7, #24]
 800bcd0:	69d2      	ldr	r2, [r2, #28]
 800bcd2:	605a      	str	r2, [r3, #4]
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	685a      	ldr	r2, [r3, #4]
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	3318      	adds	r3, #24
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d103      	bne.n	800bce8 <xTaskRemoveFromEventList+0x4c>
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	6a1a      	ldr	r2, [r3, #32]
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	605a      	str	r2, [r3, #4]
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	2200      	movs	r2, #0
 800bcec:	629a      	str	r2, [r3, #40]	@ 0x28
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	1e5a      	subs	r2, r3, #1
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcf8:	4b49      	ldr	r3, [pc, #292]	@ (800be20 <xTaskRemoveFromEventList+0x184>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d15f      	bne.n	800bdc0 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	695b      	ldr	r3, [r3, #20]
 800bd04:	60fb      	str	r3, [r7, #12]
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	69ba      	ldr	r2, [r7, #24]
 800bd0c:	68d2      	ldr	r2, [r2, #12]
 800bd0e:	609a      	str	r2, [r3, #8]
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	69ba      	ldr	r2, [r7, #24]
 800bd16:	6892      	ldr	r2, [r2, #8]
 800bd18:	605a      	str	r2, [r3, #4]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	3304      	adds	r3, #4
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d103      	bne.n	800bd2e <xTaskRemoveFromEventList+0x92>
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	68da      	ldr	r2, [r3, #12]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	605a      	str	r2, [r3, #4]
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	2200      	movs	r2, #0
 800bd32:	615a      	str	r2, [r3, #20]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	1e5a      	subs	r2, r3, #1
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd42:	4b38      	ldr	r3, [pc, #224]	@ (800be24 <xTaskRemoveFromEventList+0x188>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d903      	bls.n	800bd52 <xTaskRemoveFromEventList+0xb6>
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd4e:	4a35      	ldr	r2, [pc, #212]	@ (800be24 <xTaskRemoveFromEventList+0x188>)
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd56:	4934      	ldr	r1, [pc, #208]	@ (800be28 <xTaskRemoveFromEventList+0x18c>)
 800bd58:	4613      	mov	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	440b      	add	r3, r1
 800bd62:	3304      	adds	r3, #4
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	60bb      	str	r3, [r7, #8]
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	609a      	str	r2, [r3, #8]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	689a      	ldr	r2, [r3, #8]
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	60da      	str	r2, [r3, #12]
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	69ba      	ldr	r2, [r7, #24]
 800bd7c:	3204      	adds	r2, #4
 800bd7e:	605a      	str	r2, [r3, #4]
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	1d1a      	adds	r2, r3, #4
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	609a      	str	r2, [r3, #8]
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4413      	add	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4a24      	ldr	r2, [pc, #144]	@ (800be28 <xTaskRemoveFromEventList+0x18c>)
 800bd96:	441a      	add	r2, r3
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	615a      	str	r2, [r3, #20]
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bda0:	4921      	ldr	r1, [pc, #132]	@ (800be28 <xTaskRemoveFromEventList+0x18c>)
 800bda2:	4613      	mov	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	4413      	add	r3, r2
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	440b      	add	r3, r1
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	1c59      	adds	r1, r3, #1
 800bdb0:	481d      	ldr	r0, [pc, #116]	@ (800be28 <xTaskRemoveFromEventList+0x18c>)
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	4413      	add	r3, r2
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4403      	add	r3, r0
 800bdbc:	6019      	str	r1, [r3, #0]
 800bdbe:	e01b      	b.n	800bdf8 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bdc0:	4b1a      	ldr	r3, [pc, #104]	@ (800be2c <xTaskRemoveFromEventList+0x190>)
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	613b      	str	r3, [r7, #16]
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	693a      	ldr	r2, [r7, #16]
 800bdca:	61da      	str	r2, [r3, #28]
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	689a      	ldr	r2, [r3, #8]
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	621a      	str	r2, [r3, #32]
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	69ba      	ldr	r2, [r7, #24]
 800bdda:	3218      	adds	r2, #24
 800bddc:	605a      	str	r2, [r3, #4]
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	f103 0218 	add.w	r2, r3, #24
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	609a      	str	r2, [r3, #8]
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	4a10      	ldr	r2, [pc, #64]	@ (800be2c <xTaskRemoveFromEventList+0x190>)
 800bdec:	629a      	str	r2, [r3, #40]	@ 0x28
 800bdee:	4b0f      	ldr	r3, [pc, #60]	@ (800be2c <xTaskRemoveFromEventList+0x190>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	4a0d      	ldr	r2, [pc, #52]	@ (800be2c <xTaskRemoveFromEventList+0x190>)
 800bdf6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdfc:	4b0c      	ldr	r3, [pc, #48]	@ (800be30 <xTaskRemoveFromEventList+0x194>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be02:	429a      	cmp	r2, r3
 800be04:	d905      	bls.n	800be12 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800be06:	2301      	movs	r3, #1
 800be08:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800be0a:	4b0a      	ldr	r3, [pc, #40]	@ (800be34 <xTaskRemoveFromEventList+0x198>)
 800be0c:	2201      	movs	r2, #1
 800be0e:	601a      	str	r2, [r3, #0]
 800be10:	e001      	b.n	800be16 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800be12:	2300      	movs	r3, #0
 800be14:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800be16:	69fb      	ldr	r3, [r7, #28]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3720      	adds	r7, #32
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	200015d4 	.word	0x200015d4
 800be24:	200015b4 	.word	0x200015b4
 800be28:	200010dc 	.word	0x200010dc
 800be2c:	2000156c 	.word	0x2000156c
 800be30:	200010d8 	.word	0x200010d8
 800be34:	200015c0 	.word	0x200015c0

0800be38 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be40:	4b06      	ldr	r3, [pc, #24]	@ (800be5c <vTaskInternalSetTimeOutState+0x24>)
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800be48:	4b05      	ldr	r3, [pc, #20]	@ (800be60 <vTaskInternalSetTimeOutState+0x28>)
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	605a      	str	r2, [r3, #4]
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	200015c4 	.word	0x200015c4
 800be60:	200015b0 	.word	0x200015b0

0800be64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b086      	sub	sp, #24
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d103      	bne.n	800be7c <xTaskCheckForTimeOut+0x18>
 800be74:	f000 fde8 	bl	800ca48 <ulSetInterruptMask>
 800be78:	bf00      	nop
 800be7a:	e7fd      	b.n	800be78 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d103      	bne.n	800be8a <xTaskCheckForTimeOut+0x26>
 800be82:	f000 fde1 	bl	800ca48 <ulSetInterruptMask>
 800be86:	bf00      	nop
 800be88:	e7fd      	b.n	800be86 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800be8a:	f000 fc9d 	bl	800c7c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800be8e:	4b1f      	ldr	r3, [pc, #124]	@ (800bf0c <xTaskCheckForTimeOut+0xa8>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea6:	d102      	bne.n	800beae <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800bea8:	2300      	movs	r3, #0
 800beaa:	617b      	str	r3, [r7, #20]
 800beac:	e026      	b.n	800befc <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	4b17      	ldr	r3, [pc, #92]	@ (800bf10 <xTaskCheckForTimeOut+0xac>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d00a      	beq.n	800bed0 <xTaskCheckForTimeOut+0x6c>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d305      	bcc.n	800bed0 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800bec4:	2301      	movs	r3, #1
 800bec6:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	2200      	movs	r2, #0
 800becc:	601a      	str	r2, [r3, #0]
 800bece:	e015      	b.n	800befc <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68fa      	ldr	r2, [r7, #12]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d20b      	bcs.n	800bef2 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	1ad2      	subs	r2, r2, r3
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f7ff ffa6 	bl	800be38 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800beec:	2300      	movs	r3, #0
 800beee:	617b      	str	r3, [r7, #20]
 800bef0:	e004      	b.n	800befc <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	2200      	movs	r2, #0
 800bef6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800bef8:	2301      	movs	r3, #1
 800befa:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800befc:	f000 fc76 	bl	800c7ec <vPortExitCritical>

    return xReturn;
 800bf00:	697b      	ldr	r3, [r7, #20]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3718      	adds	r7, #24
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	200015b0 	.word	0x200015b0
 800bf10:	200015c4 	.word	0x200015c4

0800bf14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf14:	b480      	push	{r7}
 800bf16:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800bf18:	4b03      	ldr	r3, [pc, #12]	@ (800bf28 <vTaskMissedYield+0x14>)
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	601a      	str	r2, [r3, #0]
}
 800bf1e:	bf00      	nop
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr
 800bf28:	200015c0 	.word	0x200015c0

0800bf2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800bf34:	f000 f84a 	bl	800bfcc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf38:	4b03      	ldr	r3, [pc, #12]	@ (800bf48 <prvIdleTask+0x1c>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d9f9      	bls.n	800bf34 <prvIdleTask+0x8>
            {
                taskYIELD();
 800bf40:	f000 fc30 	bl	800c7a4 <vPortYield>
        prvCheckTasksWaitingTermination();
 800bf44:	e7f6      	b.n	800bf34 <prvIdleTask+0x8>
 800bf46:	bf00      	nop
 800bf48:	200010dc 	.word	0x200010dc

0800bf4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf52:	2300      	movs	r3, #0
 800bf54:	607b      	str	r3, [r7, #4]
 800bf56:	e00c      	b.n	800bf72 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4a12      	ldr	r2, [pc, #72]	@ (800bfac <prvInitialiseTaskLists+0x60>)
 800bf64:	4413      	add	r3, r2
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fe fdab 	bl	800aac2 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	607b      	str	r3, [r7, #4]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b37      	cmp	r3, #55	@ 0x37
 800bf76:	d9ef      	bls.n	800bf58 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800bf78:	480d      	ldr	r0, [pc, #52]	@ (800bfb0 <prvInitialiseTaskLists+0x64>)
 800bf7a:	f7fe fda2 	bl	800aac2 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800bf7e:	480d      	ldr	r0, [pc, #52]	@ (800bfb4 <prvInitialiseTaskLists+0x68>)
 800bf80:	f7fe fd9f 	bl	800aac2 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800bf84:	480c      	ldr	r0, [pc, #48]	@ (800bfb8 <prvInitialiseTaskLists+0x6c>)
 800bf86:	f7fe fd9c 	bl	800aac2 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800bf8a:	480c      	ldr	r0, [pc, #48]	@ (800bfbc <prvInitialiseTaskLists+0x70>)
 800bf8c:	f7fe fd99 	bl	800aac2 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800bf90:	480b      	ldr	r0, [pc, #44]	@ (800bfc0 <prvInitialiseTaskLists+0x74>)
 800bf92:	f7fe fd96 	bl	800aac2 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800bf96:	4b0b      	ldr	r3, [pc, #44]	@ (800bfc4 <prvInitialiseTaskLists+0x78>)
 800bf98:	4a05      	ldr	r2, [pc, #20]	@ (800bfb0 <prvInitialiseTaskLists+0x64>)
 800bf9a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf9c:	4b0a      	ldr	r3, [pc, #40]	@ (800bfc8 <prvInitialiseTaskLists+0x7c>)
 800bf9e:	4a05      	ldr	r2, [pc, #20]	@ (800bfb4 <prvInitialiseTaskLists+0x68>)
 800bfa0:	601a      	str	r2, [r3, #0]
}
 800bfa2:	bf00      	nop
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	200010dc 	.word	0x200010dc
 800bfb0:	2000153c 	.word	0x2000153c
 800bfb4:	20001550 	.word	0x20001550
 800bfb8:	2000156c 	.word	0x2000156c
 800bfbc:	20001580 	.word	0x20001580
 800bfc0:	20001598 	.word	0x20001598
 800bfc4:	20001564 	.word	0x20001564
 800bfc8:	20001568 	.word	0x20001568

0800bfcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfd2:	e019      	b.n	800c008 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800bfd4:	f000 fbf8 	bl	800c7c8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfd8:	4b10      	ldr	r3, [pc, #64]	@ (800c01c <prvCheckTasksWaitingTermination+0x50>)
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	3304      	adds	r3, #4
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7fe fdd2 	bl	800ab8e <uxListRemove>
                --uxCurrentNumberOfTasks;
 800bfea:	4b0d      	ldr	r3, [pc, #52]	@ (800c020 <prvCheckTasksWaitingTermination+0x54>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	3b01      	subs	r3, #1
 800bff0:	4a0b      	ldr	r2, [pc, #44]	@ (800c020 <prvCheckTasksWaitingTermination+0x54>)
 800bff2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800bff4:	4b0b      	ldr	r3, [pc, #44]	@ (800c024 <prvCheckTasksWaitingTermination+0x58>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	4a0a      	ldr	r2, [pc, #40]	@ (800c024 <prvCheckTasksWaitingTermination+0x58>)
 800bffc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800bffe:	f000 fbf5 	bl	800c7ec <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 f810 	bl	800c028 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c008:	4b06      	ldr	r3, [pc, #24]	@ (800c024 <prvCheckTasksWaitingTermination+0x58>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1e1      	bne.n	800bfd4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800c010:	bf00      	nop
 800c012:	bf00      	nop
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	20001580 	.word	0x20001580
 800c020:	200015ac 	.word	0x200015ac
 800c024:	20001594 	.word	0x20001594

0800c028 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800c030:	4b14      	ldr	r3, [pc, #80]	@ (800c084 <prvDeleteTCB+0x5c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	335c      	adds	r3, #92	@ 0x5c
 800c036:	4618      	mov	r0, r3
 800c038:	f000 ff2a 	bl	800ce90 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c042:	2b00      	cmp	r3, #0
 800c044:	d108      	bne.n	800c058 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 fe08 	bl	800cc60 <vPortFree>
                vPortFree( pxTCB );
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 fe05 	bl	800cc60 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800c056:	e011      	b.n	800c07c <prvDeleteTCB+0x54>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d103      	bne.n	800c06a <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fdfc 	bl	800cc60 <vPortFree>
    }
 800c068:	e008      	b.n	800c07c <prvDeleteTCB+0x54>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c070:	2b02      	cmp	r3, #2
 800c072:	d003      	beq.n	800c07c <prvDeleteTCB+0x54>
 800c074:	f000 fce8 	bl	800ca48 <ulSetInterruptMask>
 800c078:	bf00      	nop
 800c07a:	e7fd      	b.n	800c078 <prvDeleteTCB+0x50>
    }
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	200010d8 	.word	0x200010d8

0800c088 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c088:	b480      	push	{r7}
 800c08a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c08c:	4b0a      	ldr	r3, [pc, #40]	@ (800c0b8 <prvResetNextTaskUnblockTime+0x30>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d104      	bne.n	800c0a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800c096:	4b09      	ldr	r3, [pc, #36]	@ (800c0bc <prvResetNextTaskUnblockTime+0x34>)
 800c098:	f04f 32ff 	mov.w	r2, #4294967295
 800c09c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800c09e:	e005      	b.n	800c0ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c0a0:	4b05      	ldr	r3, [pc, #20]	@ (800c0b8 <prvResetNextTaskUnblockTime+0x30>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a04      	ldr	r2, [pc, #16]	@ (800c0bc <prvResetNextTaskUnblockTime+0x34>)
 800c0aa:	6013      	str	r3, [r2, #0]
}
 800c0ac:	bf00      	nop
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop
 800c0b8:	20001564 	.word	0x20001564
 800c0bc:	200015cc 	.word	0x200015cc

0800c0c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800c0c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c0f4 <xTaskGetSchedulerState+0x34>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d102      	bne.n	800c0d4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	607b      	str	r3, [r7, #4]
 800c0d2:	e008      	b.n	800c0e6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0d4:	4b08      	ldr	r3, [pc, #32]	@ (800c0f8 <xTaskGetSchedulerState+0x38>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d102      	bne.n	800c0e2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800c0dc:	2302      	movs	r3, #2
 800c0de:	607b      	str	r3, [r7, #4]
 800c0e0:	e001      	b.n	800c0e6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800c0e6:	687b      	ldr	r3, [r7, #4]
    }
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr
 800c0f4:	200015b8 	.word	0x200015b8
 800c0f8:	200015d4 	.word	0x200015d4

0800c0fc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800c106:	4b2e      	ldr	r3, [pc, #184]	@ (800c1c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c10c:	4b2d      	ldr	r3, [pc, #180]	@ (800c1c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	3304      	adds	r3, #4
 800c112:	4618      	mov	r0, r3
 800c114:	f7fe fd3b 	bl	800ab8e <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11e:	d124      	bne.n	800c16a <prvAddCurrentTaskToDelayedList+0x6e>
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d021      	beq.n	800c16a <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c126:	4b28      	ldr	r3, [pc, #160]	@ (800c1c8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	613b      	str	r3, [r7, #16]
 800c12c:	4b25      	ldr	r3, [pc, #148]	@ (800c1c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	609a      	str	r2, [r3, #8]
 800c134:	4b23      	ldr	r3, [pc, #140]	@ (800c1c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	693a      	ldr	r2, [r7, #16]
 800c13a:	6892      	ldr	r2, [r2, #8]
 800c13c:	60da      	str	r2, [r3, #12]
 800c13e:	4b21      	ldr	r3, [pc, #132]	@ (800c1c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	3204      	adds	r2, #4
 800c148:	605a      	str	r2, [r3, #4]
 800c14a:	4b1e      	ldr	r3, [pc, #120]	@ (800c1c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	1d1a      	adds	r2, r3, #4
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	609a      	str	r2, [r3, #8]
 800c154:	4b1b      	ldr	r3, [pc, #108]	@ (800c1c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a1b      	ldr	r2, [pc, #108]	@ (800c1c8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c15a:	615a      	str	r2, [r3, #20]
 800c15c:	4b1a      	ldr	r3, [pc, #104]	@ (800c1c8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	3301      	adds	r3, #1
 800c162:	4a19      	ldr	r2, [pc, #100]	@ (800c1c8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800c168:	e026      	b.n	800c1b8 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4413      	add	r3, r2
 800c170:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c172:	4b14      	ldr	r3, [pc, #80]	@ (800c1c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d209      	bcs.n	800c196 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c182:	4b12      	ldr	r3, [pc, #72]	@ (800c1cc <prvAddCurrentTaskToDelayedList+0xd0>)
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	4b0f      	ldr	r3, [pc, #60]	@ (800c1c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	3304      	adds	r3, #4
 800c18c:	4619      	mov	r1, r3
 800c18e:	4610      	mov	r0, r2
 800c190:	f7fe fcc4 	bl	800ab1c <vListInsert>
}
 800c194:	e010      	b.n	800c1b8 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c196:	4b0e      	ldr	r3, [pc, #56]	@ (800c1d0 <prvAddCurrentTaskToDelayedList+0xd4>)
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	3304      	adds	r3, #4
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	4610      	mov	r0, r2
 800c1a4:	f7fe fcba 	bl	800ab1c <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800c1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c1d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d202      	bcs.n	800c1b8 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800c1b2:	4a08      	ldr	r2, [pc, #32]	@ (800c1d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6013      	str	r3, [r2, #0]
}
 800c1b8:	bf00      	nop
 800c1ba:	3718      	adds	r7, #24
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	200015b0 	.word	0x200015b0
 800c1c4:	200010d8 	.word	0x200010d8
 800c1c8:	20001598 	.word	0x20001598
 800c1cc:	20001568 	.word	0x20001568
 800c1d0:	20001564 	.word	0x20001564
 800c1d4:	200015cc 	.word	0x200015cc

0800c1d8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b088      	sub	sp, #32
 800c1dc:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800c1e2:	f000 fa5f 	bl	800c6a4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800c1e6:	4b18      	ldr	r3, [pc, #96]	@ (800c248 <xTimerCreateTimerTask+0x70>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d020      	beq.n	800c230 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c1f6:	463a      	mov	r2, r7
 800c1f8:	1d39      	adds	r1, r7, #4
 800c1fa:	f107 0308 	add.w	r3, r7, #8
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fe fc02 	bl	800aa08 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	9202      	str	r2, [sp, #8]
 800c20c:	9301      	str	r3, [sp, #4]
 800c20e:	2302      	movs	r3, #2
 800c210:	9300      	str	r3, [sp, #0]
 800c212:	2300      	movs	r3, #0
 800c214:	460a      	mov	r2, r1
 800c216:	490d      	ldr	r1, [pc, #52]	@ (800c24c <xTimerCreateTimerTask+0x74>)
 800c218:	480d      	ldr	r0, [pc, #52]	@ (800c250 <xTimerCreateTimerTask+0x78>)
 800c21a:	f7fe ffd7 	bl	800b1cc <xTaskCreateStatic>
 800c21e:	4603      	mov	r3, r0
 800c220:	4a0c      	ldr	r2, [pc, #48]	@ (800c254 <xTimerCreateTimerTask+0x7c>)
 800c222:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800c224:	4b0b      	ldr	r3, [pc, #44]	@ (800c254 <xTimerCreateTimerTask+0x7c>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d001      	beq.n	800c230 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800c22c:	2301      	movs	r3, #1
 800c22e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d103      	bne.n	800c23e <xTimerCreateTimerTask+0x66>
 800c236:	f000 fc07 	bl	800ca48 <ulSetInterruptMask>
 800c23a:	bf00      	nop
 800c23c:	e7fd      	b.n	800c23a <xTimerCreateTimerTask+0x62>
        return xReturn;
 800c23e:	68fb      	ldr	r3, [r7, #12]
    }
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	20001610 	.word	0x20001610
 800c24c:	0800d1b8 	.word	0x0800d1b8
 800c250:	0800c2fd 	.word	0x0800c2fd
 800c254:	20001614 	.word	0x20001614

0800c258 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c264:	e008      	b.n	800c278 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	4413      	add	r3, r2
 800c26e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6a1b      	ldr	r3, [r3, #32]
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	699a      	ldr	r2, [r3, #24]
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	18d1      	adds	r1, r2, r3
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f000 f8d7 	bl	800c438 <prvInsertTimerInActiveList>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1ea      	bne.n	800c266 <prvReloadTimer+0xe>
        }
    }
 800c290:	bf00      	nop
 800c292:	bf00      	nop
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
	...

0800c29c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2a6:	4b14      	ldr	r3, [pc, #80]	@ (800c2f8 <prvProcessExpiredTimer+0x5c>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	3304      	adds	r3, #4
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7fe fc6a 	bl	800ab8e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2c0:	f003 0304 	and.w	r3, r3, #4
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d005      	beq.n	800c2d4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	6879      	ldr	r1, [r7, #4]
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f7ff ffc3 	bl	800c258 <prvReloadTimer>
 800c2d2:	e008      	b.n	800c2e6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2da:	f023 0301 	bic.w	r3, r3, #1
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6a1b      	ldr	r3, [r3, #32]
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	4798      	blx	r3
    }
 800c2ee:	bf00      	nop
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20001608 	.word	0x20001608

0800c2fc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c304:	f107 0308 	add.w	r3, r7, #8
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 f851 	bl	800c3b0 <prvGetNextExpireTime>
 800c30e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	4619      	mov	r1, r3
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f000 f805 	bl	800c324 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800c31a:	f000 f8cf 	bl	800c4bc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c31e:	bf00      	nop
 800c320:	e7f0      	b.n	800c304 <prvTimerTask+0x8>
	...

0800c324 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800c32e:	f7ff f99d 	bl	800b66c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c332:	f107 0308 	add.w	r3, r7, #8
 800c336:	4618      	mov	r0, r3
 800c338:	f000 f85e 	bl	800c3f8 <prvSampleTimeNow>
 800c33c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d12a      	bne.n	800c39a <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10a      	bne.n	800c360 <prvProcessTimerOrBlockTask+0x3c>
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d806      	bhi.n	800c360 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800c352:	f7ff f999 	bl	800b688 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c356:	68f9      	ldr	r1, [r7, #12]
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7ff ff9f 	bl	800c29c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800c35e:	e01e      	b.n	800c39e <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d008      	beq.n	800c378 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c366:	4b10      	ldr	r3, [pc, #64]	@ (800c3a8 <prvProcessTimerOrBlockTask+0x84>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d101      	bne.n	800c374 <prvProcessTimerOrBlockTask+0x50>
 800c370:	2301      	movs	r3, #1
 800c372:	e000      	b.n	800c376 <prvProcessTimerOrBlockTask+0x52>
 800c374:	2300      	movs	r3, #0
 800c376:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c378:	4b0c      	ldr	r3, [pc, #48]	@ (800c3ac <prvProcessTimerOrBlockTask+0x88>)
 800c37a:	6818      	ldr	r0, [r3, #0]
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	683a      	ldr	r2, [r7, #0]
 800c384:	4619      	mov	r1, r3
 800c386:	f7fe feed 	bl	800b164 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800c38a:	f7ff f97d 	bl	800b688 <xTaskResumeAll>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d104      	bne.n	800c39e <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800c394:	f000 fa06 	bl	800c7a4 <vPortYield>
    }
 800c398:	e001      	b.n	800c39e <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800c39a:	f7ff f975 	bl	800b688 <xTaskResumeAll>
    }
 800c39e:	bf00      	nop
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	2000160c 	.word	0x2000160c
 800c3ac:	20001610 	.word	0x20001610

0800c3b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800c3b0:	b480      	push	{r7}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c3b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c3f4 <prvGetNextExpireTime+0x44>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <prvGetNextExpireTime+0x16>
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	e000      	b.n	800c3c8 <prvGetNextExpireTime+0x18>
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d105      	bne.n	800c3e0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3d4:	4b07      	ldr	r3, [pc, #28]	@ (800c3f4 <prvGetNextExpireTime+0x44>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	60fb      	str	r3, [r7, #12]
 800c3de:	e001      	b.n	800c3e4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
    }
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	20001608 	.word	0x20001608

0800c3f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800c400:	f7ff fa30 	bl	800b864 <xTaskGetTickCount>
 800c404:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800c406:	4b0b      	ldr	r3, [pc, #44]	@ (800c434 <prvSampleTimeNow+0x3c>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d205      	bcs.n	800c41c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800c410:	f000 f922 	bl	800c658 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	601a      	str	r2, [r3, #0]
 800c41a:	e002      	b.n	800c422 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800c422:	4a04      	ldr	r2, [pc, #16]	@ (800c434 <prvSampleTimeNow+0x3c>)
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800c428:	68fb      	ldr	r3, [r7, #12]
    }
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	20001618 	.word	0x20001618

0800c438 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800c438:	b580      	push	{r7, lr}
 800c43a:	b086      	sub	sp, #24
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
 800c444:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800c446:	2300      	movs	r3, #0
 800c448:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	68fa      	ldr	r2, [r7, #12]
 800c454:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d812      	bhi.n	800c484 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	1ad2      	subs	r2, r2, r3
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	699b      	ldr	r3, [r3, #24]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d302      	bcc.n	800c472 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800c46c:	2301      	movs	r3, #1
 800c46e:	617b      	str	r3, [r7, #20]
 800c470:	e01b      	b.n	800c4aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c472:	4b10      	ldr	r3, [pc, #64]	@ (800c4b4 <prvInsertTimerInActiveList+0x7c>)
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	3304      	adds	r3, #4
 800c47a:	4619      	mov	r1, r3
 800c47c:	4610      	mov	r0, r2
 800c47e:	f7fe fb4d 	bl	800ab1c <vListInsert>
 800c482:	e012      	b.n	800c4aa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d206      	bcs.n	800c49a <prvInsertTimerInActiveList+0x62>
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	429a      	cmp	r2, r3
 800c492:	d302      	bcc.n	800c49a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800c494:	2301      	movs	r3, #1
 800c496:	617b      	str	r3, [r7, #20]
 800c498:	e007      	b.n	800c4aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c49a:	4b07      	ldr	r3, [pc, #28]	@ (800c4b8 <prvInsertTimerInActiveList+0x80>)
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	f7fe fb39 	bl	800ab1c <vListInsert>
            }
        }

        return xProcessTimerNow;
 800c4aa:	697b      	ldr	r3, [r7, #20]
    }
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3718      	adds	r7, #24
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	2000160c 	.word	0x2000160c
 800c4b8:	20001608 	.word	0x20001608

0800c4bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b088      	sub	sp, #32
 800c4c0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4c2:	e0b7      	b.n	800c634 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	da11      	bge.n	800c4ee <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c4ca:	1d3b      	adds	r3, r7, #4
 800c4cc:	3304      	adds	r3, #4
 800c4ce:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d103      	bne.n	800c4de <prvProcessReceivedCommands+0x22>
 800c4d6:	f000 fab7 	bl	800ca48 <ulSetInterruptMask>
 800c4da:	bf00      	nop
 800c4dc:	e7fd      	b.n	800c4da <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	69fa      	ldr	r2, [r7, #28]
 800c4e4:	6850      	ldr	r0, [r2, #4]
 800c4e6:	69fa      	ldr	r2, [r7, #28]
 800c4e8:	6892      	ldr	r2, [r2, #8]
 800c4ea:	4611      	mov	r1, r2
 800c4ec:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f2c0 809f 	blt.w	800c634 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d004      	beq.n	800c50c <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	3304      	adds	r3, #4
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe fb41 	bl	800ab8e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c50c:	463b      	mov	r3, r7
 800c50e:	4618      	mov	r0, r3
 800c510:	f7ff ff72 	bl	800c3f8 <prvSampleTimeNow>
 800c514:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	3b01      	subs	r3, #1
 800c51a:	2b08      	cmp	r3, #8
 800c51c:	f200 8087 	bhi.w	800c62e <prvProcessReceivedCommands+0x172>
 800c520:	a201      	add	r2, pc, #4	@ (adr r2, 800c528 <prvProcessReceivedCommands+0x6c>)
 800c522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c526:	bf00      	nop
 800c528:	0800c54d 	.word	0x0800c54d
 800c52c:	0800c54d 	.word	0x0800c54d
 800c530:	0800c5b5 	.word	0x0800c5b5
 800c534:	0800c5c9 	.word	0x0800c5c9
 800c538:	0800c605 	.word	0x0800c605
 800c53c:	0800c54d 	.word	0x0800c54d
 800c540:	0800c54d 	.word	0x0800c54d
 800c544:	0800c5b5 	.word	0x0800c5b5
 800c548:	0800c5c9 	.word	0x0800c5c9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c552:	f043 0301 	orr.w	r3, r3, #1
 800c556:	b2da      	uxtb	r2, r3
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	699b      	ldr	r3, [r3, #24]
 800c564:	18d1      	adds	r1, r2, r3
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	697a      	ldr	r2, [r7, #20]
 800c56a:	69b8      	ldr	r0, [r7, #24]
 800c56c:	f7ff ff64 	bl	800c438 <prvInsertTimerInActiveList>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d05d      	beq.n	800c632 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c57c:	f003 0304 	and.w	r3, r3, #4
 800c580:	2b00      	cmp	r3, #0
 800c582:	d009      	beq.n	800c598 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	699b      	ldr	r3, [r3, #24]
 800c58a:	4413      	add	r3, r2
 800c58c:	697a      	ldr	r2, [r7, #20]
 800c58e:	4619      	mov	r1, r3
 800c590:	69b8      	ldr	r0, [r7, #24]
 800c592:	f7ff fe61 	bl	800c258 <prvReloadTimer>
 800c596:	e008      	b.n	800c5aa <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c59e:	f023 0301 	bic.w	r3, r3, #1
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	6a1b      	ldr	r3, [r3, #32]
 800c5ae:	69b8      	ldr	r0, [r7, #24]
 800c5b0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800c5b2:	e03e      	b.n	800c632 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5ba:	f023 0301 	bic.w	r3, r3, #1
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800c5c6:	e035      	b.n	800c634 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5ce:	f043 0301 	orr.w	r3, r3, #1
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d103      	bne.n	800c5f0 <prvProcessReceivedCommands+0x134>
 800c5e8:	f000 fa2e 	bl	800ca48 <ulSetInterruptMask>
 800c5ec:	bf00      	nop
 800c5ee:	e7fd      	b.n	800c5ec <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	699a      	ldr	r2, [r3, #24]
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	18d1      	adds	r1, r2, r3
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	69b8      	ldr	r0, [r7, #24]
 800c5fe:	f7ff ff1b 	bl	800c438 <prvInsertTimerInActiveList>
                        break;
 800c602:	e017      	b.n	800c634 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c604:	69bb      	ldr	r3, [r7, #24]
 800c606:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c60a:	f003 0302 	and.w	r3, r3, #2
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d103      	bne.n	800c61a <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800c612:	69b8      	ldr	r0, [r7, #24]
 800c614:	f000 fb24 	bl	800cc60 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800c618:	e00c      	b.n	800c634 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c620:	f023 0301 	bic.w	r3, r3, #1
 800c624:	b2da      	uxtb	r2, r3
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800c62c:	e002      	b.n	800c634 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800c62e:	bf00      	nop
 800c630:	e000      	b.n	800c634 <prvProcessReceivedCommands+0x178>
                        break;
 800c632:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c634:	4b07      	ldr	r3, [pc, #28]	@ (800c654 <prvProcessReceivedCommands+0x198>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	1d39      	adds	r1, r7, #4
 800c63a:	2200      	movs	r2, #0
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7fe fc00 	bl	800ae42 <xQueueReceive>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	f47f af3d 	bne.w	800c4c4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800c64a:	bf00      	nop
 800c64c:	bf00      	nop
 800c64e:	3720      	adds	r7, #32
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	20001610 	.word	0x20001610

0800c658 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c65e:	e009      	b.n	800c674 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c660:	4b0e      	ldr	r3, [pc, #56]	@ (800c69c <prvSwitchTimerLists+0x44>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800c66a:	f04f 31ff 	mov.w	r1, #4294967295
 800c66e:	6838      	ldr	r0, [r7, #0]
 800c670:	f7ff fe14 	bl	800c29c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c674:	4b09      	ldr	r3, [pc, #36]	@ (800c69c <prvSwitchTimerLists+0x44>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1f0      	bne.n	800c660 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800c67e:	4b07      	ldr	r3, [pc, #28]	@ (800c69c <prvSwitchTimerLists+0x44>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800c684:	4b06      	ldr	r3, [pc, #24]	@ (800c6a0 <prvSwitchTimerLists+0x48>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a04      	ldr	r2, [pc, #16]	@ (800c69c <prvSwitchTimerLists+0x44>)
 800c68a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800c68c:	4a04      	ldr	r2, [pc, #16]	@ (800c6a0 <prvSwitchTimerLists+0x48>)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6013      	str	r3, [r2, #0]
    }
 800c692:	bf00      	nop
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	20001608 	.word	0x20001608
 800c6a0:	2000160c 	.word	0x2000160c

0800c6a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800c6aa:	f000 f88d 	bl	800c7c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800c6ae:	4b15      	ldr	r3, [pc, #84]	@ (800c704 <prvCheckForValidListAndQueue+0x60>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d120      	bne.n	800c6f8 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800c6b6:	4814      	ldr	r0, [pc, #80]	@ (800c708 <prvCheckForValidListAndQueue+0x64>)
 800c6b8:	f7fe fa03 	bl	800aac2 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800c6bc:	4813      	ldr	r0, [pc, #76]	@ (800c70c <prvCheckForValidListAndQueue+0x68>)
 800c6be:	f7fe fa00 	bl	800aac2 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800c6c2:	4b13      	ldr	r3, [pc, #76]	@ (800c710 <prvCheckForValidListAndQueue+0x6c>)
 800c6c4:	4a10      	ldr	r2, [pc, #64]	@ (800c708 <prvCheckForValidListAndQueue+0x64>)
 800c6c6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800c6c8:	4b12      	ldr	r3, [pc, #72]	@ (800c714 <prvCheckForValidListAndQueue+0x70>)
 800c6ca:	4a10      	ldr	r2, [pc, #64]	@ (800c70c <prvCheckForValidListAndQueue+0x68>)
 800c6cc:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	4b11      	ldr	r3, [pc, #68]	@ (800c718 <prvCheckForValidListAndQueue+0x74>)
 800c6d4:	4a11      	ldr	r2, [pc, #68]	@ (800c71c <prvCheckForValidListAndQueue+0x78>)
 800c6d6:	2110      	movs	r1, #16
 800c6d8:	200a      	movs	r0, #10
 800c6da:	f7fe fafb 	bl	800acd4 <xQueueGenericCreateStatic>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	4a08      	ldr	r2, [pc, #32]	@ (800c704 <prvCheckForValidListAndQueue+0x60>)
 800c6e2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800c6e4:	4b07      	ldr	r3, [pc, #28]	@ (800c704 <prvCheckForValidListAndQueue+0x60>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d005      	beq.n	800c6f8 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c6ec:	4b05      	ldr	r3, [pc, #20]	@ (800c704 <prvCheckForValidListAndQueue+0x60>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	490b      	ldr	r1, [pc, #44]	@ (800c720 <prvCheckForValidListAndQueue+0x7c>)
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fe fcf0 	bl	800b0d8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800c6f8:	f000 f878 	bl	800c7ec <vPortExitCritical>
    }
 800c6fc:	bf00      	nop
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	20001610 	.word	0x20001610
 800c708:	200015e0 	.word	0x200015e0
 800c70c:	200015f4 	.word	0x200015f4
 800c710:	20001608 	.word	0x20001608
 800c714:	2000160c 	.word	0x2000160c
 800c718:	200016bc 	.word	0x200016bc
 800c71c:	2000161c 	.word	0x2000161c
 800c720:	0800d1c0 	.word	0x0800d1c0

0800c724 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800c724:	b480      	push	{r7}
 800c726:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c728:	4b0b      	ldr	r3, [pc, #44]	@ (800c758 <vPortSetupTimerInterrupt+0x34>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c72e:	4b0b      	ldr	r3, [pc, #44]	@ (800c75c <vPortSetupTimerInterrupt+0x38>)
 800c730:	2200      	movs	r2, #0
 800c732:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c734:	4b0a      	ldr	r3, [pc, #40]	@ (800c760 <vPortSetupTimerInterrupt+0x3c>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a0a      	ldr	r2, [pc, #40]	@ (800c764 <vPortSetupTimerInterrupt+0x40>)
 800c73a:	fba2 2303 	umull	r2, r3, r2, r3
 800c73e:	099b      	lsrs	r3, r3, #6
 800c740:	4a09      	ldr	r2, [pc, #36]	@ (800c768 <vPortSetupTimerInterrupt+0x44>)
 800c742:	3b01      	subs	r3, #1
 800c744:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c746:	4b04      	ldr	r3, [pc, #16]	@ (800c758 <vPortSetupTimerInterrupt+0x34>)
 800c748:	2207      	movs	r2, #7
 800c74a:	601a      	str	r2, [r3, #0]
}
 800c74c:	bf00      	nop
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop
 800c758:	e000e010 	.word	0xe000e010
 800c75c:	e000e018 	.word	0xe000e018
 800c760:	20000000 	.word	0x20000000
 800c764:	10624dd3 	.word	0x10624dd3
 800c768:	e000e014 	.word	0xe000e014

0800c76c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800c772:	2300      	movs	r3, #0
 800c774:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800c776:	4b0a      	ldr	r3, [pc, #40]	@ (800c7a0 <prvTaskExitError+0x34>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c77e:	d003      	beq.n	800c788 <prvTaskExitError+0x1c>
 800c780:	f000 f962 	bl	800ca48 <ulSetInterruptMask>
 800c784:	bf00      	nop
 800c786:	e7fd      	b.n	800c784 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800c788:	f000 f95e 	bl	800ca48 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800c78c:	bf00      	nop
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d0fc      	beq.n	800c78e <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop
 800c798:	3708      	adds	r7, #8
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	2000002c 	.word	0x2000002c

0800c7a4 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7a8:	4b06      	ldr	r3, [pc, #24]	@ (800c7c4 <vPortYield+0x20>)
 800c7aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7ae:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800c7b0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800c7b4:	f3bf 8f6f 	isb	sy
}
 800c7b8:	bf00      	nop
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	e000ed04 	.word	0xe000ed04

0800c7c8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800c7cc:	f000 f93c 	bl	800ca48 <ulSetInterruptMask>
    ulCriticalNesting++;
 800c7d0:	4b05      	ldr	r3, [pc, #20]	@ (800c7e8 <vPortEnterCritical+0x20>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	4a04      	ldr	r2, [pc, #16]	@ (800c7e8 <vPortEnterCritical+0x20>)
 800c7d8:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800c7da:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800c7de:	f3bf 8f6f 	isb	sy
}
 800c7e2:	bf00      	nop
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	2000002c 	.word	0x2000002c

0800c7ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800c7f0:	4b0a      	ldr	r3, [pc, #40]	@ (800c81c <vPortExitCritical+0x30>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d103      	bne.n	800c800 <vPortExitCritical+0x14>
 800c7f8:	f000 f926 	bl	800ca48 <ulSetInterruptMask>
 800c7fc:	bf00      	nop
 800c7fe:	e7fd      	b.n	800c7fc <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800c800:	4b06      	ldr	r3, [pc, #24]	@ (800c81c <vPortExitCritical+0x30>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	3b01      	subs	r3, #1
 800c806:	4a05      	ldr	r2, [pc, #20]	@ (800c81c <vPortExitCritical+0x30>)
 800c808:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800c80a:	4b04      	ldr	r3, [pc, #16]	@ (800c81c <vPortExitCritical+0x30>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d102      	bne.n	800c818 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800c812:	2000      	movs	r0, #0
 800c814:	f000 f925 	bl	800ca62 <vClearInterruptMask>
    }
}
 800c818:	bf00      	nop
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	2000002c 	.word	0x2000002c

0800c820 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c826:	f000 f90f 	bl	800ca48 <ulSetInterruptMask>
 800c82a:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800c82c:	f7ff f82a 	bl	800b884 <xTaskIncrementTick>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c836:	4b05      	ldr	r3, [pc, #20]	@ (800c84c <xPortSysTickHandler+0x2c>)
 800c838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c83c:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f90f 	bl	800ca62 <vClearInterruptMask>
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	e000ed04 	.word	0xe000ed04

0800c850 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	699b      	ldr	r3, [r3, #24]
 800c85c:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3b02      	subs	r3, #2
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800c866:	7afb      	ldrb	r3, [r7, #11]
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d102      	bne.n	800c872 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800c86c:	f000 f8b8 	bl	800c9e0 <vRestoreContextOfFirstTask>
            break;
 800c870:	e003      	b.n	800c87a <vPortSVCHandler_C+0x2a>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800c872:	f000 f8e9 	bl	800ca48 <ulSetInterruptMask>
 800c876:	bf00      	nop
 800c878:	e7fd      	b.n	800c876 <vPortSVCHandler_C+0x26>
    }
}
 800c87a:	bf00      	nop
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
	...

0800c884 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
 800c890:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	3b04      	subs	r3, #4
 800c896:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c89e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	3b04      	subs	r3, #4
 800c8a4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3b04      	subs	r3, #4
 800c8b0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800c8b2:	4a38      	ldr	r2, [pc, #224]	@ (800c994 <pxPortInitialiseStack+0x110>)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	3b04      	subs	r3, #4
 800c8bc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800c8c4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	3b04      	subs	r3, #4
 800c8ca:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800c8d2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	3b04      	subs	r3, #4
 800c8d8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800c8e0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	3b04      	subs	r3, #4
 800c8e6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800c8ee:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	3b04      	subs	r3, #4
 800c8f4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	3b04      	subs	r3, #4
 800c900:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800c908:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3b04      	subs	r3, #4
 800c90e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800c916:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	3b04      	subs	r3, #4
 800c91c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800c924:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3b04      	subs	r3, #4
 800c92a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800c932:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	3b04      	subs	r3, #4
 800c938:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800c940:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	3b04      	subs	r3, #4
 800c946:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800c94e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	3b04      	subs	r3, #4
 800c954:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800c95c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	3b04      	subs	r3, #4
 800c962:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800c96a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3b04      	subs	r3, #4
 800c970:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800c978:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3b04      	subs	r3, #4
 800c97e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800c986:	68fb      	ldr	r3, [r7, #12]
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3714      	adds	r7, #20
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr
 800c994:	0800c76d 	.word	0x0800c76d

0800c998 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800c99c:	4b0c      	ldr	r3, [pc, #48]	@ (800c9d0 <xPortStartScheduler+0x38>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a0b      	ldr	r2, [pc, #44]	@ (800c9d0 <xPortStartScheduler+0x38>)
 800c9a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9a6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800c9a8:	4b09      	ldr	r3, [pc, #36]	@ (800c9d0 <xPortStartScheduler+0x38>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a08      	ldr	r2, [pc, #32]	@ (800c9d0 <xPortStartScheduler+0x38>)
 800c9ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9b2:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800c9b4:	f7ff feb6 	bl	800c724 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800c9b8:	4b06      	ldr	r3, [pc, #24]	@ (800c9d4 <xPortStartScheduler+0x3c>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800c9be:	f000 f82f 	bl	800ca20 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800c9c2:	f7ff f86f 	bl	800baa4 <vTaskSwitchContext>
    prvTaskExitError();
 800c9c6:	f7ff fed1 	bl	800c76c <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800c9ca:	2300      	movs	r3, #0
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	e000ed20 	.word	0xe000ed20
 800c9d4:	2000002c 	.word	0x2000002c
	...

0800c9e0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800c9e0:	4a0b      	ldr	r2, [pc, #44]	@ (800ca10 <pxCurrentTCBConst2>)
 800c9e2:	6811      	ldr	r1, [r2, #0]
 800c9e4:	6808      	ldr	r0, [r1, #0]
 800c9e6:	c806      	ldmia	r0!, {r1, r2}
 800c9e8:	f381 880b 	msr	PSPLIM, r1
 800c9ec:	2102      	movs	r1, #2
 800c9ee:	f381 8814 	msr	CONTROL, r1
 800c9f2:	3020      	adds	r0, #32
 800c9f4:	f380 8809 	msr	PSP, r0
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f04f 0000 	mov.w	r0, #0
 800ca00:	f380 8811 	msr	BASEPRI, r0
 800ca04:	4710      	bx	r2
 800ca06:	bf00      	nop
 800ca08:	f3af 8000 	nop.w
 800ca0c:	f3af 8000 	nop.w

0800ca10 <pxCurrentTCBConst2>:
 800ca10:	200010d8 	.word	0x200010d8
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800ca14:	bf00      	nop
 800ca16:	bf00      	nop
	...

0800ca20 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ca20:	4807      	ldr	r0, [pc, #28]	@ (800ca40 <xVTORConst>)
 800ca22:	6800      	ldr	r0, [r0, #0]
 800ca24:	6800      	ldr	r0, [r0, #0]
 800ca26:	f380 8808 	msr	MSP, r0
 800ca2a:	b662      	cpsie	i
 800ca2c:	b661      	cpsie	f
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	df02      	svc	2
 800ca38:	bf00      	nop
 800ca3a:	bf00      	nop
 800ca3c:	f3af 8000 	nop.w

0800ca40 <xVTORConst>:
 800ca40:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800ca44:	bf00      	nop
 800ca46:	bf00      	nop

0800ca48 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ca48:	f3ef 8011 	mrs	r0, BASEPRI
 800ca4c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800ca50:	f381 8811 	msr	BASEPRI, r1
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800ca5e:	bf00      	nop
 800ca60:	4618      	mov	r0, r3

0800ca62 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ca62:	f380 8811 	msr	BASEPRI, r0
 800ca66:	f3bf 8f4f 	dsb	sy
 800ca6a:	f3bf 8f6f 	isb	sy
 800ca6e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800ca70:	bf00      	nop
	...

0800ca80 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ca80:	f3ef 8009 	mrs	r0, PSP
 800ca84:	f3ef 820b 	mrs	r2, PSPLIM
 800ca88:	4673      	mov	r3, lr
 800ca8a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ca8e:	4a10      	ldr	r2, [pc, #64]	@ (800cad0 <pxCurrentTCBConst>)
 800ca90:	6811      	ldr	r1, [r2, #0]
 800ca92:	6008      	str	r0, [r1, #0]
 800ca94:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ca98:	f380 8811 	msr	BASEPRI, r0
 800ca9c:	f3bf 8f4f 	dsb	sy
 800caa0:	f3bf 8f6f 	isb	sy
 800caa4:	f7fe fffe 	bl	800baa4 <vTaskSwitchContext>
 800caa8:	f04f 0000 	mov.w	r0, #0
 800caac:	f380 8811 	msr	BASEPRI, r0
 800cab0:	4a07      	ldr	r2, [pc, #28]	@ (800cad0 <pxCurrentTCBConst>)
 800cab2:	6811      	ldr	r1, [r2, #0]
 800cab4:	6808      	ldr	r0, [r1, #0]
 800cab6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800caba:	f382 880b 	msr	PSPLIM, r2
 800cabe:	f380 8809 	msr	PSP, r0
 800cac2:	4718      	bx	r3
 800cac4:	f3af 8000 	nop.w
 800cac8:	f3af 8000 	nop.w
 800cacc:	f3af 8000 	nop.w

0800cad0 <pxCurrentTCBConst>:
 800cad0:	200010d8 	.word	0x200010d8
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800cad4:	bf00      	nop
 800cad6:	bf00      	nop
	...

0800cae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cae0:	f01e 0f04 	tst.w	lr, #4
 800cae4:	bf0c      	ite	eq
 800cae6:	f3ef 8008 	mrseq	r0, MSP
 800caea:	f3ef 8009 	mrsne	r0, PSP
 800caee:	4904      	ldr	r1, [pc, #16]	@ (800cb00 <svchandler_address_const>)
 800caf0:	4708      	bx	r1
 800caf2:	bf00      	nop
 800caf4:	f3af 8000 	nop.w
 800caf8:	f3af 8000 	nop.w
 800cafc:	f3af 8000 	nop.w

0800cb00 <svchandler_address_const>:
 800cb00:	0800c851 	.word	0x0800c851
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop

0800cb08 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b088      	sub	sp, #32
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800cb10:	2300      	movs	r3, #0
 800cb12:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800cb14:	f7fe fdaa 	bl	800b66c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800cb18:	4b4c      	ldr	r3, [pc, #304]	@ (800cc4c <pvPortMalloc+0x144>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800cb20:	f000 f8ec 	bl	800ccfc <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d012      	beq.n	800cb50 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800cb2a:	2208      	movs	r2, #8
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f003 0307 	and.w	r3, r3, #7
 800cb32:	1ad3      	subs	r3, r2, r3
 800cb34:	3308      	adds	r3, #8
 800cb36:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	43db      	mvns	r3, r3
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d804      	bhi.n	800cb4c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	4413      	add	r3, r2
 800cb48:	607b      	str	r3, [r7, #4]
 800cb4a:	e001      	b.n	800cb50 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	db69      	blt.n	800cc2a <pvPortMalloc+0x122>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d066      	beq.n	800cc2a <pvPortMalloc+0x122>
 800cb5c:	4b3c      	ldr	r3, [pc, #240]	@ (800cc50 <pvPortMalloc+0x148>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d861      	bhi.n	800cc2a <pvPortMalloc+0x122>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800cb66:	4b3b      	ldr	r3, [pc, #236]	@ (800cc54 <pvPortMalloc+0x14c>)
 800cb68:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800cb6a:	4b3a      	ldr	r3, [pc, #232]	@ (800cc54 <pvPortMalloc+0x14c>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb70:	e004      	b.n	800cb7c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d903      	bls.n	800cb8e <pvPortMalloc+0x86>
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d1f1      	bne.n	800cb72 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800cb8e:	4b2f      	ldr	r3, [pc, #188]	@ (800cc4c <pvPortMalloc+0x144>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	69fa      	ldr	r2, [r7, #28]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d048      	beq.n	800cc2a <pvPortMalloc+0x122>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2208      	movs	r2, #8
 800cb9e:	4413      	add	r3, r2
 800cba0:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	685a      	ldr	r2, [r3, #4]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	1ad2      	subs	r2, r2, r3
 800cbb2:	2308      	movs	r3, #8
 800cbb4:	005b      	lsls	r3, r3, #1
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d918      	bls.n	800cbec <pvPortMalloc+0xe4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cbba:	69fa      	ldr	r2, [r7, #28]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f003 0307 	and.w	r3, r3, #7
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d003      	beq.n	800cbd4 <pvPortMalloc+0xcc>
 800cbcc:	f7ff ff3c 	bl	800ca48 <ulSetInterruptMask>
 800cbd0:	bf00      	nop
 800cbd2:	e7fd      	b.n	800cbd0 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	1ad2      	subs	r2, r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f000 f8e4 	bl	800cdb4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbec:	4b18      	ldr	r3, [pc, #96]	@ (800cc50 <pvPortMalloc+0x148>)
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	4a16      	ldr	r2, [pc, #88]	@ (800cc50 <pvPortMalloc+0x148>)
 800cbf8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbfa:	4b15      	ldr	r3, [pc, #84]	@ (800cc50 <pvPortMalloc+0x148>)
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	4b16      	ldr	r3, [pc, #88]	@ (800cc58 <pvPortMalloc+0x150>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d203      	bcs.n	800cc0e <pvPortMalloc+0x106>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc06:	4b12      	ldr	r3, [pc, #72]	@ (800cc50 <pvPortMalloc+0x148>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a13      	ldr	r2, [pc, #76]	@ (800cc58 <pvPortMalloc+0x150>)
 800cc0c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800cc20:	4b0e      	ldr	r3, [pc, #56]	@ (800cc5c <pvPortMalloc+0x154>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	3301      	adds	r3, #1
 800cc26:	4a0d      	ldr	r2, [pc, #52]	@ (800cc5c <pvPortMalloc+0x154>)
 800cc28:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800cc2a:	f7fe fd2d 	bl	800b688 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	f003 0307 	and.w	r3, r3, #7
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d003      	beq.n	800cc40 <pvPortMalloc+0x138>
 800cc38:	f7ff ff06 	bl	800ca48 <ulSetInterruptMask>
 800cc3c:	bf00      	nop
 800cc3e:	e7fd      	b.n	800cc3c <pvPortMalloc+0x134>
    return pvReturn;
 800cc40:	697b      	ldr	r3, [r7, #20]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3720      	adds	r7, #32
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	20009fcc 	.word	0x20009fcc
 800cc50:	20009fd0 	.word	0x20009fd0
 800cc54:	20009fc4 	.word	0x20009fc4
 800cc58:	20009fd4 	.word	0x20009fd4
 800cc5c:	20009fd8 	.word	0x20009fd8

0800cc60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d03b      	beq.n	800ccea <vPortFree+0x8a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800cc72:	2308      	movs	r3, #8
 800cc74:	425b      	negs	r3, r3
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	4413      	add	r3, r2
 800cc7a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	db03      	blt.n	800cc90 <vPortFree+0x30>
 800cc88:	f7ff fede 	bl	800ca48 <ulSetInterruptMask>
 800cc8c:	bf00      	nop
 800cc8e:	e7fd      	b.n	800cc8c <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d003      	beq.n	800cca0 <vPortFree+0x40>
 800cc98:	f7ff fed6 	bl	800ca48 <ulSetInterruptMask>
 800cc9c:	bf00      	nop
 800cc9e:	e7fd      	b.n	800cc9c <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	0fdb      	lsrs	r3, r3, #31
 800cca6:	f003 0301 	and.w	r3, r3, #1
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d01c      	beq.n	800ccea <vPortFree+0x8a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d118      	bne.n	800ccea <vPortFree+0x8a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800ccc4:	f7fe fcd2 	bl	800b66c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	4b09      	ldr	r3, [pc, #36]	@ (800ccf4 <vPortFree+0x94>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	4a08      	ldr	r2, [pc, #32]	@ (800ccf4 <vPortFree+0x94>)
 800ccd4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccd6:	68b8      	ldr	r0, [r7, #8]
 800ccd8:	f000 f86c 	bl	800cdb4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800ccdc:	4b06      	ldr	r3, [pc, #24]	@ (800ccf8 <vPortFree+0x98>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	3301      	adds	r3, #1
 800cce2:	4a05      	ldr	r2, [pc, #20]	@ (800ccf8 <vPortFree+0x98>)
 800cce4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800cce6:	f7fe fccf 	bl	800b688 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800ccea:	bf00      	nop
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	20009fd0 	.word	0x20009fd0
 800ccf8:	20009fdc 	.word	0x20009fdc

0800ccfc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b085      	sub	sp, #20
 800cd00:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd02:	f648 03b8 	movw	r3, #35000	@ 0x88b8
 800cd06:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800cd08:	4b25      	ldr	r3, [pc, #148]	@ (800cda0 <prvHeapInit+0xa4>)
 800cd0a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f003 0307 	and.w	r3, r3, #7
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00c      	beq.n	800cd30 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	3307      	adds	r3, #7
 800cd1a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f023 0307 	bic.w	r3, r3, #7
 800cd22:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	4a1d      	ldr	r2, [pc, #116]	@ (800cda0 <prvHeapInit+0xa4>)
 800cd2c:	4413      	add	r3, r2
 800cd2e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd34:	4a1b      	ldr	r2, [pc, #108]	@ (800cda4 <prvHeapInit+0xa8>)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800cd3a:	4b1a      	ldr	r3, [pc, #104]	@ (800cda4 <prvHeapInit+0xa8>)
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	68ba      	ldr	r2, [r7, #8]
 800cd44:	4413      	add	r3, r2
 800cd46:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800cd48:	2208      	movs	r2, #8
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	1a9b      	subs	r3, r3, r2
 800cd4e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f023 0307 	bic.w	r3, r3, #7
 800cd56:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	4a13      	ldr	r2, [pc, #76]	@ (800cda8 <prvHeapInit+0xac>)
 800cd5c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800cd5e:	4b12      	ldr	r3, [pc, #72]	@ (800cda8 <prvHeapInit+0xac>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2200      	movs	r2, #0
 800cd64:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800cd66:	4b10      	ldr	r3, [pc, #64]	@ (800cda8 <prvHeapInit+0xac>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	1ad2      	subs	r2, r2, r3
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd7c:	4b0a      	ldr	r3, [pc, #40]	@ (800cda8 <prvHeapInit+0xac>)
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	4a08      	ldr	r2, [pc, #32]	@ (800cdac <prvHeapInit+0xb0>)
 800cd8a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	4a07      	ldr	r2, [pc, #28]	@ (800cdb0 <prvHeapInit+0xb4>)
 800cd92:	6013      	str	r3, [r2, #0]
}
 800cd94:	bf00      	nop
 800cd96:	3714      	adds	r7, #20
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr
 800cda0:	2000170c 	.word	0x2000170c
 800cda4:	20009fc4 	.word	0x20009fc4
 800cda8:	20009fcc 	.word	0x20009fcc
 800cdac:	20009fd4 	.word	0x20009fd4
 800cdb0:	20009fd0 	.word	0x20009fd0

0800cdb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b085      	sub	sp, #20
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cdbc:	4b28      	ldr	r3, [pc, #160]	@ (800ce60 <prvInsertBlockIntoFreeList+0xac>)
 800cdbe:	60fb      	str	r3, [r7, #12]
 800cdc0:	e002      	b.n	800cdc8 <prvInsertBlockIntoFreeList+0x14>
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	60fb      	str	r3, [r7, #12]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d8f7      	bhi.n	800cdc2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	4413      	add	r3, r2
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d108      	bne.n	800cdf6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	685a      	ldr	r2, [r3, #4]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	441a      	add	r2, r3
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	441a      	add	r2, r3
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d118      	bne.n	800ce3c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	4b15      	ldr	r3, [pc, #84]	@ (800ce64 <prvInsertBlockIntoFreeList+0xb0>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d00d      	beq.n	800ce32 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	685a      	ldr	r2, [r3, #4]
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	441a      	add	r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	601a      	str	r2, [r3, #0]
 800ce30:	e008      	b.n	800ce44 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce32:	4b0c      	ldr	r3, [pc, #48]	@ (800ce64 <prvInsertBlockIntoFreeList+0xb0>)
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	601a      	str	r2, [r3, #0]
 800ce3a:	e003      	b.n	800ce44 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d002      	beq.n	800ce52 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ce52:	bf00      	nop
 800ce54:	3714      	adds	r7, #20
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	20009fc4 	.word	0x20009fc4
 800ce64:	20009fcc 	.word	0x20009fcc

0800ce68 <__malloc_lock>:
 800ce68:	4801      	ldr	r0, [pc, #4]	@ (800ce70 <__malloc_lock+0x8>)
 800ce6a:	f7f5 b9e0 	b.w	800222e <__retarget_lock_acquire_recursive>
 800ce6e:	bf00      	nop
 800ce70:	2000092c 	.word	0x2000092c

0800ce74 <__malloc_unlock>:
 800ce74:	4801      	ldr	r0, [pc, #4]	@ (800ce7c <__malloc_unlock+0x8>)
 800ce76:	f7f5 b9ef 	b.w	8002258 <__retarget_lock_release_recursive>
 800ce7a:	bf00      	nop
 800ce7c:	2000092c 	.word	0x2000092c

0800ce80 <memset>:
 800ce80:	4402      	add	r2, r0
 800ce82:	4603      	mov	r3, r0
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d100      	bne.n	800ce8a <memset+0xa>
 800ce88:	4770      	bx	lr
 800ce8a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce8e:	e7f9      	b.n	800ce84 <memset+0x4>

0800ce90 <_reclaim_reent>:
 800ce90:	4b29      	ldr	r3, [pc, #164]	@ (800cf38 <_reclaim_reent+0xa8>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4283      	cmp	r3, r0
 800ce96:	b570      	push	{r4, r5, r6, lr}
 800ce98:	4604      	mov	r4, r0
 800ce9a:	d04b      	beq.n	800cf34 <_reclaim_reent+0xa4>
 800ce9c:	69c3      	ldr	r3, [r0, #28]
 800ce9e:	b1ab      	cbz	r3, 800cecc <_reclaim_reent+0x3c>
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	b16b      	cbz	r3, 800cec0 <_reclaim_reent+0x30>
 800cea4:	2500      	movs	r5, #0
 800cea6:	69e3      	ldr	r3, [r4, #28]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	5959      	ldr	r1, [r3, r5]
 800ceac:	2900      	cmp	r1, #0
 800ceae:	d13b      	bne.n	800cf28 <_reclaim_reent+0x98>
 800ceb0:	3504      	adds	r5, #4
 800ceb2:	2d80      	cmp	r5, #128	@ 0x80
 800ceb4:	d1f7      	bne.n	800cea6 <_reclaim_reent+0x16>
 800ceb6:	69e3      	ldr	r3, [r4, #28]
 800ceb8:	4620      	mov	r0, r4
 800ceba:	68d9      	ldr	r1, [r3, #12]
 800cebc:	f000 f870 	bl	800cfa0 <_free_r>
 800cec0:	69e3      	ldr	r3, [r4, #28]
 800cec2:	6819      	ldr	r1, [r3, #0]
 800cec4:	b111      	cbz	r1, 800cecc <_reclaim_reent+0x3c>
 800cec6:	4620      	mov	r0, r4
 800cec8:	f000 f86a 	bl	800cfa0 <_free_r>
 800cecc:	6961      	ldr	r1, [r4, #20]
 800cece:	b111      	cbz	r1, 800ced6 <_reclaim_reent+0x46>
 800ced0:	4620      	mov	r0, r4
 800ced2:	f000 f865 	bl	800cfa0 <_free_r>
 800ced6:	69e1      	ldr	r1, [r4, #28]
 800ced8:	b111      	cbz	r1, 800cee0 <_reclaim_reent+0x50>
 800ceda:	4620      	mov	r0, r4
 800cedc:	f000 f860 	bl	800cfa0 <_free_r>
 800cee0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cee2:	b111      	cbz	r1, 800ceea <_reclaim_reent+0x5a>
 800cee4:	4620      	mov	r0, r4
 800cee6:	f000 f85b 	bl	800cfa0 <_free_r>
 800ceea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ceec:	b111      	cbz	r1, 800cef4 <_reclaim_reent+0x64>
 800ceee:	4620      	mov	r0, r4
 800cef0:	f000 f856 	bl	800cfa0 <_free_r>
 800cef4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cef6:	b111      	cbz	r1, 800cefe <_reclaim_reent+0x6e>
 800cef8:	4620      	mov	r0, r4
 800cefa:	f000 f851 	bl	800cfa0 <_free_r>
 800cefe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cf00:	b111      	cbz	r1, 800cf08 <_reclaim_reent+0x78>
 800cf02:	4620      	mov	r0, r4
 800cf04:	f000 f84c 	bl	800cfa0 <_free_r>
 800cf08:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cf0a:	b111      	cbz	r1, 800cf12 <_reclaim_reent+0x82>
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	f000 f847 	bl	800cfa0 <_free_r>
 800cf12:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cf14:	b111      	cbz	r1, 800cf1c <_reclaim_reent+0x8c>
 800cf16:	4620      	mov	r0, r4
 800cf18:	f000 f842 	bl	800cfa0 <_free_r>
 800cf1c:	6a23      	ldr	r3, [r4, #32]
 800cf1e:	b14b      	cbz	r3, 800cf34 <_reclaim_reent+0xa4>
 800cf20:	4620      	mov	r0, r4
 800cf22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf26:	4718      	bx	r3
 800cf28:	680e      	ldr	r6, [r1, #0]
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f000 f838 	bl	800cfa0 <_free_r>
 800cf30:	4631      	mov	r1, r6
 800cf32:	e7bb      	b.n	800ceac <_reclaim_reent+0x1c>
 800cf34:	bd70      	pop	{r4, r5, r6, pc}
 800cf36:	bf00      	nop
 800cf38:	20000030 	.word	0x20000030

0800cf3c <__libc_init_array>:
 800cf3c:	b570      	push	{r4, r5, r6, lr}
 800cf3e:	4d0d      	ldr	r5, [pc, #52]	@ (800cf74 <__libc_init_array+0x38>)
 800cf40:	2600      	movs	r6, #0
 800cf42:	4c0d      	ldr	r4, [pc, #52]	@ (800cf78 <__libc_init_array+0x3c>)
 800cf44:	1b64      	subs	r4, r4, r5
 800cf46:	10a4      	asrs	r4, r4, #2
 800cf48:	42a6      	cmp	r6, r4
 800cf4a:	d109      	bne.n	800cf60 <__libc_init_array+0x24>
 800cf4c:	4d0b      	ldr	r5, [pc, #44]	@ (800cf7c <__libc_init_array+0x40>)
 800cf4e:	2600      	movs	r6, #0
 800cf50:	4c0b      	ldr	r4, [pc, #44]	@ (800cf80 <__libc_init_array+0x44>)
 800cf52:	f000 f86f 	bl	800d034 <_init>
 800cf56:	1b64      	subs	r4, r4, r5
 800cf58:	10a4      	asrs	r4, r4, #2
 800cf5a:	42a6      	cmp	r6, r4
 800cf5c:	d105      	bne.n	800cf6a <__libc_init_array+0x2e>
 800cf5e:	bd70      	pop	{r4, r5, r6, pc}
 800cf60:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf64:	3601      	adds	r6, #1
 800cf66:	4798      	blx	r3
 800cf68:	e7ee      	b.n	800cf48 <__libc_init_array+0xc>
 800cf6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf6e:	3601      	adds	r6, #1
 800cf70:	4798      	blx	r3
 800cf72:	e7f2      	b.n	800cf5a <__libc_init_array+0x1e>
 800cf74:	0800d510 	.word	0x0800d510
 800cf78:	0800d510 	.word	0x0800d510
 800cf7c:	0800d510 	.word	0x0800d510
 800cf80:	0800d514 	.word	0x0800d514

0800cf84 <memcpy>:
 800cf84:	440a      	add	r2, r1
 800cf86:	1e43      	subs	r3, r0, #1
 800cf88:	4291      	cmp	r1, r2
 800cf8a:	d100      	bne.n	800cf8e <memcpy+0xa>
 800cf8c:	4770      	bx	lr
 800cf8e:	b510      	push	{r4, lr}
 800cf90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf94:	4291      	cmp	r1, r2
 800cf96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf9a:	d1f9      	bne.n	800cf90 <memcpy+0xc>
 800cf9c:	bd10      	pop	{r4, pc}
	...

0800cfa0 <_free_r>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	4605      	mov	r5, r0
 800cfa4:	2900      	cmp	r1, #0
 800cfa6:	d041      	beq.n	800d02c <_free_r+0x8c>
 800cfa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfac:	1f0c      	subs	r4, r1, #4
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	bfb8      	it	lt
 800cfb2:	18e4      	addlt	r4, r4, r3
 800cfb4:	f7ff ff58 	bl	800ce68 <__malloc_lock>
 800cfb8:	4a1d      	ldr	r2, [pc, #116]	@ (800d030 <_free_r+0x90>)
 800cfba:	6813      	ldr	r3, [r2, #0]
 800cfbc:	b933      	cbnz	r3, 800cfcc <_free_r+0x2c>
 800cfbe:	6063      	str	r3, [r4, #4]
 800cfc0:	6014      	str	r4, [r2, #0]
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfc8:	f7ff bf54 	b.w	800ce74 <__malloc_unlock>
 800cfcc:	42a3      	cmp	r3, r4
 800cfce:	d908      	bls.n	800cfe2 <_free_r+0x42>
 800cfd0:	6820      	ldr	r0, [r4, #0]
 800cfd2:	1821      	adds	r1, r4, r0
 800cfd4:	428b      	cmp	r3, r1
 800cfd6:	bf01      	itttt	eq
 800cfd8:	6819      	ldreq	r1, [r3, #0]
 800cfda:	685b      	ldreq	r3, [r3, #4]
 800cfdc:	1809      	addeq	r1, r1, r0
 800cfde:	6021      	streq	r1, [r4, #0]
 800cfe0:	e7ed      	b.n	800cfbe <_free_r+0x1e>
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	b10b      	cbz	r3, 800cfec <_free_r+0x4c>
 800cfe8:	42a3      	cmp	r3, r4
 800cfea:	d9fa      	bls.n	800cfe2 <_free_r+0x42>
 800cfec:	6811      	ldr	r1, [r2, #0]
 800cfee:	1850      	adds	r0, r2, r1
 800cff0:	42a0      	cmp	r0, r4
 800cff2:	d10b      	bne.n	800d00c <_free_r+0x6c>
 800cff4:	6820      	ldr	r0, [r4, #0]
 800cff6:	4401      	add	r1, r0
 800cff8:	1850      	adds	r0, r2, r1
 800cffa:	6011      	str	r1, [r2, #0]
 800cffc:	4283      	cmp	r3, r0
 800cffe:	d1e0      	bne.n	800cfc2 <_free_r+0x22>
 800d000:	6818      	ldr	r0, [r3, #0]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	4408      	add	r0, r1
 800d006:	6053      	str	r3, [r2, #4]
 800d008:	6010      	str	r0, [r2, #0]
 800d00a:	e7da      	b.n	800cfc2 <_free_r+0x22>
 800d00c:	d902      	bls.n	800d014 <_free_r+0x74>
 800d00e:	230c      	movs	r3, #12
 800d010:	602b      	str	r3, [r5, #0]
 800d012:	e7d6      	b.n	800cfc2 <_free_r+0x22>
 800d014:	6820      	ldr	r0, [r4, #0]
 800d016:	1821      	adds	r1, r4, r0
 800d018:	428b      	cmp	r3, r1
 800d01a:	bf02      	ittt	eq
 800d01c:	6819      	ldreq	r1, [r3, #0]
 800d01e:	685b      	ldreq	r3, [r3, #4]
 800d020:	1809      	addeq	r1, r1, r0
 800d022:	6063      	str	r3, [r4, #4]
 800d024:	bf08      	it	eq
 800d026:	6021      	streq	r1, [r4, #0]
 800d028:	6054      	str	r4, [r2, #4]
 800d02a:	e7ca      	b.n	800cfc2 <_free_r+0x22>
 800d02c:	bd38      	pop	{r3, r4, r5, pc}
 800d02e:	bf00      	nop
 800d030:	20009fe0 	.word	0x20009fe0

0800d034 <_init>:
 800d034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d036:	bf00      	nop
 800d038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d03a:	bc08      	pop	{r3}
 800d03c:	469e      	mov	lr, r3
 800d03e:	4770      	bx	lr

0800d040 <_fini>:
 800d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d042:	bf00      	nop
 800d044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d046:	bc08      	pop	{r3}
 800d048:	469e      	mov	lr, r3
 800d04a:	4770      	bx	lr
